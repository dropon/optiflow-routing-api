/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// RoutingAPIService RoutingAPI service
type RoutingAPIService service

type ApiCalculateRouteRequest struct {
	ctx context.Context
	ApiService *RoutingAPIService
	waypoints *[]string
	routeId *string
	profile *string
	vehicle *Vehicle
	options *Options
	emissionOptions *EmissionOptions
	monetaryCostOptions *MonetaryCostOptions
	results *[]Results
}

// The list of waypoints the route will be calculated for. At least two waypoints are necessary, a maximum number may apply according to your subscription. The first waypoint is the start and the last is the destination of the route. Additional intermediate waypoints are possible.   The format of each waypoint is &#x60;&lt;lat&gt;,&lt;lon&gt;[;&lt;attribute&gt;;&lt;attribute&gt;;...]&#x60; representing a point with the latitude value in degrees from south to north and the longitude value in degrees (WGS84/EPSG:4326) from west to east. This point will be matched to the nearest possible road.   By default the air-line connection between given and matched coordinates is not included in the route polyline, distance and duration. We will refer to this type of waypoint as an _on-road waypoint_.  The behaviour of a waypoint can be changed by appending the following attributes:    * &#x60;includeLastMeters&#x60; to include the air-line connection between given and matched coordinates in the route polyline, distance and duration.  We will refer to this type of waypoint as an _off-road waypoint_.  * &#x60;roadAccess&#x3D;&lt;lat&gt;,&lt;lon&gt;&#x60;, to use these coordinates for matching to the nearest road. Implies **includeLastMeters**, i.e.  the air-line connection between the waypoint coordinates and the matched coordinates  is included in the route polyline, distance and duration. This is useful if the waypoint should not be matched to the nearest possible road but to some road further away,  e.g. garage exit at a different road.  * &#x60;matchSideOfStreet&#x60;, specifies that this waypoint will be reached at the side of street on which it is located.  This is useful to prevent the driver from crossing the street to actually reach the location represented by this waypoint.  * &#x60;radius&#x3D;&lt;distance&gt;&#x60;, influences the route course, so that the route passes an area defined by the given radius [m] (integer value).  This waypoint will not appear as a waypoint event in the response and may not be used as start and destination.  &#x60;radius&#x60; must be &gt; 0 and is not compatible with any other attribute on the same waypoint except for &#x60;name&#x60;.  We will refer to this type of waypoint as a _route-manipulation waypoint_.  * &#x60;name&#x3D;&lt;name of waypoint&gt;&#x60;, is an identifier to reference this waypoint in the response.  * In order to influence the route course so that the route uses a specific ferry or railway connection between two locations the waypoint is formatted as follows:  &#x60;combinedTransport&#x3D;&lt;lat&gt;,&lt;lon&gt;,&lt;lat&gt;,&lt;lon&gt;&#x60;. Both locations will be matched to the nearest ports looking for a direct connection.  If no connection can be found, this waypoint will be ignored, and the warning _ROUTING_COMBINED_TRANSPORT_WAYPOINT_IGNORED_ will be returned.  If more than one connection is found, the best one will be used,  and the alternative connections will be returned in the response in a warning _ROUTING_COMBINED_TRANSPORT_WAYPOINT_AMBIGUOUS_.  This waypoint will not appear as a waypoint event in the response and may not be used as start or destination.  We will refer to this type of waypoint as a _combined-transport waypoint_.   See [here](./concepts/waypoints) for more information.
func (r ApiCalculateRouteRequest) Waypoints(waypoints []string) ApiCalculateRouteRequest {
	r.waypoints = &waypoints
	return r
}

// Instead of the waypoint mentioned above, a **routeId** from a previously calculated route or a matched track can be entered. More information and applying restrictions can be found [here](./concepts/route-ids).
func (r ApiCalculateRouteRequest) RouteId(routeId string) ApiCalculateRouteRequest {
	r.routeId = &routeId
	return r
}

// A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](../data-api/concepts/profiles) such as _EUR_TRAILER_TRUCK_.  If this parameter is not specified and the first waypoint or the routeId is located in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default instead of _EUR_TRAILER_TRUCK_.  If the first waypoint or the routeId is located in the Americas but a non-American profile is specified or vice-versa, a warning is returned (routing only). Always use a profile which matches the region of the waypoints to obtain best results.  If the attributes of the profile do not fit to your vehicle, the values can be changed by the corresponding attributes in the **vehicle** parameter (routing only).  The values of the predefined profiles may be adapted to reflect current vehicle standards. To obtain the same results when values change, it is recommended to  always send with the request the **vehicle** parameters that are important for your use case.
func (r ApiCalculateRouteRequest) Profile(profile string) ApiCalculateRouteRequest {
	r.profile = &profile
	return r
}

// Physical and legal properties of the vehicle such as its dimensions to override the values of the selected **profile**.  These parameters will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles should not be specified in the request.  Use array notation like &#x60;vehicle[emissionStandard]&#x3D;EURO_5&#x60; to set vehicle attributes.
func (r ApiCalculateRouteRequest) Vehicle(vehicle Vehicle) ApiCalculateRouteRequest {
	r.vehicle = &vehicle
	return r
}

// Routing-relevant options like date of travel or the use of additional data. Use array notation like &#x60;options[trafficMode]&#x3D;AVERAGE&#x60; to set options.
func (r ApiCalculateRouteRequest) Options(options Options) ApiCalculateRouteRequest {
	r.options = &options
	return r
}

// Relevant options to report emissions. Use array notation like &#x60;emissionOptions[calculationMethods]&#x3D;ISO14083_2023&#x60; to set options.  This parameter supersedes emission-related values in **results**.  If specified the emission-related values in **results** will be ignored.
func (r ApiCalculateRouteRequest) EmissionOptions(emissionOptions EmissionOptions) ApiCalculateRouteRequest {
	r.emissionOptions = &emissionOptions
	return r
}

// Relevant options to report the monetary costs of a route when _MONETARY_COSTS_ are requested in the **results**. Used for monetary cost routing when **options[routingMode]&#x3D;MONETARY** is set. The costs have to be specified in the currency that is set in **options[currency]**.
func (r ApiCalculateRouteRequest) MonetaryCostOptions(monetaryCostOptions MonetaryCostOptions) ApiCalculateRouteRequest {
	r.monetaryCostOptions = &monetaryCostOptions
	return r
}

// Comma-separated list that defines which results will be returned.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/route-ids) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route.      Not supported, if more than two on-road or off-road waypoints are specified or if **options[routingMode]&#x3D;MONETARY** is specified.     Please note that the additional calculations will degrade the performance.    * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic event. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  * &#x60;DELIVERY_ONLY_EVENTS&#x60;      Response includes **events** when a road prohibited except for delivery vehicles is entered or exited by the route.  * &#x60;DELIVERY_ONLY_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each delivery-only event. _DELIVERY_ONLY_EVENTS_ will automatically be included.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     This result is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     This result is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     This result is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     This result is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     We recommend to additionally request _WAYPOINT_EVENTS_ to assign service and recreation events to the waypoint at which they take place, in particular to distinguish them when there are several waypoints at the same location.     Response includes **events** when the driver takes a break or a rest, performs service or waits for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_EVENTS_WITH_DRIVING&#x60;     Response includes **events** when the driver drives, takes a break or a rest, performs service or waits for a waypoint to open (**schedule**). _SCHEDULE_EVENTS_ will automatically be included.     We recommend to additionally request _WAYPOINT_EVENTS_ to assign service and recreation events to the waypoint at which they take place, in particular to distinguish them when there are several waypoints at the same location.  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.
func (r ApiCalculateRouteRequest) Results(results []Results) ApiCalculateRouteRequest {
	r.results = &results
	return r
}

func (r ApiCalculateRouteRequest) Execute() (*RouteResponse, *http.Response, error) {
	return r.ApiService.CalculateRouteExecute(r)
}

/*
CalculateRoute Method for CalculateRoute

Calculates a route by specifying a list of waypoints.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCalculateRouteRequest
*/
func (a *RoutingAPIService) CalculateRoute(ctx context.Context) ApiCalculateRouteRequest {
	return ApiCalculateRouteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RouteResponse
func (a *RoutingAPIService) CalculateRouteExecute(r ApiCalculateRouteRequest) (*RouteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RouteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingAPIService.CalculateRoute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.waypoints != nil {
		t := *r.waypoints
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "waypoints", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "waypoints", t, "form", "multi")
		}
	}
	if r.routeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "routeId", r.routeId, "form", "")
	}
	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	} else {
		var defaultValue string = "EUR_TRAILER_TRUCK"
		r.profile = &defaultValue
	}
	if r.vehicle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vehicle", r.vehicle, "deepObject", "")
	}
	if r.options != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "options", r.options, "deepObject", "")
	}
	if r.emissionOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emissionOptions", r.emissionOptions, "deepObject", "")
	}
	if r.monetaryCostOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monetaryCostOptions", r.monetaryCostOptions, "deepObject", "")
	}
	if r.results != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "results", r.results, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCalculateRoutePostRequest struct {
	ctx context.Context
	ApiService *RoutingAPIService
	routeRequest *RouteRequest
	profile *string
	vehicle *Vehicle
	driver *Driver
	options *Options
	emissionOptions *EmissionOptions
	monetaryCostOptions *MonetaryCostOptions
	evOptions *EvOptions
	results *[]Results
}

func (r ApiCalculateRoutePostRequest) RouteRequest(routeRequest RouteRequest) ApiCalculateRoutePostRequest {
	r.routeRequest = &routeRequest
	return r
}

// A profile defines a vehicle by a set of attributes, matching typical transport situations. It must either be the name of one of the [predefined profiles](../data-api/concepts/profiles) such as _EUR_TRAILER_TRUCK_ or a UUID of a predefined [vehicle model](../data-api/code-samples/vehicle-models) from the Data API.  If this parameter is not specified and the first waypoint or the routeId is located in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default instead of _EUR_TRAILER_TRUCK_.  If the first waypoint or the routeId is located in the Americas but a non-American profile is specified or vice-versa, a warning is returned (routing only). Always use a profile which matches the region of the waypoints to obtain best results.  If a model of an electric vehicle is used, the electricity consumption of the concrete vehicle model can be calculated. Some parameters like **vehicle[engineType]** cannot be used with a model of an electric vehicle. Those parameters are automatically filled as applicable from the selected model.  Please refer to the [concept](./concepts/model-based-ev-consumption-calculation) to see specifically which parameters are not compatible. These vehicle model profiles are in a preview state, the API is stable, feature changes could be introduced in future.  If the attributes of the profile do not fit to your vehicle, the values can be changed by the corresponding attributes in the **vehicle** parameter (routing only).  The values of the predefined profiles may be adapted to reflect current vehicle standards. To obtain the same results when values change, it is recommended to  always send with the request the **vehicle** parameters that are important for your use case.
func (r ApiCalculateRoutePostRequest) Profile(profile string) ApiCalculateRoutePostRequest {
	r.profile = &profile
	return r
}

// Physical and legal properties of the vehicle such as its dimensions to override the values of the selected **profile**.  These parameters will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles should not be specified in the request.  Use array notation like &#x60;vehicle[emissionStandard]&#x3D;EURO_5&#x60; to set vehicle attributes.
func (r ApiCalculateRoutePostRequest) Vehicle(vehicle Vehicle) ApiCalculateRoutePostRequest {
	r.vehicle = &vehicle
	return r
}

// Options regarding the drivers&#39; working hours. If no driver object with a working hours preset is passed with the request, working hours will be unlimited.
func (r ApiCalculateRoutePostRequest) Driver(driver Driver) ApiCalculateRoutePostRequest {
	r.driver = &driver
	return r
}

// Routing-relevant options like date of travel or the use of additional data. Use array notation like &#x60;options[trafficMode]&#x3D;AVERAGE&#x60; to set options.
func (r ApiCalculateRoutePostRequest) Options(options Options) ApiCalculateRoutePostRequest {
	r.options = &options
	return r
}

// Relevant options to report emissions. Use array notation like &#x60;emissionOptions[calculationMethods]&#x3D;ISO14083_2023&#x60; to set options.  This parameter supersedes emission-related values in **results**.  If specified the emission-related values in **results** will be ignored.
func (r ApiCalculateRoutePostRequest) EmissionOptions(emissionOptions EmissionOptions) ApiCalculateRoutePostRequest {
	r.emissionOptions = &emissionOptions
	return r
}

// Relevant options to report the monetary costs of a route when _MONETARY_COSTS_ are requested in the **results**. Used for monetary cost routing when **options[routingMode]&#x3D;MONETARY** is set. The costs have to be specified in the currency that is set in **options[currency]**.
func (r ApiCalculateRoutePostRequest) MonetaryCostOptions(monetaryCostOptions MonetaryCostOptions) ApiCalculateRoutePostRequest {
	r.monetaryCostOptions = &monetaryCostOptions
	return r
}

// Relevant options to report the electricity consumption of an electric vehicle along a route when _EV_REPORT_, _EV_STATUS_EVENTS_, _EV_STATUS_EVENTS_POLYLINE_ or _EV_CHARGE_EVENTS_ are requested in the **results**. Use array notation like &#x60;evOptions[initialStateOfCharge]&#x3D;100&#x60; to set options.  This parameter is in a preview state, the API is stable, feature changes could be introduced in future.
func (r ApiCalculateRoutePostRequest) EvOptions(evOptions EvOptions) ApiCalculateRoutePostRequest {
	r.evOptions = &evOptions
	return r
}

// Comma-separated list that defines which results will be returned.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/route-ids) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route.      Not supported, if more than two on-road or off-road waypoints are specified or if **options[routingMode]&#x3D;MONETARY** is specified.     Please note that the additional calculations will degrade the performance.    * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic event. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  * &#x60;DELIVERY_ONLY_EVENTS&#x60;      Response includes **events** when a road prohibited except for delivery vehicles is entered or exited by the route.  * &#x60;DELIVERY_ONLY_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each delivery-only event. _DELIVERY_ONLY_EVENTS_ will automatically be included.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     This result is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     This result is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     This result is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     This result is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     We recommend to additionally request _WAYPOINT_EVENTS_ to assign service and recreation events to the waypoint at which they take place, in particular to distinguish them when there are several waypoints at the same location.     Response includes **events** when the driver takes a break or a rest, performs service or waits for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_EVENTS_WITH_DRIVING&#x60;     Response includes **events** when the driver drives, takes a break or a rest, performs service or waits for a waypoint to open (**schedule**). _SCHEDULE_EVENTS_ will automatically be included.     We recommend to additionally request _WAYPOINT_EVENTS_ to assign service and recreation events to the waypoint at which they take place, in particular to distinguish them when there are several waypoints at the same location.  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.
func (r ApiCalculateRoutePostRequest) Results(results []Results) ApiCalculateRoutePostRequest {
	r.results = &results
	return r
}

func (r ApiCalculateRoutePostRequest) Execute() (*RouteResponse, *http.Response, error) {
	return r.ApiService.CalculateRoutePostExecute(r)
}

/*
CalculateRoutePost Method for CalculateRoutePost

Calculates a route by specifying a list of waypoints taking into account opening intervals and working hours.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCalculateRoutePostRequest
*/
func (a *RoutingAPIService) CalculateRoutePost(ctx context.Context) ApiCalculateRoutePostRequest {
	return ApiCalculateRoutePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RouteResponse
func (a *RoutingAPIService) CalculateRoutePostExecute(r ApiCalculateRoutePostRequest) (*RouteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RouteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingAPIService.CalculateRoutePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routeRequest == nil {
		return localVarReturnValue, nil, reportError("routeRequest is required and must be specified")
	}

	if r.profile != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "profile", r.profile, "form", "")
	} else {
		var defaultValue string = "EUR_TRAILER_TRUCK"
		r.profile = &defaultValue
	}
	if r.vehicle != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "vehicle", r.vehicle, "deepObject", "")
	}
	if r.driver != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "driver", r.driver, "deepObject", "")
	}
	if r.options != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "options", r.options, "deepObject", "")
	}
	if r.emissionOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "emissionOptions", r.emissionOptions, "deepObject", "")
	}
	if r.monetaryCostOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "monetaryCostOptions", r.monetaryCostOptions, "deepObject", "")
	}
	if r.evOptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "evOptions", r.evOptions, "deepObject", "")
	}
	if r.results != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "results", r.results, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEstimatedTimeOfArrivalRequest struct {
	ctx context.Context
	ApiService *RoutingAPIService
	routeId string
	waypoint *PositionAtWaypoint
	position *PositionOnRoute
	time *time.Time
	workLogbook *WorkLogbook
}

func (r ApiGetEstimatedTimeOfArrivalRequest) Waypoint(waypoint PositionAtWaypoint) ApiGetEstimatedTimeOfArrivalRequest {
	r.waypoint = &waypoint
	return r
}

func (r ApiGetEstimatedTimeOfArrivalRequest) Position(position PositionOnRoute) ApiGetEstimatedTimeOfArrivalRequest {
	r.position = &position
	return r
}

// Defines the time when the vehicle position was captured formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If not specified the current time will be used, i.e. the given position of the vehicle is its current position.  If the date-time string does not include an explicit offset to UTC, the time will be interpreted as the local time of the position of the vehicle. The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00.  The response will contain the offset to UTC specified in the request, otherwise it will contain the offset to UTC of the position of the vehicle. For best results the time should be only several minutes in the past or in the future, otherwise live traffic will not be considered properly.
func (r ApiGetEstimatedTimeOfArrivalRequest) Time(time time.Time) ApiGetEstimatedTimeOfArrivalRequest {
	r.time = &time
	return r
}

func (r ApiGetEstimatedTimeOfArrivalRequest) WorkLogbook(workLogbook WorkLogbook) ApiGetEstimatedTimeOfArrivalRequest {
	r.workLogbook = &workLogbook
	return r
}

func (r ApiGetEstimatedTimeOfArrivalRequest) Execute() (*EtaResponse, *http.Response, error) {
	return r.ApiService.GetEstimatedTimeOfArrivalExecute(r)
}

/*
GetEstimatedTimeOfArrival Method for GetEstimatedTimeOfArrival

Calculates the estimated time of arrival (ETA) based on a previously calculated route and the position of the vehicle.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param routeId The route ID returned from a previous route calculation. See [here](./concepts/route-ids) for more information.  Make sure to assign unique names to all off-road and on-road waypoints in the request to obtain the route ID. Otherwise, the route ID cannot be used for ETA calculation because the waypoints cannot be identified. Furthermore, the route ID must not contain route-manipulation waypoints, combined-transport waypoints or vehicle parameters at waypoints. 
 @return ApiGetEstimatedTimeOfArrivalRequest
*/
func (a *RoutingAPIService) GetEstimatedTimeOfArrival(ctx context.Context, routeId string) ApiGetEstimatedTimeOfArrivalRequest {
	return ApiGetEstimatedTimeOfArrivalRequest{
		ApiService: a,
		ctx: ctx,
		routeId: routeId,
	}
}

// Execute executes the request
//  @return EtaResponse
func (a *RoutingAPIService) GetEstimatedTimeOfArrivalExecute(r ApiGetEstimatedTimeOfArrivalRequest) (*EtaResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EtaResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingAPIService.GetEstimatedTimeOfArrival")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/eta/{routeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"routeId"+"}", url.PathEscape(parameterValueToString(r.routeId, "routeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.waypoint != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "waypoint", r.waypoint, "deepObject", "")
	}
	if r.position != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "position", r.position, "deepObject", "")
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.workLogbook != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workLogbook", r.workLogbook, "deepObject", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRouteByRouteIdRequest struct {
	ctx context.Context
	ApiService *RoutingAPIService
	routeId string
	results *[]Results
}

// Comma-separated list that defines which results will be returned.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/route-ids) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route.      Not supported, if more than two on-road or off-road waypoints are specified or if **options[routingMode]&#x3D;MONETARY** is specified.     Please note that the additional calculations will degrade the performance.    * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic event. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  * &#x60;DELIVERY_ONLY_EVENTS&#x60;      Response includes **events** when a road prohibited except for delivery vehicles is entered or exited by the route.  * &#x60;DELIVERY_ONLY_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each delivery-only event. _DELIVERY_ONLY_EVENTS_ will automatically be included.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     This result is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     This result is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     This result is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     This result is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     We recommend to additionally request _WAYPOINT_EVENTS_ to assign service and recreation events to the waypoint at which they take place, in particular to distinguish them when there are several waypoints at the same location.     Response includes **events** when the driver takes a break or a rest, performs service or waits for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_EVENTS_WITH_DRIVING&#x60;     Response includes **events** when the driver drives, takes a break or a rest, performs service or waits for a waypoint to open (**schedule**). _SCHEDULE_EVENTS_ will automatically be included.     We recommend to additionally request _WAYPOINT_EVENTS_ to assign service and recreation events to the waypoint at which they take place, in particular to distinguish them when there are several waypoints at the same location.  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.
func (r ApiGetRouteByRouteIdRequest) Results(results []Results) ApiGetRouteByRouteIdRequest {
	r.results = &results
	return r
}

func (r ApiGetRouteByRouteIdRequest) Execute() (*RouteResponse, *http.Response, error) {
	return r.ApiService.GetRouteByRouteIdExecute(r)
}

/*
GetRouteByRouteId Method for GetRouteByRouteId

Returns the route of a previously calculated route, an alternative route or a route calculated by the Matrix Routing API.
The response will use the same parameters as the previously calculated route.  If no **results** are specified it will contain all results of the previously calculated route except for _ALTERNATIVE_ROUTES_.  If **results** are specified, the results of the previously calculated route will be ignored, only the specified results will be returned. The result _ALTERNATIVE_ROUTES_ is not allowed to be requested. Emission-related results can be requested only if the previous route was not calculated using **emissionOptions**. Results available only in the POST operation can be requested only if the previous route was calculated using the POST operation. As the response will always contain the requested **routeId**, the result _ROUTE_ID_ will have no effect.
Although the route itself will be the same, other results might be slightly different such as the travel time or  toll costs. See [here](./concepts/route-ids) for more information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param routeId The route ID returned from a previous route calculation or alternative route.
 @return ApiGetRouteByRouteIdRequest
*/
func (a *RoutingAPIService) GetRouteByRouteId(ctx context.Context, routeId string) ApiGetRouteByRouteIdRequest {
	return ApiGetRouteByRouteIdRequest{
		ApiService: a,
		ctx: ctx,
		routeId: routeId,
	}
}

// Execute executes the request
//  @return RouteResponse
func (a *RoutingAPIService) GetRouteByRouteIdExecute(r ApiGetRouteByRouteIdRequest) (*RouteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RouteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RoutingAPIService.GetRouteByRouteId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/routes/{routeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"routeId"+"}", url.PathEscape(parameterValueToString(r.routeId, "routeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.results != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "results", r.results, "form", "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
