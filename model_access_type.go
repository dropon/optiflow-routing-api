/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// AccessType Indicates if a route section is entered or exited. Not present for violation events of type _SCHEDULE_.  * `ENTER` - Entering a section.    * `EXIT` - Exiting a section.    * `PASS` - Passing an intersection, a gate or a specific location. Can only occur with violation events of type _RESTRICTED_ACCESS_ and _PROHIBITED_BY_INTERSECTING_POLYLINE_.
type AccessType string

// List of AccessType
const (
	ENTER AccessType = "ENTER"
	EXIT AccessType = "EXIT"
	PASS AccessType = "PASS"
)

// All allowed values of AccessType enum
var AllowedAccessTypeEnumValues = []AccessType{
	"ENTER",
	"EXIT",
	"PASS",
}

func (v *AccessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessType(value)
	for _, existing := range AllowedAccessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessType", value)
}

// NewAccessTypeFromValue returns a pointer to a valid AccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessTypeFromValue(v string) (*AccessType, error) {
	ev := AccessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessType: valid values are %v", v, AllowedAccessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessType) IsValid() bool {
	for _, existing := range AllowedAccessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessType value
func (v AccessType) Ptr() *AccessType {
	return &v
}

type NullableAccessType struct {
	value *AccessType
	isSet bool
}

func (v NullableAccessType) Get() *AccessType {
	return v.value
}

func (v *NullableAccessType) Set(val *AccessType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessType(val *AccessType) *NullableAccessType {
	return &NullableAccessType{value: val, isSet: true}
}

func (v NullableAccessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

