/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// AvoidFeature the model 'AvoidFeature'
type AvoidFeature string

// List of AvoidFeature
const (
	TOLL AvoidFeature = "TOLL"
	FERRIES AvoidFeature = "FERRIES"
	RAIL_SHUTTLES AvoidFeature = "RAIL_SHUTTLES"
	HIGHWAYS AvoidFeature = "HIGHWAYS"
)

// All allowed values of AvoidFeature enum
var AllowedAvoidFeatureEnumValues = []AvoidFeature{
	"TOLL",
	"FERRIES",
	"RAIL_SHUTTLES",
	"HIGHWAYS",
}

func (v *AvoidFeature) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvoidFeature(value)
	for _, existing := range AllowedAvoidFeatureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvoidFeature", value)
}

// NewAvoidFeatureFromValue returns a pointer to a valid AvoidFeature
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvoidFeatureFromValue(v string) (*AvoidFeature, error) {
	ev := AvoidFeature(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvoidFeature: valid values are %v", v, AllowedAvoidFeatureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvoidFeature) IsValid() bool {
	for _, existing := range AllowedAvoidFeatureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvoidFeature value
func (v AvoidFeature) Ptr() *AvoidFeature {
	return &v
}

type NullableAvoidFeature struct {
	value *AvoidFeature
	isSet bool
}

func (v NullableAvoidFeature) Get() *AvoidFeature {
	return v.value
}

func (v *NullableAvoidFeature) Set(val *AvoidFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableAvoidFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableAvoidFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvoidFeature(val *AvoidFeature) *NullableAvoidFeature {
	return &NullableAvoidFeature{value: val, isSet: true}
}

func (v NullableAvoidFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvoidFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

