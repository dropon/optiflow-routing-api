/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CalculationStatus The current status of the calculation.  * `RUNNING` - The calculation is still running.  * `SUCCEEDED` - The calculation has completed successfully.  * `FAILED` - The calculation has completed with a failure.
type CalculationStatus string

// List of CalculationStatus
const (
	RUNNING CalculationStatus = "RUNNING"
	SUCCEEDED CalculationStatus = "SUCCEEDED"
	FAILED CalculationStatus = "FAILED"
)

// All allowed values of CalculationStatus enum
var AllowedCalculationStatusEnumValues = []CalculationStatus{
	"RUNNING",
	"SUCCEEDED",
	"FAILED",
}

func (v *CalculationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CalculationStatus(value)
	for _, existing := range AllowedCalculationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CalculationStatus", value)
}

// NewCalculationStatusFromValue returns a pointer to a valid CalculationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCalculationStatusFromValue(v string) (*CalculationStatus, error) {
	ev := CalculationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CalculationStatus: valid values are %v", v, AllowedCalculationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CalculationStatus) IsValid() bool {
	for _, existing := range AllowedCalculationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CalculationStatus value
func (v CalculationStatus) Ptr() *CalculationStatus {
	return &v
}

type NullableCalculationStatus struct {
	value *CalculationStatus
	isSet bool
}

func (v NullableCalculationStatus) Get() *CalculationStatus {
	return v.value
}

func (v *NullableCalculationStatus) Set(val *CalculationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculationStatus(val *CalculationStatus) *NullableCalculationStatus {
	return &NullableCalculationStatus{value: val, isSet: true}
}

func (v NullableCalculationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

