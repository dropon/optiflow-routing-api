/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargeEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeEvent{}

// ChargeEvent Issued when the battery should be charged at a waypoint.  Requires _EV_CHARGE_EVENTS_ to be requested.
type ChargeEvent struct {
	// The time spent for charging the battery [s]. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it.
	ChargingTime int32 `json:"chargingTime"`
	// The amount of electricity charged [kWh].
	ElectricityCharged float64 `json:"electricityCharged"`
	// The percentage of battery charged [%].
	PercentageCharged int32 `json:"percentageCharged"`
	Cost ElectricityPrice `json:"cost"`
}

type _ChargeEvent ChargeEvent

// NewChargeEvent instantiates a new ChargeEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeEvent(chargingTime int32, electricityCharged float64, percentageCharged int32, cost ElectricityPrice) *ChargeEvent {
	this := ChargeEvent{}
	this.ChargingTime = chargingTime
	this.ElectricityCharged = electricityCharged
	this.PercentageCharged = percentageCharged
	this.Cost = cost
	return &this
}

// NewChargeEventWithDefaults instantiates a new ChargeEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeEventWithDefaults() *ChargeEvent {
	this := ChargeEvent{}
	return &this
}

// GetChargingTime returns the ChargingTime field value
func (o *ChargeEvent) GetChargingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ChargingTime
}

// GetChargingTimeOk returns a tuple with the ChargingTime field value
// and a boolean to check if the value has been set.
func (o *ChargeEvent) GetChargingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargingTime, true
}

// SetChargingTime sets field value
func (o *ChargeEvent) SetChargingTime(v int32) {
	o.ChargingTime = v
}

// GetElectricityCharged returns the ElectricityCharged field value
func (o *ChargeEvent) GetElectricityCharged() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ElectricityCharged
}

// GetElectricityChargedOk returns a tuple with the ElectricityCharged field value
// and a boolean to check if the value has been set.
func (o *ChargeEvent) GetElectricityChargedOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectricityCharged, true
}

// SetElectricityCharged sets field value
func (o *ChargeEvent) SetElectricityCharged(v float64) {
	o.ElectricityCharged = v
}

// GetPercentageCharged returns the PercentageCharged field value
func (o *ChargeEvent) GetPercentageCharged() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PercentageCharged
}

// GetPercentageChargedOk returns a tuple with the PercentageCharged field value
// and a boolean to check if the value has been set.
func (o *ChargeEvent) GetPercentageChargedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PercentageCharged, true
}

// SetPercentageCharged sets field value
func (o *ChargeEvent) SetPercentageCharged(v int32) {
	o.PercentageCharged = v
}

// GetCost returns the Cost field value
func (o *ChargeEvent) GetCost() ElectricityPrice {
	if o == nil {
		var ret ElectricityPrice
		return ret
	}

	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value
// and a boolean to check if the value has been set.
func (o *ChargeEvent) GetCostOk() (*ElectricityPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cost, true
}

// SetCost sets field value
func (o *ChargeEvent) SetCost(v ElectricityPrice) {
	o.Cost = v
}

func (o ChargeEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chargingTime"] = o.ChargingTime
	toSerialize["electricityCharged"] = o.ElectricityCharged
	toSerialize["percentageCharged"] = o.PercentageCharged
	toSerialize["cost"] = o.Cost
	return toSerialize, nil
}

func (o *ChargeEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chargingTime",
		"electricityCharged",
		"percentageCharged",
		"cost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeEvent := _ChargeEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeEvent)

	if err != nil {
		return err
	}

	*o = ChargeEvent(varChargeEvent)

	return err
}

type NullableChargeEvent struct {
	value *ChargeEvent
	isSet bool
}

func (v NullableChargeEvent) Get() *ChargeEvent {
	return v.value
}

func (v *NullableChargeEvent) Set(val *ChargeEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeEvent(val *ChargeEvent) *NullableChargeEvent {
	return &NullableChargeEvent{value: val, isSet: true}
}

func (v NullableChargeEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


