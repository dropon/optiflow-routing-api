/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargingStation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargingStation{}

// ChargingStation Defines the charging capabilities available the a waypoint. 
type ChargingStation struct {
	// The power delivered by the charging station [kW].
	Power int32 `json:"power"`
	CurrentType CurrentType `json:"currentType"`
	// The time to setup the connection [s].
	SetupTime *int32 `json:"setupTime,omitempty"`
	// The price of one kWh in the currency defined in **options[currency]**.
	KWhPrice *float64 `json:"kWhPrice,omitempty"`
	// If true, the service time can be used for charging. Will be ignored, if **serviceTime** is 0. This can have  an influence on charging optimization because the additional time needed for charging is minimized.
	UseServiceTimeForCharging *bool `json:"useServiceTimeForCharging,omitempty"`
}

type _ChargingStation ChargingStation

// NewChargingStation instantiates a new ChargingStation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargingStation(power int32, currentType CurrentType) *ChargingStation {
	this := ChargingStation{}
	this.Power = power
	this.CurrentType = currentType
	var setupTime int32 = 0
	this.SetupTime = &setupTime
	var kWhPrice float64 = 0
	this.KWhPrice = &kWhPrice
	var useServiceTimeForCharging bool = false
	this.UseServiceTimeForCharging = &useServiceTimeForCharging
	return &this
}

// NewChargingStationWithDefaults instantiates a new ChargingStation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargingStationWithDefaults() *ChargingStation {
	this := ChargingStation{}
	var currentType CurrentType = ALTERNATING
	this.CurrentType = currentType
	var setupTime int32 = 0
	this.SetupTime = &setupTime
	var kWhPrice float64 = 0
	this.KWhPrice = &kWhPrice
	var useServiceTimeForCharging bool = false
	this.UseServiceTimeForCharging = &useServiceTimeForCharging
	return &this
}

// GetPower returns the Power field value
func (o *ChargingStation) GetPower() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Power
}

// GetPowerOk returns a tuple with the Power field value
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetPowerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Power, true
}

// SetPower sets field value
func (o *ChargingStation) SetPower(v int32) {
	o.Power = v
}

// GetCurrentType returns the CurrentType field value
func (o *ChargingStation) GetCurrentType() CurrentType {
	if o == nil {
		var ret CurrentType
		return ret
	}

	return o.CurrentType
}

// GetCurrentTypeOk returns a tuple with the CurrentType field value
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetCurrentTypeOk() (*CurrentType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentType, true
}

// SetCurrentType sets field value
func (o *ChargingStation) SetCurrentType(v CurrentType) {
	o.CurrentType = v
}

// GetSetupTime returns the SetupTime field value if set, zero value otherwise.
func (o *ChargingStation) GetSetupTime() int32 {
	if o == nil || IsNil(o.SetupTime) {
		var ret int32
		return ret
	}
	return *o.SetupTime
}

// GetSetupTimeOk returns a tuple with the SetupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetSetupTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.SetupTime) {
		return nil, false
	}
	return o.SetupTime, true
}

// HasSetupTime returns a boolean if a field has been set.
func (o *ChargingStation) HasSetupTime() bool {
	if o != nil && !IsNil(o.SetupTime) {
		return true
	}

	return false
}

// SetSetupTime gets a reference to the given int32 and assigns it to the SetupTime field.
func (o *ChargingStation) SetSetupTime(v int32) {
	o.SetupTime = &v
}

// GetKWhPrice returns the KWhPrice field value if set, zero value otherwise.
func (o *ChargingStation) GetKWhPrice() float64 {
	if o == nil || IsNil(o.KWhPrice) {
		var ret float64
		return ret
	}
	return *o.KWhPrice
}

// GetKWhPriceOk returns a tuple with the KWhPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetKWhPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.KWhPrice) {
		return nil, false
	}
	return o.KWhPrice, true
}

// HasKWhPrice returns a boolean if a field has been set.
func (o *ChargingStation) HasKWhPrice() bool {
	if o != nil && !IsNil(o.KWhPrice) {
		return true
	}

	return false
}

// SetKWhPrice gets a reference to the given float64 and assigns it to the KWhPrice field.
func (o *ChargingStation) SetKWhPrice(v float64) {
	o.KWhPrice = &v
}

// GetUseServiceTimeForCharging returns the UseServiceTimeForCharging field value if set, zero value otherwise.
func (o *ChargingStation) GetUseServiceTimeForCharging() bool {
	if o == nil || IsNil(o.UseServiceTimeForCharging) {
		var ret bool
		return ret
	}
	return *o.UseServiceTimeForCharging
}

// GetUseServiceTimeForChargingOk returns a tuple with the UseServiceTimeForCharging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetUseServiceTimeForChargingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseServiceTimeForCharging) {
		return nil, false
	}
	return o.UseServiceTimeForCharging, true
}

// HasUseServiceTimeForCharging returns a boolean if a field has been set.
func (o *ChargingStation) HasUseServiceTimeForCharging() bool {
	if o != nil && !IsNil(o.UseServiceTimeForCharging) {
		return true
	}

	return false
}

// SetUseServiceTimeForCharging gets a reference to the given bool and assigns it to the UseServiceTimeForCharging field.
func (o *ChargingStation) SetUseServiceTimeForCharging(v bool) {
	o.UseServiceTimeForCharging = &v
}

func (o ChargingStation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargingStation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["power"] = o.Power
	toSerialize["currentType"] = o.CurrentType
	if !IsNil(o.SetupTime) {
		toSerialize["setupTime"] = o.SetupTime
	}
	if !IsNil(o.KWhPrice) {
		toSerialize["kWhPrice"] = o.KWhPrice
	}
	if !IsNil(o.UseServiceTimeForCharging) {
		toSerialize["useServiceTimeForCharging"] = o.UseServiceTimeForCharging
	}
	return toSerialize, nil
}

func (o *ChargingStation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"power",
		"currentType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargingStation := _ChargingStation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargingStation)

	if err != nil {
		return err
	}

	*o = ChargingStation(varChargingStation)

	return err
}

type NullableChargingStation struct {
	value *ChargingStation
	isSet bool
}

func (v NullableChargingStation) Get() *ChargingStation {
	return v.value
}

func (v *NullableChargingStation) Set(val *ChargingStation) {
	v.value = val
	v.isSet = true
}

func (v NullableChargingStation) IsSet() bool {
	return v.isSet
}

func (v *NullableChargingStation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargingStation(val *ChargingStation) *NullableChargingStation {
	return &NullableChargingStation{value: val, isSet: true}
}

func (v NullableChargingStation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargingStation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


