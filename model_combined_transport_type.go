/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// CombinedTransportType The type of the combined transport, i.e. how the vehicle is transported.  * `BOAT` - The combined transport is by boat, i.e. on a ferry.  * `RAIL` - The combined transport is by rail, i.e. on a train or rail shuttle.
type CombinedTransportType string

// List of CombinedTransportType
const (
	BOAT CombinedTransportType = "BOAT"
	RAIL CombinedTransportType = "RAIL"
)

// All allowed values of CombinedTransportType enum
var AllowedCombinedTransportTypeEnumValues = []CombinedTransportType{
	"BOAT",
	"RAIL",
}

func (v *CombinedTransportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CombinedTransportType(value)
	for _, existing := range AllowedCombinedTransportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CombinedTransportType", value)
}

// NewCombinedTransportTypeFromValue returns a pointer to a valid CombinedTransportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCombinedTransportTypeFromValue(v string) (*CombinedTransportType, error) {
	ev := CombinedTransportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CombinedTransportType: valid values are %v", v, AllowedCombinedTransportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CombinedTransportType) IsValid() bool {
	for _, existing := range AllowedCombinedTransportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CombinedTransportType value
func (v CombinedTransportType) Ptr() *CombinedTransportType {
	return &v
}

type NullableCombinedTransportType struct {
	value *CombinedTransportType
	isSet bool
}

func (v NullableCombinedTransportType) Get() *CombinedTransportType {
	return v.value
}

func (v *NullableCombinedTransportType) Set(val *CombinedTransportType) {
	v.value = val
	v.isSet = true
}

func (v NullableCombinedTransportType) IsSet() bool {
	return v.isSet
}

func (v *NullableCombinedTransportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombinedTransportType(val *CombinedTransportType) *NullableCombinedTransportType {
	return &NullableCombinedTransportType{value: val, isSet: true}
}

func (v NullableCombinedTransportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombinedTransportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

