/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CurrentType The type of the electric current, direct or alternating. 
type CurrentType string

// List of CurrentType
const (
	DIRECT CurrentType = "DIRECT"
	ALTERNATING CurrentType = "ALTERNATING"
)

// All allowed values of CurrentType enum
var AllowedCurrentTypeEnumValues = []CurrentType{
	"DIRECT",
	"ALTERNATING",
}

func (v *CurrentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CurrentType(value)
	for _, existing := range AllowedCurrentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CurrentType", value)
}

// NewCurrentTypeFromValue returns a pointer to a valid CurrentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrentTypeFromValue(v string) (*CurrentType, error) {
	ev := CurrentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CurrentType: valid values are %v", v, AllowedCurrentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CurrentType) IsValid() bool {
	for _, existing := range AllowedCurrentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CurrentType value
func (v CurrentType) Ptr() *CurrentType {
	return &v
}

type NullableCurrentType struct {
	value *CurrentType
	isSet bool
}

func (v NullableCurrentType) Get() *CurrentType {
	return v.value
}

func (v *NullableCurrentType) Set(val *CurrentType) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrentType) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrentType(val *CurrentType) *NullableCurrentType {
	return &NullableCurrentType{value: val, isSet: true}
}

func (v NullableCurrentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

