/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeliveryOnlyEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeliveryOnlyEvent{}

// DeliveryOnlyEvent Issued when the route passes roads which are prohibited except for delivery vehicles such as factory premises or pedestrian zones.  Requires _DELIVERY_ONLY_EVENTS_ to be requested.
type DeliveryOnlyEvent struct {
	AccessType AccessType `json:"accessType"`
	// For **accessType** _ENTER_ this index points to the corresponding event with **accessType** _EXIT_ and vice-versa. Not present otherwise.
	RelatedEventIndex *int32 `json:"relatedEventIndex,omitempty"`
	// The polyline of the delivery-only event in the format specified by **options[polylineFormat]**. Only present for **accessType** _ENTER_. Requires _DELIVERY_ONLY_EVENTS_POLYLINE_ to be requested.
	Polyline *string `json:"polyline,omitempty"`
}

type _DeliveryOnlyEvent DeliveryOnlyEvent

// NewDeliveryOnlyEvent instantiates a new DeliveryOnlyEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeliveryOnlyEvent(accessType AccessType) *DeliveryOnlyEvent {
	this := DeliveryOnlyEvent{}
	this.AccessType = accessType
	return &this
}

// NewDeliveryOnlyEventWithDefaults instantiates a new DeliveryOnlyEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeliveryOnlyEventWithDefaults() *DeliveryOnlyEvent {
	this := DeliveryOnlyEvent{}
	return &this
}

// GetAccessType returns the AccessType field value
func (o *DeliveryOnlyEvent) GetAccessType() AccessType {
	if o == nil {
		var ret AccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *DeliveryOnlyEvent) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *DeliveryOnlyEvent) SetAccessType(v AccessType) {
	o.AccessType = v
}

// GetRelatedEventIndex returns the RelatedEventIndex field value if set, zero value otherwise.
func (o *DeliveryOnlyEvent) GetRelatedEventIndex() int32 {
	if o == nil || IsNil(o.RelatedEventIndex) {
		var ret int32
		return ret
	}
	return *o.RelatedEventIndex
}

// GetRelatedEventIndexOk returns a tuple with the RelatedEventIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryOnlyEvent) GetRelatedEventIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.RelatedEventIndex) {
		return nil, false
	}
	return o.RelatedEventIndex, true
}

// HasRelatedEventIndex returns a boolean if a field has been set.
func (o *DeliveryOnlyEvent) HasRelatedEventIndex() bool {
	if o != nil && !IsNil(o.RelatedEventIndex) {
		return true
	}

	return false
}

// SetRelatedEventIndex gets a reference to the given int32 and assigns it to the RelatedEventIndex field.
func (o *DeliveryOnlyEvent) SetRelatedEventIndex(v int32) {
	o.RelatedEventIndex = &v
}

// GetPolyline returns the Polyline field value if set, zero value otherwise.
func (o *DeliveryOnlyEvent) GetPolyline() string {
	if o == nil || IsNil(o.Polyline) {
		var ret string
		return ret
	}
	return *o.Polyline
}

// GetPolylineOk returns a tuple with the Polyline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeliveryOnlyEvent) GetPolylineOk() (*string, bool) {
	if o == nil || IsNil(o.Polyline) {
		return nil, false
	}
	return o.Polyline, true
}

// HasPolyline returns a boolean if a field has been set.
func (o *DeliveryOnlyEvent) HasPolyline() bool {
	if o != nil && !IsNil(o.Polyline) {
		return true
	}

	return false
}

// SetPolyline gets a reference to the given string and assigns it to the Polyline field.
func (o *DeliveryOnlyEvent) SetPolyline(v string) {
	o.Polyline = &v
}

func (o DeliveryOnlyEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeliveryOnlyEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessType"] = o.AccessType
	if !IsNil(o.RelatedEventIndex) {
		toSerialize["relatedEventIndex"] = o.RelatedEventIndex
	}
	if !IsNil(o.Polyline) {
		toSerialize["polyline"] = o.Polyline
	}
	return toSerialize, nil
}

func (o *DeliveryOnlyEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeliveryOnlyEvent := _DeliveryOnlyEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeliveryOnlyEvent)

	if err != nil {
		return err
	}

	*o = DeliveryOnlyEvent(varDeliveryOnlyEvent)

	return err
}

type NullableDeliveryOnlyEvent struct {
	value *DeliveryOnlyEvent
	isSet bool
}

func (v NullableDeliveryOnlyEvent) Get() *DeliveryOnlyEvent {
	return v.value
}

func (v *NullableDeliveryOnlyEvent) Set(val *DeliveryOnlyEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableDeliveryOnlyEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableDeliveryOnlyEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeliveryOnlyEvent(val *DeliveryOnlyEvent) *NullableDeliveryOnlyEvent {
	return &NullableDeliveryOnlyEvent{value: val, isSet: true}
}

func (v NullableDeliveryOnlyEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeliveryOnlyEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


