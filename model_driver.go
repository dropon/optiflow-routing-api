/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Driver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Driver{}

// Driver struct for Driver
type Driver struct {
	WorkingHoursPreset WorkingHoursPreset `json:"workingHoursPreset"`
}

type _Driver Driver

// NewDriver instantiates a new Driver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriver(workingHoursPreset WorkingHoursPreset) *Driver {
	this := Driver{}
	this.WorkingHoursPreset = workingHoursPreset
	return &this
}

// NewDriverWithDefaults instantiates a new Driver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriverWithDefaults() *Driver {
	this := Driver{}
	return &this
}

// GetWorkingHoursPreset returns the WorkingHoursPreset field value
func (o *Driver) GetWorkingHoursPreset() WorkingHoursPreset {
	if o == nil {
		var ret WorkingHoursPreset
		return ret
	}

	return o.WorkingHoursPreset
}

// GetWorkingHoursPresetOk returns a tuple with the WorkingHoursPreset field value
// and a boolean to check if the value has been set.
func (o *Driver) GetWorkingHoursPresetOk() (*WorkingHoursPreset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkingHoursPreset, true
}

// SetWorkingHoursPreset sets field value
func (o *Driver) SetWorkingHoursPreset(v WorkingHoursPreset) {
	o.WorkingHoursPreset = v
}

func (o Driver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Driver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workingHoursPreset"] = o.WorkingHoursPreset
	return toSerialize, nil
}

func (o *Driver) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workingHoursPreset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriver := _Driver{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDriver)

	if err != nil {
		return err
	}

	*o = Driver(varDriver)

	return err
}

type NullableDriver struct {
	value *Driver
	isSet bool
}

func (v NullableDriver) Get() *Driver {
	return v.value
}

func (v *NullableDriver) Set(val *Driver) {
	v.value = val
	v.isSet = true
}

func (v NullableDriver) IsSet() bool {
	return v.isSet
}

func (v *NullableDriver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriver(val *Driver) *NullableDriver {
	return &NullableDriver{value: val, isSet: true}
}

func (v NullableDriver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


