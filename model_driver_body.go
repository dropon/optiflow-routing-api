/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DriverBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DriverBody{}

// DriverBody struct for DriverBody
type DriverBody struct {
	WorkingHoursPreset WorkingHoursPreset `json:"workingHoursPreset"`
	WorkLogbook *WorkLogbook `json:"workLogbook,omitempty"`
	// If true, the time on a combined transport, e.g. on a ferry, can be used for recreation.  That means that a break or a rest can be scheduled when traveling on a ferry or by rail.
	UseTimeOnCombinedTransportForRecreation *bool `json:"useTimeOnCombinedTransportForRecreation,omitempty"`
}

type _DriverBody DriverBody

// NewDriverBody instantiates a new DriverBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriverBody(workingHoursPreset WorkingHoursPreset) *DriverBody {
	this := DriverBody{}
	this.WorkingHoursPreset = workingHoursPreset
	var useTimeOnCombinedTransportForRecreation bool = false
	this.UseTimeOnCombinedTransportForRecreation = &useTimeOnCombinedTransportForRecreation
	return &this
}

// NewDriverBodyWithDefaults instantiates a new DriverBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriverBodyWithDefaults() *DriverBody {
	this := DriverBody{}
	var useTimeOnCombinedTransportForRecreation bool = false
	this.UseTimeOnCombinedTransportForRecreation = &useTimeOnCombinedTransportForRecreation
	return &this
}

// GetWorkingHoursPreset returns the WorkingHoursPreset field value
func (o *DriverBody) GetWorkingHoursPreset() WorkingHoursPreset {
	if o == nil {
		var ret WorkingHoursPreset
		return ret
	}

	return o.WorkingHoursPreset
}

// GetWorkingHoursPresetOk returns a tuple with the WorkingHoursPreset field value
// and a boolean to check if the value has been set.
func (o *DriverBody) GetWorkingHoursPresetOk() (*WorkingHoursPreset, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkingHoursPreset, true
}

// SetWorkingHoursPreset sets field value
func (o *DriverBody) SetWorkingHoursPreset(v WorkingHoursPreset) {
	o.WorkingHoursPreset = v
}

// GetWorkLogbook returns the WorkLogbook field value if set, zero value otherwise.
func (o *DriverBody) GetWorkLogbook() WorkLogbook {
	if o == nil || IsNil(o.WorkLogbook) {
		var ret WorkLogbook
		return ret
	}
	return *o.WorkLogbook
}

// GetWorkLogbookOk returns a tuple with the WorkLogbook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverBody) GetWorkLogbookOk() (*WorkLogbook, bool) {
	if o == nil || IsNil(o.WorkLogbook) {
		return nil, false
	}
	return o.WorkLogbook, true
}

// HasWorkLogbook returns a boolean if a field has been set.
func (o *DriverBody) HasWorkLogbook() bool {
	if o != nil && !IsNil(o.WorkLogbook) {
		return true
	}

	return false
}

// SetWorkLogbook gets a reference to the given WorkLogbook and assigns it to the WorkLogbook field.
func (o *DriverBody) SetWorkLogbook(v WorkLogbook) {
	o.WorkLogbook = &v
}

// GetUseTimeOnCombinedTransportForRecreation returns the UseTimeOnCombinedTransportForRecreation field value if set, zero value otherwise.
func (o *DriverBody) GetUseTimeOnCombinedTransportForRecreation() bool {
	if o == nil || IsNil(o.UseTimeOnCombinedTransportForRecreation) {
		var ret bool
		return ret
	}
	return *o.UseTimeOnCombinedTransportForRecreation
}

// GetUseTimeOnCombinedTransportForRecreationOk returns a tuple with the UseTimeOnCombinedTransportForRecreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DriverBody) GetUseTimeOnCombinedTransportForRecreationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseTimeOnCombinedTransportForRecreation) {
		return nil, false
	}
	return o.UseTimeOnCombinedTransportForRecreation, true
}

// HasUseTimeOnCombinedTransportForRecreation returns a boolean if a field has been set.
func (o *DriverBody) HasUseTimeOnCombinedTransportForRecreation() bool {
	if o != nil && !IsNil(o.UseTimeOnCombinedTransportForRecreation) {
		return true
	}

	return false
}

// SetUseTimeOnCombinedTransportForRecreation gets a reference to the given bool and assigns it to the UseTimeOnCombinedTransportForRecreation field.
func (o *DriverBody) SetUseTimeOnCombinedTransportForRecreation(v bool) {
	o.UseTimeOnCombinedTransportForRecreation = &v
}

func (o DriverBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DriverBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workingHoursPreset"] = o.WorkingHoursPreset
	if !IsNil(o.WorkLogbook) {
		toSerialize["workLogbook"] = o.WorkLogbook
	}
	if !IsNil(o.UseTimeOnCombinedTransportForRecreation) {
		toSerialize["useTimeOnCombinedTransportForRecreation"] = o.UseTimeOnCombinedTransportForRecreation
	}
	return toSerialize, nil
}

func (o *DriverBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workingHoursPreset",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriverBody := _DriverBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDriverBody)

	if err != nil {
		return err
	}

	*o = DriverBody(varDriverBody)

	return err
}

type NullableDriverBody struct {
	value *DriverBody
	isSet bool
}

func (v NullableDriverBody) Get() *DriverBody {
	return v.value
}

func (v *NullableDriverBody) Set(val *DriverBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDriverBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDriverBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriverBody(val *DriverBody) *NullableDriverBody {
	return &NullableDriverBody{value: val, isSet: true}
}

func (v NullableDriverBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriverBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


