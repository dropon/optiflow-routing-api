/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ElectricityPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElectricityPrice{}

// ElectricityPrice The electricity price payable for charging the battery.
type ElectricityPrice struct {
	// The electricity price in the specified currency.
	Price float64 `json:"price"`
	// The currency code according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency string `json:"currency"`
}

type _ElectricityPrice ElectricityPrice

// NewElectricityPrice instantiates a new ElectricityPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElectricityPrice(price float64, currency string) *ElectricityPrice {
	this := ElectricityPrice{}
	this.Price = price
	this.Currency = currency
	return &this
}

// NewElectricityPriceWithDefaults instantiates a new ElectricityPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElectricityPriceWithDefaults() *ElectricityPrice {
	this := ElectricityPrice{}
	return &this
}

// GetPrice returns the Price field value
func (o *ElectricityPrice) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *ElectricityPrice) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *ElectricityPrice) SetPrice(v float64) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *ElectricityPrice) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ElectricityPrice) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ElectricityPrice) SetCurrency(v string) {
	o.Currency = v
}

func (o ElectricityPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElectricityPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	return toSerialize, nil
}

func (o *ElectricityPrice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varElectricityPrice := _ElectricityPrice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varElectricityPrice)

	if err != nil {
		return err
	}

	*o = ElectricityPrice(varElectricityPrice)

	return err
}

type NullableElectricityPrice struct {
	value *ElectricityPrice
	isSet bool
}

func (v NullableElectricityPrice) Get() *ElectricityPrice {
	return v.value
}

func (v *NullableElectricityPrice) Set(val *ElectricityPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableElectricityPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableElectricityPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElectricityPrice(val *ElectricityPrice) *NullableElectricityPrice {
	return &NullableElectricityPrice{value: val, isSet: true}
}

func (v NullableElectricityPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElectricityPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


