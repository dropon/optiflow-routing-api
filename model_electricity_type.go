/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// ElectricityType The electricity type of the vehicle.  Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for `emissions`. 
type ElectricityType string

// List of ElectricityType
const (
	BATTERY ElectricityType = "BATTERY"
	HYDROGEN_FUEL_CELL ElectricityType = "HYDROGEN_FUEL_CELL"
	NONE ElectricityType = "NONE"
)

// All allowed values of ElectricityType enum
var AllowedElectricityTypeEnumValues = []ElectricityType{
	"BATTERY",
	"HYDROGEN_FUEL_CELL",
	"NONE",
}

func (v *ElectricityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ElectricityType(value)
	for _, existing := range AllowedElectricityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ElectricityType", value)
}

// NewElectricityTypeFromValue returns a pointer to a valid ElectricityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewElectricityTypeFromValue(v string) (*ElectricityType, error) {
	ev := ElectricityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ElectricityType: valid values are %v", v, AllowedElectricityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ElectricityType) IsValid() bool {
	for _, existing := range AllowedElectricityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ElectricityType value
func (v ElectricityType) Ptr() *ElectricityType {
	return &v
}

type NullableElectricityType struct {
	value *ElectricityType
	isSet bool
}

func (v NullableElectricityType) Get() *ElectricityType {
	return v.value
}

func (v *NullableElectricityType) Set(val *ElectricityType) {
	v.value = val
	v.isSet = true
}

func (v NullableElectricityType) IsSet() bool {
	return v.isSet
}

func (v *NullableElectricityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElectricityType(val *ElectricityType) *NullableElectricityType {
	return &NullableElectricityType{value: val, isSet: true}
}

func (v NullableElectricityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElectricityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

