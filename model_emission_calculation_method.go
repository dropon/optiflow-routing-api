/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EmissionCalculationMethod the model 'EmissionCalculationMethod'
type EmissionCalculationMethod string

// List of EmissionCalculationMethod
const (
	EN16258_2012 EmissionCalculationMethod = "EN16258_2012"
	ISO14083_2023 EmissionCalculationMethod = "ISO14083_2023"
	FRENCH_CO2E_DECREE_2017_639 EmissionCalculationMethod = "FRENCH_CO2E_DECREE_2017_639"
)

// All allowed values of EmissionCalculationMethod enum
var AllowedEmissionCalculationMethodEnumValues = []EmissionCalculationMethod{
	"EN16258_2012",
	"ISO14083_2023",
	"FRENCH_CO2E_DECREE_2017_639",
}

func (v *EmissionCalculationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmissionCalculationMethod(value)
	for _, existing := range AllowedEmissionCalculationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmissionCalculationMethod", value)
}

// NewEmissionCalculationMethodFromValue returns a pointer to a valid EmissionCalculationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmissionCalculationMethodFromValue(v string) (*EmissionCalculationMethod, error) {
	ev := EmissionCalculationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmissionCalculationMethod: valid values are %v", v, AllowedEmissionCalculationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmissionCalculationMethod) IsValid() bool {
	for _, existing := range AllowedEmissionCalculationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmissionCalculationMethod value
func (v EmissionCalculationMethod) Ptr() *EmissionCalculationMethod {
	return &v
}

type NullableEmissionCalculationMethod struct {
	value *EmissionCalculationMethod
	isSet bool
}

func (v NullableEmissionCalculationMethod) Get() *EmissionCalculationMethod {
	return v.value
}

func (v *NullableEmissionCalculationMethod) Set(val *EmissionCalculationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionCalculationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionCalculationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionCalculationMethod(val *EmissionCalculationMethod) *NullableEmissionCalculationMethod {
	return &NullableEmissionCalculationMethod{value: val, isSet: true}
}

func (v NullableEmissionCalculationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionCalculationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

