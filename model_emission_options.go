/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmissionOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmissionOptions{}

// EmissionOptions struct for EmissionOptions
type EmissionOptions struct {
	// Comma-separated list of the calculation method to be returned.  Available values are provided by type `EmissionCalculationMethod`:  * `EN16258_2012`     Emissions according to EN16258 from 2012 (a.k.a. CEN).  * `ISO14083_2023`     Emissions according to ISO 14083:2023 (a.k.a. ISO).      Only supported for [European and American profiles](../data-api/concepts/profiles).     If **defaultConsumption** is true, only supported for [European profiles](../data-api/concepts/profiles).  * `FRENCH_CO2E_DECREE_2017_639`     Emissions according to the French CO2E decree from 2017.
	CalculationMethods string `json:"calculationMethods"`
	// If true, the fuel or electricity consumption is automatically calculated through HBEFA 4.2.  Otherwise, the **averageFuelConsumption** or **averageElectricityConsumption** specified calculating the route represented by **routeId** will be considered. Will be ignored for calculation method _FRENCH_CO2E_DECREE_2017_639_.
	DefaultConsumption *bool `json:"defaultConsumption,omitempty"`
	Iso14083EmissionFactorsVersion *Iso14083EmissionFactorsVersion `json:"iso14083EmissionFactorsVersion,omitempty"`
}

type _EmissionOptions EmissionOptions

// NewEmissionOptions instantiates a new EmissionOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmissionOptions(calculationMethods string) *EmissionOptions {
	this := EmissionOptions{}
	this.CalculationMethods = calculationMethods
	var defaultConsumption bool = false
	this.DefaultConsumption = &defaultConsumption
	var iso14083EmissionFactorsVersion Iso14083EmissionFactorsVersion = INITIAL
	this.Iso14083EmissionFactorsVersion = &iso14083EmissionFactorsVersion
	return &this
}

// NewEmissionOptionsWithDefaults instantiates a new EmissionOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmissionOptionsWithDefaults() *EmissionOptions {
	this := EmissionOptions{}
	var defaultConsumption bool = false
	this.DefaultConsumption = &defaultConsumption
	var iso14083EmissionFactorsVersion Iso14083EmissionFactorsVersion = INITIAL
	this.Iso14083EmissionFactorsVersion = &iso14083EmissionFactorsVersion
	return &this
}

// GetCalculationMethods returns the CalculationMethods field value
func (o *EmissionOptions) GetCalculationMethods() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CalculationMethods
}

// GetCalculationMethodsOk returns a tuple with the CalculationMethods field value
// and a boolean to check if the value has been set.
func (o *EmissionOptions) GetCalculationMethodsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CalculationMethods, true
}

// SetCalculationMethods sets field value
func (o *EmissionOptions) SetCalculationMethods(v string) {
	o.CalculationMethods = v
}

// GetDefaultConsumption returns the DefaultConsumption field value if set, zero value otherwise.
func (o *EmissionOptions) GetDefaultConsumption() bool {
	if o == nil || IsNil(o.DefaultConsumption) {
		var ret bool
		return ret
	}
	return *o.DefaultConsumption
}

// GetDefaultConsumptionOk returns a tuple with the DefaultConsumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionOptions) GetDefaultConsumptionOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultConsumption) {
		return nil, false
	}
	return o.DefaultConsumption, true
}

// HasDefaultConsumption returns a boolean if a field has been set.
func (o *EmissionOptions) HasDefaultConsumption() bool {
	if o != nil && !IsNil(o.DefaultConsumption) {
		return true
	}

	return false
}

// SetDefaultConsumption gets a reference to the given bool and assigns it to the DefaultConsumption field.
func (o *EmissionOptions) SetDefaultConsumption(v bool) {
	o.DefaultConsumption = &v
}

// GetIso14083EmissionFactorsVersion returns the Iso14083EmissionFactorsVersion field value if set, zero value otherwise.
func (o *EmissionOptions) GetIso14083EmissionFactorsVersion() Iso14083EmissionFactorsVersion {
	if o == nil || IsNil(o.Iso14083EmissionFactorsVersion) {
		var ret Iso14083EmissionFactorsVersion
		return ret
	}
	return *o.Iso14083EmissionFactorsVersion
}

// GetIso14083EmissionFactorsVersionOk returns a tuple with the Iso14083EmissionFactorsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionOptions) GetIso14083EmissionFactorsVersionOk() (*Iso14083EmissionFactorsVersion, bool) {
	if o == nil || IsNil(o.Iso14083EmissionFactorsVersion) {
		return nil, false
	}
	return o.Iso14083EmissionFactorsVersion, true
}

// HasIso14083EmissionFactorsVersion returns a boolean if a field has been set.
func (o *EmissionOptions) HasIso14083EmissionFactorsVersion() bool {
	if o != nil && !IsNil(o.Iso14083EmissionFactorsVersion) {
		return true
	}

	return false
}

// SetIso14083EmissionFactorsVersion gets a reference to the given Iso14083EmissionFactorsVersion and assigns it to the Iso14083EmissionFactorsVersion field.
func (o *EmissionOptions) SetIso14083EmissionFactorsVersion(v Iso14083EmissionFactorsVersion) {
	o.Iso14083EmissionFactorsVersion = &v
}

func (o EmissionOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmissionOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["calculationMethods"] = o.CalculationMethods
	if !IsNil(o.DefaultConsumption) {
		toSerialize["defaultConsumption"] = o.DefaultConsumption
	}
	if !IsNil(o.Iso14083EmissionFactorsVersion) {
		toSerialize["iso14083EmissionFactorsVersion"] = o.Iso14083EmissionFactorsVersion
	}
	return toSerialize, nil
}

func (o *EmissionOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"calculationMethods",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmissionOptions := _EmissionOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmissionOptions)

	if err != nil {
		return err
	}

	*o = EmissionOptions(varEmissionOptions)

	return err
}

type NullableEmissionOptions struct {
	value *EmissionOptions
	isSet bool
}

func (v NullableEmissionOptions) Get() *EmissionOptions {
	return v.value
}

func (v *NullableEmissionOptions) Set(val *EmissionOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionOptions(val *EmissionOptions) *NullableEmissionOptions {
	return &NullableEmissionOptions{value: val, isSet: true}
}

func (v NullableEmissionOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


