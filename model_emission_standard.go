/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EmissionStandard The emission standard of the vehicle valid in the European Union. This parameter is not only important for proper toll and emission calculation,  there are also low-emission zones which can be entered only if the vehicle has a proper emission standard. In contrast to explicit approvals like environmental badges or vehicle registrations the emission standard is automatically considered when entering such low-emission zones.  Values different from _NONE_ are supported for **engineType** _COMBUSTION_ and _HYBRID_. Relevant for `routing`, `toll`, `emissions`. 
type EmissionStandard string

// List of EmissionStandard
const (
	NONE EmissionStandard = "NONE"
	EURO_0 EmissionStandard = "EURO_0"
	EURO_1 EmissionStandard = "EURO_1"
	EURO_2 EmissionStandard = "EURO_2"
	EURO_3 EmissionStandard = "EURO_3"
	EURO_4 EmissionStandard = "EURO_4"
	EURO_5 EmissionStandard = "EURO_5"
	EURO_EEV EmissionStandard = "EURO_EEV"
	EURO_6 EmissionStandard = "EURO_6"
	EURO_6C EmissionStandard = "EURO_6C"
	EURO_6D_TEMP EmissionStandard = "EURO_6D_TEMP"
	EURO_6D EmissionStandard = "EURO_6D"
	EURO_6E EmissionStandard = "EURO_6E"
	EURO_7 EmissionStandard = "EURO_7"
)

// All allowed values of EmissionStandard enum
var AllowedEmissionStandardEnumValues = []EmissionStandard{
	"NONE",
	"EURO_0",
	"EURO_1",
	"EURO_2",
	"EURO_3",
	"EURO_4",
	"EURO_5",
	"EURO_EEV",
	"EURO_6",
	"EURO_6C",
	"EURO_6D_TEMP",
	"EURO_6D",
	"EURO_6E",
	"EURO_7",
}

func (v *EmissionStandard) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmissionStandard(value)
	for _, existing := range AllowedEmissionStandardEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmissionStandard", value)
}

// NewEmissionStandardFromValue returns a pointer to a valid EmissionStandard
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmissionStandardFromValue(v string) (*EmissionStandard, error) {
	ev := EmissionStandard(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmissionStandard: valid values are %v", v, AllowedEmissionStandardEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmissionStandard) IsValid() bool {
	for _, existing := range AllowedEmissionStandardEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmissionStandard value
func (v EmissionStandard) Ptr() *EmissionStandard {
	return &v
}

type NullableEmissionStandard struct {
	value *EmissionStandard
	isSet bool
}

func (v NullableEmissionStandard) Get() *EmissionStandard {
	return v.value
}

func (v *NullableEmissionStandard) Set(val *EmissionStandard) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionStandard) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionStandard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionStandard(val *EmissionStandard) *NullableEmissionStandard {
	return &NullableEmissionStandard{value: val, isSet: true}
}

func (v NullableEmissionStandard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionStandard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

