/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmissionsFrenchCO2eDecree2017639 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmissionsFrenchCO2eDecree2017639{}

// EmissionsFrenchCO2eDecree2017639 Emissions according to the French CO2E decree from 2017.
type EmissionsFrenchCO2eDecree2017639 struct {
	// The amount of emitted CO2e from well to wheel [kg].
	Co2eWellToWheel float64 `json:"co2eWellToWheel"`
	// The amount of emitted CO2e from tank to wheel [kg].
	Co2eTankToWheel float64 `json:"co2eTankToWheel"`
}

type _EmissionsFrenchCO2eDecree2017639 EmissionsFrenchCO2eDecree2017639

// NewEmissionsFrenchCO2eDecree2017639 instantiates a new EmissionsFrenchCO2eDecree2017639 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmissionsFrenchCO2eDecree2017639(co2eWellToWheel float64, co2eTankToWheel float64) *EmissionsFrenchCO2eDecree2017639 {
	this := EmissionsFrenchCO2eDecree2017639{}
	this.Co2eWellToWheel = co2eWellToWheel
	this.Co2eTankToWheel = co2eTankToWheel
	return &this
}

// NewEmissionsFrenchCO2eDecree2017639WithDefaults instantiates a new EmissionsFrenchCO2eDecree2017639 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmissionsFrenchCO2eDecree2017639WithDefaults() *EmissionsFrenchCO2eDecree2017639 {
	this := EmissionsFrenchCO2eDecree2017639{}
	return &this
}

// GetCo2eWellToWheel returns the Co2eWellToWheel field value
func (o *EmissionsFrenchCO2eDecree2017639) GetCo2eWellToWheel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Co2eWellToWheel
}

// GetCo2eWellToWheelOk returns a tuple with the Co2eWellToWheel field value
// and a boolean to check if the value has been set.
func (o *EmissionsFrenchCO2eDecree2017639) GetCo2eWellToWheelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Co2eWellToWheel, true
}

// SetCo2eWellToWheel sets field value
func (o *EmissionsFrenchCO2eDecree2017639) SetCo2eWellToWheel(v float64) {
	o.Co2eWellToWheel = v
}

// GetCo2eTankToWheel returns the Co2eTankToWheel field value
func (o *EmissionsFrenchCO2eDecree2017639) GetCo2eTankToWheel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Co2eTankToWheel
}

// GetCo2eTankToWheelOk returns a tuple with the Co2eTankToWheel field value
// and a boolean to check if the value has been set.
func (o *EmissionsFrenchCO2eDecree2017639) GetCo2eTankToWheelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Co2eTankToWheel, true
}

// SetCo2eTankToWheel sets field value
func (o *EmissionsFrenchCO2eDecree2017639) SetCo2eTankToWheel(v float64) {
	o.Co2eTankToWheel = v
}

func (o EmissionsFrenchCO2eDecree2017639) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmissionsFrenchCO2eDecree2017639) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["co2eWellToWheel"] = o.Co2eWellToWheel
	toSerialize["co2eTankToWheel"] = o.Co2eTankToWheel
	return toSerialize, nil
}

func (o *EmissionsFrenchCO2eDecree2017639) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"co2eWellToWheel",
		"co2eTankToWheel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmissionsFrenchCO2eDecree2017639 := _EmissionsFrenchCO2eDecree2017639{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmissionsFrenchCO2eDecree2017639)

	if err != nil {
		return err
	}

	*o = EmissionsFrenchCO2eDecree2017639(varEmissionsFrenchCO2eDecree2017639)

	return err
}

type NullableEmissionsFrenchCO2eDecree2017639 struct {
	value *EmissionsFrenchCO2eDecree2017639
	isSet bool
}

func (v NullableEmissionsFrenchCO2eDecree2017639) Get() *EmissionsFrenchCO2eDecree2017639 {
	return v.value
}

func (v *NullableEmissionsFrenchCO2eDecree2017639) Set(val *EmissionsFrenchCO2eDecree2017639) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionsFrenchCO2eDecree2017639) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionsFrenchCO2eDecree2017639) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionsFrenchCO2eDecree2017639(val *EmissionsFrenchCO2eDecree2017639) *NullableEmissionsFrenchCO2eDecree2017639 {
	return &NullableEmissionsFrenchCO2eDecree2017639{value: val, isSet: true}
}

func (v NullableEmissionsFrenchCO2eDecree2017639) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionsFrenchCO2eDecree2017639) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


