/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmissionsISO140832022 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmissionsISO140832022{}

// EmissionsISO140832022 Emissions according to the draft version of ISO 14083:2023.
type EmissionsISO140832022 struct {
	// The total conventional fuel consumption [kg].
	FuelConsumption float64 `json:"fuelConsumption"`
	// The total electric power consumption of the vehicle if the **engineType** is _ELECTRIC_ or _HYBRID_ [kWh].
	ElectricityConsumption float64 `json:"electricityConsumption"`
	// The amount of emitted CO2e from tank to wheel [kg].
	Co2eTankToWheel float64 `json:"co2eTankToWheel"`
	// The amount of emitted CO2e from well to wheel [kg].
	Co2eWellToWheel float64 `json:"co2eWellToWheel"`
	// The tank-to-wheel energy use [MJ].
	EnergyUseTankToWheel float64 `json:"energyUseTankToWheel"`
	// The well-to-wheel energy use [MJ].
	EnergyUseWellToWheel float64 `json:"energyUseWellToWheel"`
}

type _EmissionsISO140832022 EmissionsISO140832022

// NewEmissionsISO140832022 instantiates a new EmissionsISO140832022 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmissionsISO140832022(fuelConsumption float64, electricityConsumption float64, co2eTankToWheel float64, co2eWellToWheel float64, energyUseTankToWheel float64, energyUseWellToWheel float64) *EmissionsISO140832022 {
	this := EmissionsISO140832022{}
	this.FuelConsumption = fuelConsumption
	this.ElectricityConsumption = electricityConsumption
	this.Co2eTankToWheel = co2eTankToWheel
	this.Co2eWellToWheel = co2eWellToWheel
	this.EnergyUseTankToWheel = energyUseTankToWheel
	this.EnergyUseWellToWheel = energyUseWellToWheel
	return &this
}

// NewEmissionsISO140832022WithDefaults instantiates a new EmissionsISO140832022 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmissionsISO140832022WithDefaults() *EmissionsISO140832022 {
	this := EmissionsISO140832022{}
	return &this
}

// GetFuelConsumption returns the FuelConsumption field value
func (o *EmissionsISO140832022) GetFuelConsumption() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.FuelConsumption
}

// GetFuelConsumptionOk returns a tuple with the FuelConsumption field value
// and a boolean to check if the value has been set.
func (o *EmissionsISO140832022) GetFuelConsumptionOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FuelConsumption, true
}

// SetFuelConsumption sets field value
func (o *EmissionsISO140832022) SetFuelConsumption(v float64) {
	o.FuelConsumption = v
}

// GetElectricityConsumption returns the ElectricityConsumption field value
func (o *EmissionsISO140832022) GetElectricityConsumption() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ElectricityConsumption
}

// GetElectricityConsumptionOk returns a tuple with the ElectricityConsumption field value
// and a boolean to check if the value has been set.
func (o *EmissionsISO140832022) GetElectricityConsumptionOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectricityConsumption, true
}

// SetElectricityConsumption sets field value
func (o *EmissionsISO140832022) SetElectricityConsumption(v float64) {
	o.ElectricityConsumption = v
}

// GetCo2eTankToWheel returns the Co2eTankToWheel field value
func (o *EmissionsISO140832022) GetCo2eTankToWheel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Co2eTankToWheel
}

// GetCo2eTankToWheelOk returns a tuple with the Co2eTankToWheel field value
// and a boolean to check if the value has been set.
func (o *EmissionsISO140832022) GetCo2eTankToWheelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Co2eTankToWheel, true
}

// SetCo2eTankToWheel sets field value
func (o *EmissionsISO140832022) SetCo2eTankToWheel(v float64) {
	o.Co2eTankToWheel = v
}

// GetCo2eWellToWheel returns the Co2eWellToWheel field value
func (o *EmissionsISO140832022) GetCo2eWellToWheel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Co2eWellToWheel
}

// GetCo2eWellToWheelOk returns a tuple with the Co2eWellToWheel field value
// and a boolean to check if the value has been set.
func (o *EmissionsISO140832022) GetCo2eWellToWheelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Co2eWellToWheel, true
}

// SetCo2eWellToWheel sets field value
func (o *EmissionsISO140832022) SetCo2eWellToWheel(v float64) {
	o.Co2eWellToWheel = v
}

// GetEnergyUseTankToWheel returns the EnergyUseTankToWheel field value
func (o *EmissionsISO140832022) GetEnergyUseTankToWheel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.EnergyUseTankToWheel
}

// GetEnergyUseTankToWheelOk returns a tuple with the EnergyUseTankToWheel field value
// and a boolean to check if the value has been set.
func (o *EmissionsISO140832022) GetEnergyUseTankToWheelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnergyUseTankToWheel, true
}

// SetEnergyUseTankToWheel sets field value
func (o *EmissionsISO140832022) SetEnergyUseTankToWheel(v float64) {
	o.EnergyUseTankToWheel = v
}

// GetEnergyUseWellToWheel returns the EnergyUseWellToWheel field value
func (o *EmissionsISO140832022) GetEnergyUseWellToWheel() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.EnergyUseWellToWheel
}

// GetEnergyUseWellToWheelOk returns a tuple with the EnergyUseWellToWheel field value
// and a boolean to check if the value has been set.
func (o *EmissionsISO140832022) GetEnergyUseWellToWheelOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnergyUseWellToWheel, true
}

// SetEnergyUseWellToWheel sets field value
func (o *EmissionsISO140832022) SetEnergyUseWellToWheel(v float64) {
	o.EnergyUseWellToWheel = v
}

func (o EmissionsISO140832022) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmissionsISO140832022) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fuelConsumption"] = o.FuelConsumption
	toSerialize["electricityConsumption"] = o.ElectricityConsumption
	toSerialize["co2eTankToWheel"] = o.Co2eTankToWheel
	toSerialize["co2eWellToWheel"] = o.Co2eWellToWheel
	toSerialize["energyUseTankToWheel"] = o.EnergyUseTankToWheel
	toSerialize["energyUseWellToWheel"] = o.EnergyUseWellToWheel
	return toSerialize, nil
}

func (o *EmissionsISO140832022) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fuelConsumption",
		"electricityConsumption",
		"co2eTankToWheel",
		"co2eWellToWheel",
		"energyUseTankToWheel",
		"energyUseWellToWheel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmissionsISO140832022 := _EmissionsISO140832022{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmissionsISO140832022)

	if err != nil {
		return err
	}

	*o = EmissionsISO140832022(varEmissionsISO140832022)

	return err
}

type NullableEmissionsISO140832022 struct {
	value *EmissionsISO140832022
	isSet bool
}

func (v NullableEmissionsISO140832022) Get() *EmissionsISO140832022 {
	return v.value
}

func (v *NullableEmissionsISO140832022) Set(val *EmissionsISO140832022) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionsISO140832022) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionsISO140832022) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionsISO140832022(val *EmissionsISO140832022) *NullableEmissionsISO140832022 {
	return &NullableEmissionsISO140832022{value: val, isSet: true}
}

func (v NullableEmissionsISO140832022) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionsISO140832022) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


