/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EngineType The engine type of the vehicle. When changing the engine type further parameters must be specified to define a valid vehicle and to obtain proper results. For a hybrid or an electric vehicle **electricityType** and **averageElectricityConsumption** must be specified, for a hybrid vehicle additionally the **hybridRatio**.  This and all dependent parameters cannot be used with a model of an electric vehicle, because all applicable  parameters are automatically provided by the model. Please refer to the [concept](./concepts/model-based-ev-consumption-calculation) to see specifically which  parameters are not compatible and automatically set from the vehicle model.  Relevant for `toll`, `emissions`. 
type EngineType string

// List of EngineType
const (
	COMBUSTION EngineType = "COMBUSTION"
	ELECTRIC EngineType = "ELECTRIC"
	HYBRID EngineType = "HYBRID"
)

// All allowed values of EngineType enum
var AllowedEngineTypeEnumValues = []EngineType{
	"COMBUSTION",
	"ELECTRIC",
	"HYBRID",
}

func (v *EngineType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EngineType(value)
	for _, existing := range AllowedEngineTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EngineType", value)
}

// NewEngineTypeFromValue returns a pointer to a valid EngineType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEngineTypeFromValue(v string) (*EngineType, error) {
	ev := EngineType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EngineType: valid values are %v", v, AllowedEngineTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EngineType) IsValid() bool {
	for _, existing := range AllowedEngineTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EngineType value
func (v EngineType) Ptr() *EngineType {
	return &v
}

type NullableEngineType struct {
	value *EngineType
	isSet bool
}

func (v NullableEngineType) Get() *EngineType {
	return v.value
}

func (v *NullableEngineType) Set(val *EngineType) {
	v.value = val
	v.isSet = true
}

func (v NullableEngineType) IsSet() bool {
	return v.isSet
}

func (v *NullableEngineType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngineType(val *EngineType) *NullableEngineType {
	return &NullableEngineType{value: val, isSet: true}
}

func (v NullableEngineType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngineType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

