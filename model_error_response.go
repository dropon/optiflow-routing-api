/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorResponse{}

// ErrorResponse struct for ErrorResponse
type ErrorResponse struct {
	// A human readable message that describes the error.
	Description string `json:"description"`
	// A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **message**. * `GENERAL_UNAUTHENTICATED` - Invalid or missing authentication credentials.   * `message` - An additional error message.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **HTTP status code: 400** * `GENERAL_VALIDATION_ERROR` - The validation of the request failed. Details can be found in **causes**. * `GENERAL_PARSING_ERROR` - The JSON syntax is invalid. * `ROUTING_ERROR` - The calculation failed. Details can be found in **causes**.  **HTTP status code: 401** * `GENERAL_UNAUTHENTICATED` - Invalid or missing authentication credentials.   * `message` - An additional error message.  **HTTP status code: 403** * `GENERAL_FORBIDDEN` - Insufficient access rights. * `GENERAL_QUOTA_EXCEEDED` - The transaction limit is exceeded.   * `message` - An additional error message. * `ROUTING_RESTRICTION_EXCEEDED` - A product-specific restriction is exceeded.  **HTTP status code: 404** * `GENERAL_RESOURCE_NOT_FOUND` - A requested resource does not exist.   * `message` - An additional error message.  **HTTP status code: 429** * `GENERAL_RATE_LIMIT_EXCEEDED` - The rate limit is exceeded.  **HTTP status code: 500** * `GENERAL_INTERNAL_SERVER_ERROR` - The request could not be processed due to an internal error.   * `message` - An additional error message.   * `hint` - A hint how to solve the problem.  **HTTP status code: 503** * `GENERAL_SERVICE_UNAVAILABLE` - The service is temporarily unavailable.  **HTTP status code: 4xx-5xx** * `GENERAL_INTERNAL_GATEWAY_ERROR` - The request could not be processed due to an internal gateway error.   * `hint` - A hint how to solve the problem.
	ErrorCode string `json:"errorCode"`
	// A unique identifier of the corresponding trace forest. It can be used to trace errors by the support.
	TraceId string `json:"traceId"`
	// A unique identifier specific to this error instance. It can be used to trace errors by the support.
	ErrorId *string `json:"errorId,omitempty"`
	// A list of affected parameters and/or properties that caused this error.
	Causes []CausingError `json:"causes,omitempty"`
	// Additional properties specific to this error class.
	Details map[string]interface{} `json:"details,omitempty"`
}

type _ErrorResponse ErrorResponse

// NewErrorResponse instantiates a new ErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorResponse(description string, errorCode string, traceId string) *ErrorResponse {
	this := ErrorResponse{}
	this.Description = description
	this.ErrorCode = errorCode
	this.TraceId = traceId
	return &this
}

// NewErrorResponseWithDefaults instantiates a new ErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorResponseWithDefaults() *ErrorResponse {
	this := ErrorResponse{}
	return &this
}

// GetDescription returns the Description field value
func (o *ErrorResponse) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ErrorResponse) SetDescription(v string) {
	o.Description = v
}

// GetErrorCode returns the ErrorCode field value
func (o *ErrorResponse) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *ErrorResponse) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetTraceId returns the TraceId field value
func (o *ErrorResponse) GetTraceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetTraceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TraceId, true
}

// SetTraceId sets field value
func (o *ErrorResponse) SetTraceId(v string) {
	o.TraceId = v
}

// GetErrorId returns the ErrorId field value if set, zero value otherwise.
func (o *ErrorResponse) GetErrorId() string {
	if o == nil || IsNil(o.ErrorId) {
		var ret string
		return ret
	}
	return *o.ErrorId
}

// GetErrorIdOk returns a tuple with the ErrorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetErrorIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorId) {
		return nil, false
	}
	return o.ErrorId, true
}

// HasErrorId returns a boolean if a field has been set.
func (o *ErrorResponse) HasErrorId() bool {
	if o != nil && !IsNil(o.ErrorId) {
		return true
	}

	return false
}

// SetErrorId gets a reference to the given string and assigns it to the ErrorId field.
func (o *ErrorResponse) SetErrorId(v string) {
	o.ErrorId = &v
}

// GetCauses returns the Causes field value if set, zero value otherwise.
func (o *ErrorResponse) GetCauses() []CausingError {
	if o == nil || IsNil(o.Causes) {
		var ret []CausingError
		return ret
	}
	return o.Causes
}

// GetCausesOk returns a tuple with the Causes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetCausesOk() ([]CausingError, bool) {
	if o == nil || IsNil(o.Causes) {
		return nil, false
	}
	return o.Causes, true
}

// HasCauses returns a boolean if a field has been set.
func (o *ErrorResponse) HasCauses() bool {
	if o != nil && !IsNil(o.Causes) {
		return true
	}

	return false
}

// SetCauses gets a reference to the given []CausingError and assigns it to the Causes field.
func (o *ErrorResponse) SetCauses(v []CausingError) {
	o.Causes = v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *ErrorResponse) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorResponse) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *ErrorResponse) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *ErrorResponse) SetDetails(v map[string]interface{}) {
	o.Details = v
}

func (o ErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["errorCode"] = o.ErrorCode
	toSerialize["traceId"] = o.TraceId
	if !IsNil(o.ErrorId) {
		toSerialize["errorId"] = o.ErrorId
	}
	if !IsNil(o.Causes) {
		toSerialize["causes"] = o.Causes
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

func (o *ErrorResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"errorCode",
		"traceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorResponse := _ErrorResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varErrorResponse)

	if err != nil {
		return err
	}

	*o = ErrorResponse(varErrorResponse)

	return err
}

type NullableErrorResponse struct {
	value *ErrorResponse
	isSet bool
}

func (v NullableErrorResponse) Get() *ErrorResponse {
	return v.value
}

func (v *NullableErrorResponse) Set(val *ErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorResponse(val *ErrorResponse) *NullableErrorResponse {
	return &NullableErrorResponse{value: val, isSet: true}
}

func (v NullableErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


