/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EtaResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EtaResponse{}

// EtaResponse The response of an ETA calculation.
type EtaResponse struct {
	// The ETA and the remaining distance and travel time to the waypoints not yet reached by the route.
	RemainingWaypoints []RemainingWaypoint `json:"remainingWaypoints"`
	// If the route has been recalculated, this is the ID of the new route. That will happen when it is likely that the vehicle has left the route, so the vehicle position is too far away from the route, or when the estimated time of arrival at the last waypoint is delayed in a way that another route may result in arriving earlier.
	RouteId *string `json:"routeId,omitempty"`
	// A list of warnings concerning the validity of the result.
	Warnings []Warning `json:"warnings,omitempty"`
}

type _EtaResponse EtaResponse

// NewEtaResponse instantiates a new EtaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEtaResponse(remainingWaypoints []RemainingWaypoint) *EtaResponse {
	this := EtaResponse{}
	this.RemainingWaypoints = remainingWaypoints
	return &this
}

// NewEtaResponseWithDefaults instantiates a new EtaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEtaResponseWithDefaults() *EtaResponse {
	this := EtaResponse{}
	return &this
}

// GetRemainingWaypoints returns the RemainingWaypoints field value
func (o *EtaResponse) GetRemainingWaypoints() []RemainingWaypoint {
	if o == nil {
		var ret []RemainingWaypoint
		return ret
	}

	return o.RemainingWaypoints
}

// GetRemainingWaypointsOk returns a tuple with the RemainingWaypoints field value
// and a boolean to check if the value has been set.
func (o *EtaResponse) GetRemainingWaypointsOk() ([]RemainingWaypoint, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemainingWaypoints, true
}

// SetRemainingWaypoints sets field value
func (o *EtaResponse) SetRemainingWaypoints(v []RemainingWaypoint) {
	o.RemainingWaypoints = v
}

// GetRouteId returns the RouteId field value if set, zero value otherwise.
func (o *EtaResponse) GetRouteId() string {
	if o == nil || IsNil(o.RouteId) {
		var ret string
		return ret
	}
	return *o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtaResponse) GetRouteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RouteId) {
		return nil, false
	}
	return o.RouteId, true
}

// HasRouteId returns a boolean if a field has been set.
func (o *EtaResponse) HasRouteId() bool {
	if o != nil && !IsNil(o.RouteId) {
		return true
	}

	return false
}

// SetRouteId gets a reference to the given string and assigns it to the RouteId field.
func (o *EtaResponse) SetRouteId(v string) {
	o.RouteId = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *EtaResponse) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EtaResponse) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *EtaResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *EtaResponse) SetWarnings(v []Warning) {
	o.Warnings = v
}

func (o EtaResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EtaResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remainingWaypoints"] = o.RemainingWaypoints
	if !IsNil(o.RouteId) {
		toSerialize["routeId"] = o.RouteId
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *EtaResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remainingWaypoints",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEtaResponse := _EtaResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEtaResponse)

	if err != nil {
		return err
	}

	*o = EtaResponse(varEtaResponse)

	return err
}

type NullableEtaResponse struct {
	value *EtaResponse
	isSet bool
}

func (v NullableEtaResponse) Get() *EtaResponse {
	return v.value
}

func (v *NullableEtaResponse) Set(val *EtaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEtaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEtaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtaResponse(val *EtaResponse) *NullableEtaResponse {
	return &NullableEtaResponse{value: val, isSet: true}
}

func (v NullableEtaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


