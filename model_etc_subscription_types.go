/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EtcSubscriptionTypes the model 'EtcSubscriptionTypes'
type EtcSubscriptionTypes string

// List of EtcSubscriptionTypes
const (
	AT_GOBOX EtcSubscriptionTypes = "AT_GOBOX"
	BE_TELETOL EtcSubscriptionTypes = "BE_TELETOL"
	BE_VIAPASS EtcSubscriptionTypes = "BE_VIAPASS"
	CH_LSVA EtcSubscriptionTypes = "CH_LSVA"
	DE_QUICKBOX EtcSubscriptionTypes = "DE_QUICKBOX"
	DE_TOLLCOLLECT EtcSubscriptionTypes = "DE_TOLLCOLLECT"
	DE_WARNOWTUNNEL_RFID EtcSubscriptionTypes = "DE_WARNOWTUNNEL_RFID"
	DK_BROPAS_BUSINESS EtcSubscriptionTypes = "DK_BROPAS_BUSINESS"
	IT_TELEPASS EtcSubscriptionTypes = "IT_TELEPASS"
	NL_TELECARD EtcSubscriptionTypes = "NL_TELECARD"
	NL_TTAG EtcSubscriptionTypes = "NL_TTAG"
	NO_AUTOPASS EtcSubscriptionTypes = "NO_AUTOPASS"
	PT_VIA_VERDE EtcSubscriptionTypes = "PT_VIA_VERDE"
	US_APASS EtcSubscriptionTypes = "US_APASS"
	US_BREEZEBY EtcSubscriptionTypes = "US_BREEZEBY"
	US_DOWNBEACH_EXPRESSPASS EtcSubscriptionTypes = "US_DOWNBEACH_EXPRESSPASS"
	US_EPASS EtcSubscriptionTypes = "US_EPASS"
	US_EXPRESSACCOUNT EtcSubscriptionTypes = "US_EXPRESSACCOUNT"
	US_EXPRESSCARD EtcSubscriptionTypes = "US_EXPRESSCARD"
	US_EXPRESSPASS EtcSubscriptionTypes = "US_EXPRESSPASS"
	US_EXPRESSTOLL EtcSubscriptionTypes = "US_EXPRESSTOLL"
	US_EZPASS EtcSubscriptionTypes = "US_EZPASS"
	US_EZTAG EtcSubscriptionTypes = "US_EZTAG"
	US_FASTRAK EtcSubscriptionTypes = "US_FASTRAK"
	US_GEAUXPASS EtcSubscriptionTypes = "US_GEAUXPASS"
	US_GOODTOGO EtcSubscriptionTypes = "US_GOODTOGO"
	US_GOPASS EtcSubscriptionTypes = "US_GOPASS"
	US_IPASS EtcSubscriptionTypes = "US_IPASS"
	US_KTAG EtcSubscriptionTypes = "US_KTAG"
	US_LEEWAY EtcSubscriptionTypes = "US_LEEWAY"
	US_MACKINACBRIDGE_MACPASS EtcSubscriptionTypes = "US_MACKINACBRIDGE_MACPASS"
	US_MARYLAND_EZPASS EtcSubscriptionTypes = "US_MARYLAND_EZPASS"
	US_MASSACHUSETTS_EZPASS EtcSubscriptionTypes = "US_MASSACHUSETTS_EZPASS"
	US_NC_QUICKPASS EtcSubscriptionTypes = "US_NC_QUICKPASS"
	US_NEWHAMPSHIRE_EZPASS EtcSubscriptionTypes = "US_NEWHAMPSHIRE_EZPASS"
	US_NEWJERSEY_EZPASS EtcSubscriptionTypes = "US_NEWJERSEY_EZPASS"
	US_NEWYORK_EZPASS EtcSubscriptionTypes = "US_NEWYORK_EZPASS"
	US_NEXPRESS EtcSubscriptionTypes = "US_NEXPRESS"
	US_OHIO_EZPASS EtcSubscriptionTypes = "US_OHIO_EZPASS"
	US_PALPASS EtcSubscriptionTypes = "US_PALPASS"
	US_PIKEPASS EtcSubscriptionTypes = "US_PIKEPASS"
	US_RIVERLINK EtcSubscriptionTypes = "US_RIVERLINK"
	US_RIVERLINK_NOTRANSPONDER EtcSubscriptionTypes = "US_RIVERLINK_NOTRANSPONDER"
	US_SEAWAYTRANSITCARD EtcSubscriptionTypes = "US_SEAWAYTRANSITCARD"
	US_SUNPASS EtcSubscriptionTypes = "US_SUNPASS"
	US_TOLLTAG EtcSubscriptionTypes = "US_TOLLTAG"
	US_TXTAG EtcSubscriptionTypes = "US_TXTAG"
	US_VIRGINIA_EZPASS EtcSubscriptionTypes = "US_VIRGINIA_EZPASS"
	US_WESTVIRGINIA_EZPASS EtcSubscriptionTypes = "US_WESTVIRGINIA_EZPASS"
	US_PEACHPASS EtcSubscriptionTypes = "US_PEACHPASS"
	US_NEXUS EtcSubscriptionTypes = "US_NEXUS"
	US_DELAWARE_EZPASS EtcSubscriptionTypes = "US_DELAWARE_EZPASS"
	US_GROSSEILETOLLBRIDGE_PASSTAG EtcSubscriptionTypes = "US_GROSSEILETOLLBRIDGE_PASSTAG"
	US_EZPASS_PAYBYPLATE EtcSubscriptionTypes = "US_EZPASS_PAYBYPLATE"
)

// All allowed values of EtcSubscriptionTypes enum
var AllowedEtcSubscriptionTypesEnumValues = []EtcSubscriptionTypes{
	"AT_GOBOX",
	"BE_TELETOL",
	"BE_VIAPASS",
	"CH_LSVA",
	"DE_QUICKBOX",
	"DE_TOLLCOLLECT",
	"DE_WARNOWTUNNEL_RFID",
	"DK_BROPAS_BUSINESS",
	"IT_TELEPASS",
	"NL_TELECARD",
	"NL_TTAG",
	"NO_AUTOPASS",
	"PT_VIA_VERDE",
	"US_APASS",
	"US_BREEZEBY",
	"US_DOWNBEACH_EXPRESSPASS",
	"US_EPASS",
	"US_EXPRESSACCOUNT",
	"US_EXPRESSCARD",
	"US_EXPRESSPASS",
	"US_EXPRESSTOLL",
	"US_EZPASS",
	"US_EZTAG",
	"US_FASTRAK",
	"US_GEAUXPASS",
	"US_GOODTOGO",
	"US_GOPASS",
	"US_IPASS",
	"US_KTAG",
	"US_LEEWAY",
	"US_MACKINACBRIDGE_MACPASS",
	"US_MARYLAND_EZPASS",
	"US_MASSACHUSETTS_EZPASS",
	"US_NC_QUICKPASS",
	"US_NEWHAMPSHIRE_EZPASS",
	"US_NEWJERSEY_EZPASS",
	"US_NEWYORK_EZPASS",
	"US_NEXPRESS",
	"US_OHIO_EZPASS",
	"US_PALPASS",
	"US_PIKEPASS",
	"US_RIVERLINK",
	"US_RIVERLINK_NOTRANSPONDER",
	"US_SEAWAYTRANSITCARD",
	"US_SUNPASS",
	"US_TOLLTAG",
	"US_TXTAG",
	"US_VIRGINIA_EZPASS",
	"US_WESTVIRGINIA_EZPASS",
	"US_PEACHPASS",
	"US_NEXUS",
	"US_DELAWARE_EZPASS",
	"US_GROSSEILETOLLBRIDGE_PASSTAG",
	"US_EZPASS_PAYBYPLATE",
}

func (v *EtcSubscriptionTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EtcSubscriptionTypes(value)
	for _, existing := range AllowedEtcSubscriptionTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EtcSubscriptionTypes", value)
}

// NewEtcSubscriptionTypesFromValue returns a pointer to a valid EtcSubscriptionTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEtcSubscriptionTypesFromValue(v string) (*EtcSubscriptionTypes, error) {
	ev := EtcSubscriptionTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EtcSubscriptionTypes: valid values are %v", v, AllowedEtcSubscriptionTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EtcSubscriptionTypes) IsValid() bool {
	for _, existing := range AllowedEtcSubscriptionTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EtcSubscriptionTypes value
func (v EtcSubscriptionTypes) Ptr() *EtcSubscriptionTypes {
	return &v
}

type NullableEtcSubscriptionTypes struct {
	value *EtcSubscriptionTypes
	isSet bool
}

func (v NullableEtcSubscriptionTypes) Get() *EtcSubscriptionTypes {
	return v.value
}

func (v *NullableEtcSubscriptionTypes) Set(val *EtcSubscriptionTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableEtcSubscriptionTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableEtcSubscriptionTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEtcSubscriptionTypes(val *EtcSubscriptionTypes) *NullableEtcSubscriptionTypes {
	return &NullableEtcSubscriptionTypes{value: val, isSet: true}
}

func (v NullableEtcSubscriptionTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEtcSubscriptionTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

