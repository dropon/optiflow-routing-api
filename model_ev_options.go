/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
)

// checks if the EvOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvOptions{}

// EvOptions struct for EvOptions
type EvOptions struct {
	// The available battery capacity at the start of the route [%].
	InitialStateOfCharge *float64 `json:"initialStateOfCharge,omitempty"`
	// The minimum wanted remaining battery capacity at the end of the route and at the end of each leg [%].
	MinimumStateOfCharge *float64 `json:"minimumStateOfCharge,omitempty"`
	// Specifies if an energy efficient route should be calculated.
	EnergyEfficientRoute *bool `json:"energyEfficientRoute,omitempty"`
}

// NewEvOptions instantiates a new EvOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvOptions() *EvOptions {
	this := EvOptions{}
	var initialStateOfCharge float64 = 100
	this.InitialStateOfCharge = &initialStateOfCharge
	var minimumStateOfCharge float64 = 10
	this.MinimumStateOfCharge = &minimumStateOfCharge
	var energyEfficientRoute bool = false
	this.EnergyEfficientRoute = &energyEfficientRoute
	return &this
}

// NewEvOptionsWithDefaults instantiates a new EvOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvOptionsWithDefaults() *EvOptions {
	this := EvOptions{}
	var initialStateOfCharge float64 = 100
	this.InitialStateOfCharge = &initialStateOfCharge
	var minimumStateOfCharge float64 = 10
	this.MinimumStateOfCharge = &minimumStateOfCharge
	var energyEfficientRoute bool = false
	this.EnergyEfficientRoute = &energyEfficientRoute
	return &this
}

// GetInitialStateOfCharge returns the InitialStateOfCharge field value if set, zero value otherwise.
func (o *EvOptions) GetInitialStateOfCharge() float64 {
	if o == nil || IsNil(o.InitialStateOfCharge) {
		var ret float64
		return ret
	}
	return *o.InitialStateOfCharge
}

// GetInitialStateOfChargeOk returns a tuple with the InitialStateOfCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvOptions) GetInitialStateOfChargeOk() (*float64, bool) {
	if o == nil || IsNil(o.InitialStateOfCharge) {
		return nil, false
	}
	return o.InitialStateOfCharge, true
}

// HasInitialStateOfCharge returns a boolean if a field has been set.
func (o *EvOptions) HasInitialStateOfCharge() bool {
	if o != nil && !IsNil(o.InitialStateOfCharge) {
		return true
	}

	return false
}

// SetInitialStateOfCharge gets a reference to the given float64 and assigns it to the InitialStateOfCharge field.
func (o *EvOptions) SetInitialStateOfCharge(v float64) {
	o.InitialStateOfCharge = &v
}

// GetMinimumStateOfCharge returns the MinimumStateOfCharge field value if set, zero value otherwise.
func (o *EvOptions) GetMinimumStateOfCharge() float64 {
	if o == nil || IsNil(o.MinimumStateOfCharge) {
		var ret float64
		return ret
	}
	return *o.MinimumStateOfCharge
}

// GetMinimumStateOfChargeOk returns a tuple with the MinimumStateOfCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvOptions) GetMinimumStateOfChargeOk() (*float64, bool) {
	if o == nil || IsNil(o.MinimumStateOfCharge) {
		return nil, false
	}
	return o.MinimumStateOfCharge, true
}

// HasMinimumStateOfCharge returns a boolean if a field has been set.
func (o *EvOptions) HasMinimumStateOfCharge() bool {
	if o != nil && !IsNil(o.MinimumStateOfCharge) {
		return true
	}

	return false
}

// SetMinimumStateOfCharge gets a reference to the given float64 and assigns it to the MinimumStateOfCharge field.
func (o *EvOptions) SetMinimumStateOfCharge(v float64) {
	o.MinimumStateOfCharge = &v
}

// GetEnergyEfficientRoute returns the EnergyEfficientRoute field value if set, zero value otherwise.
func (o *EvOptions) GetEnergyEfficientRoute() bool {
	if o == nil || IsNil(o.EnergyEfficientRoute) {
		var ret bool
		return ret
	}
	return *o.EnergyEfficientRoute
}

// GetEnergyEfficientRouteOk returns a tuple with the EnergyEfficientRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvOptions) GetEnergyEfficientRouteOk() (*bool, bool) {
	if o == nil || IsNil(o.EnergyEfficientRoute) {
		return nil, false
	}
	return o.EnergyEfficientRoute, true
}

// HasEnergyEfficientRoute returns a boolean if a field has been set.
func (o *EvOptions) HasEnergyEfficientRoute() bool {
	if o != nil && !IsNil(o.EnergyEfficientRoute) {
		return true
	}

	return false
}

// SetEnergyEfficientRoute gets a reference to the given bool and assigns it to the EnergyEfficientRoute field.
func (o *EvOptions) SetEnergyEfficientRoute(v bool) {
	o.EnergyEfficientRoute = &v
}

func (o EvOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InitialStateOfCharge) {
		toSerialize["initialStateOfCharge"] = o.InitialStateOfCharge
	}
	if !IsNil(o.MinimumStateOfCharge) {
		toSerialize["minimumStateOfCharge"] = o.MinimumStateOfCharge
	}
	if !IsNil(o.EnergyEfficientRoute) {
		toSerialize["energyEfficientRoute"] = o.EnergyEfficientRoute
	}
	return toSerialize, nil
}

type NullableEvOptions struct {
	value *EvOptions
	isSet bool
}

func (v NullableEvOptions) Get() *EvOptions {
	return v.value
}

func (v *NullableEvOptions) Set(val *EvOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableEvOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableEvOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvOptions(val *EvOptions) *NullableEvOptions {
	return &NullableEvOptions{value: val, isSet: true}
}

func (v NullableEvOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


