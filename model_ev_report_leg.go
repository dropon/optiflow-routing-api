/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvReportLeg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvReportLeg{}

// EvReportLeg The consumption summary for the specified vehicle model including the weather used for consumption calculation. Only present if both _EV_REPORT_ and _LEGS_ is requested. 
type EvReportLeg struct {
	// The electricity consumption since the start of the leg [kWh].
	ElectricityConsumption float64 `json:"electricityConsumption"`
	// The remaining state of charge at the end of the leg [%]. May be below the defined minimum state of charge or even below zero, if the electricity consumption exceeds the available energy in the battery and charging is not possible before falling below zero.
	BatteryStateOfCharge float64 `json:"batteryStateOfCharge"`
	WeatherAtStart WeatherResponse `json:"weatherAtStart"`
	WeatherAtEnd WeatherResponse `json:"weatherAtEnd"`
}

type _EvReportLeg EvReportLeg

// NewEvReportLeg instantiates a new EvReportLeg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvReportLeg(electricityConsumption float64, batteryStateOfCharge float64, weatherAtStart WeatherResponse, weatherAtEnd WeatherResponse) *EvReportLeg {
	this := EvReportLeg{}
	this.ElectricityConsumption = electricityConsumption
	this.BatteryStateOfCharge = batteryStateOfCharge
	this.WeatherAtStart = weatherAtStart
	this.WeatherAtEnd = weatherAtEnd
	return &this
}

// NewEvReportLegWithDefaults instantiates a new EvReportLeg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvReportLegWithDefaults() *EvReportLeg {
	this := EvReportLeg{}
	return &this
}

// GetElectricityConsumption returns the ElectricityConsumption field value
func (o *EvReportLeg) GetElectricityConsumption() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ElectricityConsumption
}

// GetElectricityConsumptionOk returns a tuple with the ElectricityConsumption field value
// and a boolean to check if the value has been set.
func (o *EvReportLeg) GetElectricityConsumptionOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectricityConsumption, true
}

// SetElectricityConsumption sets field value
func (o *EvReportLeg) SetElectricityConsumption(v float64) {
	o.ElectricityConsumption = v
}

// GetBatteryStateOfCharge returns the BatteryStateOfCharge field value
func (o *EvReportLeg) GetBatteryStateOfCharge() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BatteryStateOfCharge
}

// GetBatteryStateOfChargeOk returns a tuple with the BatteryStateOfCharge field value
// and a boolean to check if the value has been set.
func (o *EvReportLeg) GetBatteryStateOfChargeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatteryStateOfCharge, true
}

// SetBatteryStateOfCharge sets field value
func (o *EvReportLeg) SetBatteryStateOfCharge(v float64) {
	o.BatteryStateOfCharge = v
}

// GetWeatherAtStart returns the WeatherAtStart field value
func (o *EvReportLeg) GetWeatherAtStart() WeatherResponse {
	if o == nil {
		var ret WeatherResponse
		return ret
	}

	return o.WeatherAtStart
}

// GetWeatherAtStartOk returns a tuple with the WeatherAtStart field value
// and a boolean to check if the value has been set.
func (o *EvReportLeg) GetWeatherAtStartOk() (*WeatherResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeatherAtStart, true
}

// SetWeatherAtStart sets field value
func (o *EvReportLeg) SetWeatherAtStart(v WeatherResponse) {
	o.WeatherAtStart = v
}

// GetWeatherAtEnd returns the WeatherAtEnd field value
func (o *EvReportLeg) GetWeatherAtEnd() WeatherResponse {
	if o == nil {
		var ret WeatherResponse
		return ret
	}

	return o.WeatherAtEnd
}

// GetWeatherAtEndOk returns a tuple with the WeatherAtEnd field value
// and a boolean to check if the value has been set.
func (o *EvReportLeg) GetWeatherAtEndOk() (*WeatherResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WeatherAtEnd, true
}

// SetWeatherAtEnd sets field value
func (o *EvReportLeg) SetWeatherAtEnd(v WeatherResponse) {
	o.WeatherAtEnd = v
}

func (o EvReportLeg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvReportLeg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["electricityConsumption"] = o.ElectricityConsumption
	toSerialize["batteryStateOfCharge"] = o.BatteryStateOfCharge
	toSerialize["weatherAtStart"] = o.WeatherAtStart
	toSerialize["weatherAtEnd"] = o.WeatherAtEnd
	return toSerialize, nil
}

func (o *EvReportLeg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"electricityConsumption",
		"batteryStateOfCharge",
		"weatherAtStart",
		"weatherAtEnd",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvReportLeg := _EvReportLeg{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvReportLeg)

	if err != nil {
		return err
	}

	*o = EvReportLeg(varEvReportLeg)

	return err
}

type NullableEvReportLeg struct {
	value *EvReportLeg
	isSet bool
}

func (v NullableEvReportLeg) Get() *EvReportLeg {
	return v.value
}

func (v *NullableEvReportLeg) Set(val *EvReportLeg) {
	v.value = val
	v.isSet = true
}

func (v NullableEvReportLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableEvReportLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvReportLeg(val *EvReportLeg) *NullableEvReportLeg {
	return &NullableEvReportLeg{value: val, isSet: true}
}

func (v NullableEvReportLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvReportLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


