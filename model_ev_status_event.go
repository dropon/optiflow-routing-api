/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EvStatusEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EvStatusEvent{}

// EvStatusEvent Issued periodically to report electricity consumption and battery status. Requires _EV_STATUS_EVENTS_ or _EV_STATUS_EVENTS_POLYLINE_ to be requested.
type EvStatusEvent struct {
	// The remaining state of charge at the location of this event [%]. May be below the defined minimum state of charge or even below zero, if the electricity consumption exceeds the available energy in the battery and charging is not possible before falling below zero.
	BatteryStateOfCharge float64 `json:"batteryStateOfCharge"`
	// The electricity consumption since the previous event containing **evStatus** [kWh].
	ElectricityConsumption float64 `json:"electricityConsumption"`
	// The route polyline snippet since the previous event containing **evStatus** in the format specified by **options[polylineFormat]**. The polyline may be null for events without distance to the previous **evStatus** event, for example events generated at a waypoint  with power consumption during service. Requires _EV_STATUS_EVENTS_POLYLINE_ to be requested.
	Polyline *string `json:"polyline,omitempty"`
}

type _EvStatusEvent EvStatusEvent

// NewEvStatusEvent instantiates a new EvStatusEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvStatusEvent(batteryStateOfCharge float64, electricityConsumption float64) *EvStatusEvent {
	this := EvStatusEvent{}
	this.BatteryStateOfCharge = batteryStateOfCharge
	this.ElectricityConsumption = electricityConsumption
	return &this
}

// NewEvStatusEventWithDefaults instantiates a new EvStatusEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEvStatusEventWithDefaults() *EvStatusEvent {
	this := EvStatusEvent{}
	return &this
}

// GetBatteryStateOfCharge returns the BatteryStateOfCharge field value
func (o *EvStatusEvent) GetBatteryStateOfCharge() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BatteryStateOfCharge
}

// GetBatteryStateOfChargeOk returns a tuple with the BatteryStateOfCharge field value
// and a boolean to check if the value has been set.
func (o *EvStatusEvent) GetBatteryStateOfChargeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BatteryStateOfCharge, true
}

// SetBatteryStateOfCharge sets field value
func (o *EvStatusEvent) SetBatteryStateOfCharge(v float64) {
	o.BatteryStateOfCharge = v
}

// GetElectricityConsumption returns the ElectricityConsumption field value
func (o *EvStatusEvent) GetElectricityConsumption() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ElectricityConsumption
}

// GetElectricityConsumptionOk returns a tuple with the ElectricityConsumption field value
// and a boolean to check if the value has been set.
func (o *EvStatusEvent) GetElectricityConsumptionOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ElectricityConsumption, true
}

// SetElectricityConsumption sets field value
func (o *EvStatusEvent) SetElectricityConsumption(v float64) {
	o.ElectricityConsumption = v
}

// GetPolyline returns the Polyline field value if set, zero value otherwise.
func (o *EvStatusEvent) GetPolyline() string {
	if o == nil || IsNil(o.Polyline) {
		var ret string
		return ret
	}
	return *o.Polyline
}

// GetPolylineOk returns a tuple with the Polyline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EvStatusEvent) GetPolylineOk() (*string, bool) {
	if o == nil || IsNil(o.Polyline) {
		return nil, false
	}
	return o.Polyline, true
}

// HasPolyline returns a boolean if a field has been set.
func (o *EvStatusEvent) HasPolyline() bool {
	if o != nil && !IsNil(o.Polyline) {
		return true
	}

	return false
}

// SetPolyline gets a reference to the given string and assigns it to the Polyline field.
func (o *EvStatusEvent) SetPolyline(v string) {
	o.Polyline = &v
}

func (o EvStatusEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EvStatusEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["batteryStateOfCharge"] = o.BatteryStateOfCharge
	toSerialize["electricityConsumption"] = o.ElectricityConsumption
	if !IsNil(o.Polyline) {
		toSerialize["polyline"] = o.Polyline
	}
	return toSerialize, nil
}

func (o *EvStatusEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"batteryStateOfCharge",
		"electricityConsumption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvStatusEvent := _EvStatusEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvStatusEvent)

	if err != nil {
		return err
	}

	*o = EvStatusEvent(varEvStatusEvent)

	return err
}

type NullableEvStatusEvent struct {
	value *EvStatusEvent
	isSet bool
}

func (v NullableEvStatusEvent) Get() *EvStatusEvent {
	return v.value
}

func (v *NullableEvStatusEvent) Set(val *EvStatusEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableEvStatusEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvStatusEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvStatusEvent(val *EvStatusEvent) *NullableEvStatusEvent {
	return &NullableEvStatusEvent{value: val, isSet: true}
}

func (v NullableEvStatusEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvStatusEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


