/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// FuelType The fuel type of the vehicle. The fuel types _CNG_GASOLINE_ and _LNG_GASOLINE_ are used for dual-fuel vehicles, therefore the **dualFuelRatio** has to be specified. These fuel types cannot be used with hybrid vehicles.  Supported for **engineType** _COMBUSTION_ and _HYBRID_. Relevant for `emissions`.
type FuelType string

// List of FuelType
const (
	GASOLINE                FuelType = "GASOLINE"
	DIESEL                  FuelType = "DIESEL"
	COMPRESSED_NATURAL_GAS  FuelType = "COMPRESSED_NATURAL_GAS"
	LIQUEFIED_PETROLEUM_GAS FuelType = "LIQUEFIED_PETROLEUM_GAS"
	LIQUEFIED_NATURAL_GAS   FuelType = "LIQUEFIED_NATURAL_GAS"
	CNG_GASOLINE            FuelType = "CNG_GASOLINE"
	LPG_GASOLINE            FuelType = "LPG_GASOLINE"
	ETHANOL                 FuelType = "ETHANOL"
	FUELTYPE_NONE           FuelType = "NONE"
)

// All allowed values of FuelType enum
var AllowedFuelTypeEnumValues = []FuelType{
	"GASOLINE",
	"DIESEL",
	"COMPRESSED_NATURAL_GAS",
	"LIQUEFIED_PETROLEUM_GAS",
	"LIQUEFIED_NATURAL_GAS",
	"CNG_GASOLINE",
	"LPG_GASOLINE",
	"ETHANOL",
	"NONE",
}

func (v *FuelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FuelType(value)
	for _, existing := range AllowedFuelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FuelType", value)
}

// NewFuelTypeFromValue returns a pointer to a valid FuelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFuelTypeFromValue(v string) (*FuelType, error) {
	ev := FuelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FuelType: valid values are %v", v, AllowedFuelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FuelType) IsValid() bool {
	for _, existing := range AllowedFuelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FuelType value
func (v FuelType) Ptr() *FuelType {
	return &v
}

type NullableFuelType struct {
	value *FuelType
	isSet bool
}

func (v NullableFuelType) Get() *FuelType {
	return v.value
}

func (v *NullableFuelType) Set(val *FuelType) {
	v.value = val
	v.isSet = true
}

func (v NullableFuelType) IsSet() bool {
	return v.isSet
}

func (v *NullableFuelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuelType(val *FuelType) *NullableFuelType {
	return &NullableFuelType{value: val, isSet: true}
}

func (v NullableFuelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
