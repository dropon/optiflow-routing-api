/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// HazardousMaterials the model 'HazardousMaterials'
type HazardousMaterials string

// List of HazardousMaterials
const (
	HAZARDOUS_TO_WATER HazardousMaterials = "HAZARDOUS_TO_WATER"
	EXPLOSIVE          HazardousMaterials = "EXPLOSIVE"
	FLAMMABLE          HazardousMaterials = "FLAMMABLE"
	RADIOACTIVE        HazardousMaterials = "RADIOACTIVE"
	INHALATION_HAZARD  HazardousMaterials = "INHALATION_HAZARD"
	MEDICAL_WASTE      HazardousMaterials = "MEDICAL_WASTE"
	OTHER              HazardousMaterials = "OTHER"
	HAZARDOUS_NONE     HazardousMaterials = "NONE"
)

// All allowed values of HazardousMaterials enum
var AllowedHazardousMaterialsEnumValues = []HazardousMaterials{
	"HAZARDOUS_TO_WATER",
	"EXPLOSIVE",
	"FLAMMABLE",
	"RADIOACTIVE",
	"INHALATION_HAZARD",
	"MEDICAL_WASTE",
	"OTHER",
	"NONE",
}

func (v *HazardousMaterials) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HazardousMaterials(value)
	for _, existing := range AllowedHazardousMaterialsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HazardousMaterials", value)
}

// NewHazardousMaterialsFromValue returns a pointer to a valid HazardousMaterials
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHazardousMaterialsFromValue(v string) (*HazardousMaterials, error) {
	ev := HazardousMaterials(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HazardousMaterials: valid values are %v", v, AllowedHazardousMaterialsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HazardousMaterials) IsValid() bool {
	for _, existing := range AllowedHazardousMaterialsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HazardousMaterials value
func (v HazardousMaterials) Ptr() *HazardousMaterials {
	return &v
}

type NullableHazardousMaterials struct {
	value *HazardousMaterials
	isSet bool
}

func (v NullableHazardousMaterials) Get() *HazardousMaterials {
	return v.value
}

func (v *NullableHazardousMaterials) Set(val *HazardousMaterials) {
	v.value = val
	v.isSet = true
}

func (v NullableHazardousMaterials) IsSet() bool {
	return v.isSet
}

func (v *NullableHazardousMaterials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHazardousMaterials(val *HazardousMaterials) *NullableHazardousMaterials {
	return &NullableHazardousMaterials{value: val, isSet: true}
}

func (v NullableHazardousMaterials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHazardousMaterials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
