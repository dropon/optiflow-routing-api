/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Leg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Leg{}

// Leg struct for Leg
type Leg struct {
	// The distance of the leg [m].
	Distance int32 `json:"distance"`
	// The travel time for the leg [s].
	TravelTime int32 `json:"travelTime"`
	// The total delay due to live traffic on this leg [s].  This value contains the sum of all traffic events on this leg and will be non-zero only if **options[trafficMode]=REALISTIC**. See [here](./concepts/traffic-modes) for more information.
	TrafficDelay *int32 `json:"trafficDelay,omitempty"`
	// If there is no valid connection between the waypoints of this leg but the resulting leg can be calculated by using actually prohibited roads, the route is marked as violated.
	Violated bool `json:"violated"`
	TollCosts *TollCosts `json:"tollCosts,omitempty"`
	// The polyline of the leg in the format specified by **options[polylineFormat]**.
	Polyline *string `json:"polyline,omitempty"`
	EvReport *EvReportLeg `json:"evReport,omitempty"`
}

type _Leg Leg

// NewLeg instantiates a new Leg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeg(distance int32, travelTime int32, violated bool) *Leg {
	this := Leg{}
	this.Distance = distance
	this.TravelTime = travelTime
	this.Violated = violated
	return &this
}

// NewLegWithDefaults instantiates a new Leg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegWithDefaults() *Leg {
	this := Leg{}
	return &this
}

// GetDistance returns the Distance field value
func (o *Leg) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *Leg) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *Leg) SetDistance(v int32) {
	o.Distance = v
}

// GetTravelTime returns the TravelTime field value
func (o *Leg) GetTravelTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value
// and a boolean to check if the value has been set.
func (o *Leg) GetTravelTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TravelTime, true
}

// SetTravelTime sets field value
func (o *Leg) SetTravelTime(v int32) {
	o.TravelTime = v
}

// GetTrafficDelay returns the TrafficDelay field value if set, zero value otherwise.
func (o *Leg) GetTrafficDelay() int32 {
	if o == nil || IsNil(o.TrafficDelay) {
		var ret int32
		return ret
	}
	return *o.TrafficDelay
}

// GetTrafficDelayOk returns a tuple with the TrafficDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetTrafficDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.TrafficDelay) {
		return nil, false
	}
	return o.TrafficDelay, true
}

// HasTrafficDelay returns a boolean if a field has been set.
func (o *Leg) HasTrafficDelay() bool {
	if o != nil && !IsNil(o.TrafficDelay) {
		return true
	}

	return false
}

// SetTrafficDelay gets a reference to the given int32 and assigns it to the TrafficDelay field.
func (o *Leg) SetTrafficDelay(v int32) {
	o.TrafficDelay = &v
}

// GetViolated returns the Violated field value
func (o *Leg) GetViolated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Violated
}

// GetViolatedOk returns a tuple with the Violated field value
// and a boolean to check if the value has been set.
func (o *Leg) GetViolatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Violated, true
}

// SetViolated sets field value
func (o *Leg) SetViolated(v bool) {
	o.Violated = v
}

// GetTollCosts returns the TollCosts field value if set, zero value otherwise.
func (o *Leg) GetTollCosts() TollCosts {
	if o == nil || IsNil(o.TollCosts) {
		var ret TollCosts
		return ret
	}
	return *o.TollCosts
}

// GetTollCostsOk returns a tuple with the TollCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetTollCostsOk() (*TollCosts, bool) {
	if o == nil || IsNil(o.TollCosts) {
		return nil, false
	}
	return o.TollCosts, true
}

// HasTollCosts returns a boolean if a field has been set.
func (o *Leg) HasTollCosts() bool {
	if o != nil && !IsNil(o.TollCosts) {
		return true
	}

	return false
}

// SetTollCosts gets a reference to the given TollCosts and assigns it to the TollCosts field.
func (o *Leg) SetTollCosts(v TollCosts) {
	o.TollCosts = &v
}

// GetPolyline returns the Polyline field value if set, zero value otherwise.
func (o *Leg) GetPolyline() string {
	if o == nil || IsNil(o.Polyline) {
		var ret string
		return ret
	}
	return *o.Polyline
}

// GetPolylineOk returns a tuple with the Polyline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetPolylineOk() (*string, bool) {
	if o == nil || IsNil(o.Polyline) {
		return nil, false
	}
	return o.Polyline, true
}

// HasPolyline returns a boolean if a field has been set.
func (o *Leg) HasPolyline() bool {
	if o != nil && !IsNil(o.Polyline) {
		return true
	}

	return false
}

// SetPolyline gets a reference to the given string and assigns it to the Polyline field.
func (o *Leg) SetPolyline(v string) {
	o.Polyline = &v
}

// GetEvReport returns the EvReport field value if set, zero value otherwise.
func (o *Leg) GetEvReport() EvReportLeg {
	if o == nil || IsNil(o.EvReport) {
		var ret EvReportLeg
		return ret
	}
	return *o.EvReport
}

// GetEvReportOk returns a tuple with the EvReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetEvReportOk() (*EvReportLeg, bool) {
	if o == nil || IsNil(o.EvReport) {
		return nil, false
	}
	return o.EvReport, true
}

// HasEvReport returns a boolean if a field has been set.
func (o *Leg) HasEvReport() bool {
	if o != nil && !IsNil(o.EvReport) {
		return true
	}

	return false
}

// SetEvReport gets a reference to the given EvReportLeg and assigns it to the EvReport field.
func (o *Leg) SetEvReport(v EvReportLeg) {
	o.EvReport = &v
}

func (o Leg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Leg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["distance"] = o.Distance
	toSerialize["travelTime"] = o.TravelTime
	if !IsNil(o.TrafficDelay) {
		toSerialize["trafficDelay"] = o.TrafficDelay
	}
	toSerialize["violated"] = o.Violated
	if !IsNil(o.TollCosts) {
		toSerialize["tollCosts"] = o.TollCosts
	}
	if !IsNil(o.Polyline) {
		toSerialize["polyline"] = o.Polyline
	}
	if !IsNil(o.EvReport) {
		toSerialize["evReport"] = o.EvReport
	}
	return toSerialize, nil
}

func (o *Leg) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"distance",
		"travelTime",
		"violated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLeg := _Leg{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLeg)

	if err != nil {
		return err
	}

	*o = Leg(varLeg)

	return err
}

type NullableLeg struct {
	value *Leg
	isSet bool
}

func (v NullableLeg) Get() *Leg {
	return v.value
}

func (v *NullableLeg) Set(val *Leg) {
	v.value = val
	v.isSet = true
}

func (v NullableLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeg(val *Leg) *NullableLeg {
	return &NullableLeg{value: val, isSet: true}
}

func (v NullableLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


