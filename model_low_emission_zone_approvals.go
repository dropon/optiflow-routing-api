/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LowEmissionZoneApprovals the model 'LowEmissionZoneApprovals'
type LowEmissionZoneApprovals string

// List of LowEmissionZoneApprovals
const (
	NONE LowEmissionZoneApprovals = "NONE"
	AT_EURO_1 LowEmissionZoneApprovals = "AT_EURO_1"
	AT_EURO_2 LowEmissionZoneApprovals = "AT_EURO_2"
	AT_EURO_3 LowEmissionZoneApprovals = "AT_EURO_3"
	AT_EURO_4 LowEmissionZoneApprovals = "AT_EURO_4"
	AT_EURO_5 LowEmissionZoneApprovals = "AT_EURO_5"
	AT_EURO_6 LowEmissionZoneApprovals = "AT_EURO_6"
	DE_GREEN LowEmissionZoneApprovals = "DE_GREEN"
	DE_YELLOW LowEmissionZoneApprovals = "DE_YELLOW"
	DE_RED LowEmissionZoneApprovals = "DE_RED"
	DK_AUTHORIZED LowEmissionZoneApprovals = "DK_AUTHORIZED"
	ES_CAT_B LowEmissionZoneApprovals = "ES_CAT_B"
	ES_CAT_C LowEmissionZoneApprovals = "ES_CAT_C"
	ES_CAT_ECO LowEmissionZoneApprovals = "ES_CAT_ECO"
	ES_CAT_ZERO LowEmissionZoneApprovals = "ES_CAT_ZERO"
	FR_CRITAIR_0 LowEmissionZoneApprovals = "FR_CRITAIR_0"
	FR_CRITAIR_1 LowEmissionZoneApprovals = "FR_CRITAIR_1"
	FR_CRITAIR_2 LowEmissionZoneApprovals = "FR_CRITAIR_2"
	FR_CRITAIR_3 LowEmissionZoneApprovals = "FR_CRITAIR_3"
	FR_CRITAIR_4 LowEmissionZoneApprovals = "FR_CRITAIR_4"
	FR_CRITAIR_5 LowEmissionZoneApprovals = "FR_CRITAIR_5"
)

// All allowed values of LowEmissionZoneApprovals enum
var AllowedLowEmissionZoneApprovalsEnumValues = []LowEmissionZoneApprovals{
	"NONE",
	"AT_EURO_1",
	"AT_EURO_2",
	"AT_EURO_3",
	"AT_EURO_4",
	"AT_EURO_5",
	"AT_EURO_6",
	"DE_GREEN",
	"DE_YELLOW",
	"DE_RED",
	"DK_AUTHORIZED",
	"ES_CAT_B",
	"ES_CAT_C",
	"ES_CAT_ECO",
	"ES_CAT_ZERO",
	"FR_CRITAIR_0",
	"FR_CRITAIR_1",
	"FR_CRITAIR_2",
	"FR_CRITAIR_3",
	"FR_CRITAIR_4",
	"FR_CRITAIR_5",
}

func (v *LowEmissionZoneApprovals) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LowEmissionZoneApprovals(value)
	for _, existing := range AllowedLowEmissionZoneApprovalsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LowEmissionZoneApprovals", value)
}

// NewLowEmissionZoneApprovalsFromValue returns a pointer to a valid LowEmissionZoneApprovals
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLowEmissionZoneApprovalsFromValue(v string) (*LowEmissionZoneApprovals, error) {
	ev := LowEmissionZoneApprovals(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LowEmissionZoneApprovals: valid values are %v", v, AllowedLowEmissionZoneApprovalsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LowEmissionZoneApprovals) IsValid() bool {
	for _, existing := range AllowedLowEmissionZoneApprovalsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LowEmissionZoneApprovals value
func (v LowEmissionZoneApprovals) Ptr() *LowEmissionZoneApprovals {
	return &v
}

type NullableLowEmissionZoneApprovals struct {
	value *LowEmissionZoneApprovals
	isSet bool
}

func (v NullableLowEmissionZoneApprovals) Get() *LowEmissionZoneApprovals {
	return v.value
}

func (v *NullableLowEmissionZoneApprovals) Set(val *LowEmissionZoneApprovals) {
	v.value = val
	v.isSet = true
}

func (v NullableLowEmissionZoneApprovals) IsSet() bool {
	return v.isSet
}

func (v *NullableLowEmissionZoneApprovals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLowEmissionZoneApprovals(val *LowEmissionZoneApprovals) *NullableLowEmissionZoneApprovals {
	return &NullableLowEmissionZoneApprovals{value: val, isSet: true}
}

func (v NullableLowEmissionZoneApprovals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLowEmissionZoneApprovals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

