/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LowEmissionZoneEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LowEmissionZoneEvent{}

// LowEmissionZoneEvent Issued when the route passes a low-emission zone. Requires _LOW_EMISSION_ZONE_EVENTS_ to be requested.
type LowEmissionZoneEvent struct {
	// The name of the low-emission zone. 
	Name string `json:"name"`
	AccessType AccessType `json:"accessType"`
	// For **accessType** _ENTER_ this index points to the corresponding event with **accessType** _EXIT_ and vice-versa. Not present otherwise.
	RelatedEventIndex *int32 `json:"relatedEventIndex,omitempty"`
}

type _LowEmissionZoneEvent LowEmissionZoneEvent

// NewLowEmissionZoneEvent instantiates a new LowEmissionZoneEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLowEmissionZoneEvent(name string, accessType AccessType) *LowEmissionZoneEvent {
	this := LowEmissionZoneEvent{}
	this.Name = name
	this.AccessType = accessType
	return &this
}

// NewLowEmissionZoneEventWithDefaults instantiates a new LowEmissionZoneEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLowEmissionZoneEventWithDefaults() *LowEmissionZoneEvent {
	this := LowEmissionZoneEvent{}
	return &this
}

// GetName returns the Name field value
func (o *LowEmissionZoneEvent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LowEmissionZoneEvent) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LowEmissionZoneEvent) SetName(v string) {
	o.Name = v
}

// GetAccessType returns the AccessType field value
func (o *LowEmissionZoneEvent) GetAccessType() AccessType {
	if o == nil {
		var ret AccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *LowEmissionZoneEvent) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *LowEmissionZoneEvent) SetAccessType(v AccessType) {
	o.AccessType = v
}

// GetRelatedEventIndex returns the RelatedEventIndex field value if set, zero value otherwise.
func (o *LowEmissionZoneEvent) GetRelatedEventIndex() int32 {
	if o == nil || IsNil(o.RelatedEventIndex) {
		var ret int32
		return ret
	}
	return *o.RelatedEventIndex
}

// GetRelatedEventIndexOk returns a tuple with the RelatedEventIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LowEmissionZoneEvent) GetRelatedEventIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.RelatedEventIndex) {
		return nil, false
	}
	return o.RelatedEventIndex, true
}

// HasRelatedEventIndex returns a boolean if a field has been set.
func (o *LowEmissionZoneEvent) HasRelatedEventIndex() bool {
	if o != nil && !IsNil(o.RelatedEventIndex) {
		return true
	}

	return false
}

// SetRelatedEventIndex gets a reference to the given int32 and assigns it to the RelatedEventIndex field.
func (o *LowEmissionZoneEvent) SetRelatedEventIndex(v int32) {
	o.RelatedEventIndex = &v
}

func (o LowEmissionZoneEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LowEmissionZoneEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["accessType"] = o.AccessType
	if !IsNil(o.RelatedEventIndex) {
		toSerialize["relatedEventIndex"] = o.RelatedEventIndex
	}
	return toSerialize, nil
}

func (o *LowEmissionZoneEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"accessType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLowEmissionZoneEvent := _LowEmissionZoneEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLowEmissionZoneEvent)

	if err != nil {
		return err
	}

	*o = LowEmissionZoneEvent(varLowEmissionZoneEvent)

	return err
}

type NullableLowEmissionZoneEvent struct {
	value *LowEmissionZoneEvent
	isSet bool
}

func (v NullableLowEmissionZoneEvent) Get() *LowEmissionZoneEvent {
	return v.value
}

func (v *NullableLowEmissionZoneEvent) Set(val *LowEmissionZoneEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableLowEmissionZoneEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableLowEmissionZoneEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLowEmissionZoneEvent(val *LowEmissionZoneEvent) *NullableLowEmissionZoneEvent {
	return &NullableLowEmissionZoneEvent{value: val, isSet: true}
}

func (v NullableLowEmissionZoneEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLowEmissionZoneEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


