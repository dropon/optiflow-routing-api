/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LowEmissionZoneExemptions the model 'LowEmissionZoneExemptions'
type LowEmissionZoneExemptions string

// List of LowEmissionZoneExemptions
const (
	BE_LAGE_EMISSIEZONE_ANTWERPEN LowEmissionZoneExemptions = "BE_LAGE_EMISSIEZONE_ANTWERPEN"
	BE_LAGE_EMISSIEZONE_GENT LowEmissionZoneExemptions = "BE_LAGE_EMISSIEZONE_GENT"
	BE_ZONE_BASSE_EMISSION_BRUXELLES LowEmissionZoneExemptions = "BE_ZONE_BASSE_EMISSION_BRUXELLES"
	DK_AALBORG_MILJOZONE LowEmissionZoneExemptions = "DK_AALBORG_MILJOZONE"
	DK_ARHUS_MILJOZONE LowEmissionZoneExemptions = "DK_ARHUS_MILJOZONE"
	DK_FREDERIKSBERG_MILJOZONE LowEmissionZoneExemptions = "DK_FREDERIKSBERG_MILJOZONE"
	DK_KOBENHAVN_MILJOZONE LowEmissionZoneExemptions = "DK_KOBENHAVN_MILJOZONE"
	DK_ODENSE_MILJOZONE LowEmissionZoneExemptions = "DK_ODENSE_MILJOZONE"
	ES_ZBE_ALMERIA LowEmissionZoneExemptions = "ES_ZBE_ALMERIA"
	ES_ZBE_BILBAO LowEmissionZoneExemptions = "ES_ZBE_BILBAO"
	ES_ZBE_CORDOBA LowEmissionZoneExemptions = "ES_ZBE_CORDOBA"
	ES_ZBE_SAN_SEBASTIAN LowEmissionZoneExemptions = "ES_ZBE_SAN_SEBASTIAN"
	ES_ZBE_TORREMOLINOS LowEmissionZoneExemptions = "ES_ZBE_TORREMOLINOS"
	ES_ZBE_VALLADOLID LowEmissionZoneExemptions = "ES_ZBE_VALLADOLID"
	FR_STRASBOURG_ZFE LowEmissionZoneExemptions = "FR_STRASBOURG_ZFE"
	GB_ABERDEEN_LEZ LowEmissionZoneExemptions = "GB_ABERDEEN_LEZ"
	GB_BATH_CAZ LowEmissionZoneExemptions = "GB_BATH_CAZ"
	GB_BIRMINGHAM_CAZ LowEmissionZoneExemptions = "GB_BIRMINGHAM_CAZ"
	GB_BRADFORD_CAZ LowEmissionZoneExemptions = "GB_BRADFORD_CAZ"
	GB_BRISTOL_CAZ LowEmissionZoneExemptions = "GB_BRISTOL_CAZ"
	GB_DUNDEE_LEZ LowEmissionZoneExemptions = "GB_DUNDEE_LEZ"
	GB_EDINBURGH_LEZ LowEmissionZoneExemptions = "GB_EDINBURGH_LEZ"
	GB_GLASGOW_LEZ LowEmissionZoneExemptions = "GB_GLASGOW_LEZ"
	GB_LONDON_ULTRA_LOW_EMISSION_ZONE LowEmissionZoneExemptions = "GB_LONDON_ULTRA_LOW_EMISSION_ZONE"
	GB_NEWCASTLE_CAZ LowEmissionZoneExemptions = "GB_NEWCASTLE_CAZ"
	GB_PORTSMOUTH_CAZ LowEmissionZoneExemptions = "GB_PORTSMOUTH_CAZ"
	GB_SHEFFIELD_CAZ LowEmissionZoneExemptions = "GB_SHEFFIELD_CAZ"
	IT_MILANO_AREA_C LowEmissionZoneExemptions = "IT_MILANO_AREA_C"
	IT_PALERMO_ZTL LowEmissionZoneExemptions = "IT_PALERMO_ZTL"
	NL_AMSTERDAM_MILIEUZONE LowEmissionZoneExemptions = "NL_AMSTERDAM_MILIEUZONE"
	NL_AMSTERDAM_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_AMSTERDAM_ZERO_EMISSIEZONE"
	NL_ARNHEM_MILIEUZONE LowEmissionZoneExemptions = "NL_ARNHEM_MILIEUZONE"
	NL_ASSEN_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_ASSEN_ZERO_EMISSIEZONE"
	NL_BREDA_MILIEUZONE LowEmissionZoneExemptions = "NL_BREDA_MILIEUZONE"
	NL_DELFT_HAAG_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_DELFT_HAAG_ZERO_EMISSIEZONE"
	NL_DELFT_MILIEUZONE LowEmissionZoneExemptions = "NL_DELFT_MILIEUZONE"
	NL_DEN_HAAG_MILIEUZONE LowEmissionZoneExemptions = "NL_DEN_HAAG_MILIEUZONE"
	NL_DEN_HAAG_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_DEN_HAAG_ZERO_EMISSIEZONE"
	NL_EINDHOVEN_MILIEUZONE LowEmissionZoneExemptions = "NL_EINDHOVEN_MILIEUZONE"
	NL_EINDHOVEN_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_EINDHOVEN_ZERO_EMISSIEZONE"
	NL_GOUDA_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_GOUDA_ZERO_EMISSIEZONE"
	NL_HAARLEM_MILIEUZONE LowEmissionZoneExemptions = "NL_HAARLEM_MILIEUZONE"
	NL_LEIDEN_MILIEUZONE LowEmissionZoneExemptions = "NL_LEIDEN_MILIEUZONE"
	NL_LEIDEN_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_LEIDEN_ZERO_EMISSIEZONE"
	NL_MAASTRICHT_MILIEUZONE LowEmissionZoneExemptions = "NL_MAASTRICHT_MILIEUZONE"
	NL_MAASTRICHT_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_MAASTRICHT_ZERO_EMISSIEZONE"
	NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE LowEmissionZoneExemptions = "NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE"
	NL_NIJMEGEN_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_NIJMEGEN_ZERO_EMISSIEZONE"
	NL_RIJSWIJK_MILIEUZONE LowEmissionZoneExemptions = "NL_RIJSWIJK_MILIEUZONE"
	NL_ROTTERDAM_MILIEUZONE LowEmissionZoneExemptions = "NL_ROTTERDAM_MILIEUZONE"
	NL_ROTTERDAM_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_ROTTERDAM_ZERO_EMISSIEZONE"
	NL_S_GRAVENDIJKWAL_MILIEUZONE LowEmissionZoneExemptions = "NL_S_GRAVENDIJKWAL_MILIEUZONE"
	NL_S_HERTOGENBOSCH_MILIEUZONE LowEmissionZoneExemptions = "NL_S_HERTOGENBOSCH_MILIEUZONE"
	NL_TILBURG_MILIEUZONE LowEmissionZoneExemptions = "NL_TILBURG_MILIEUZONE"
	NL_TILBURG_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_TILBURG_ZERO_EMISSIEZONE"
	NL_UTRECHT_MILIEUZONE LowEmissionZoneExemptions = "NL_UTRECHT_MILIEUZONE"
	NL_UTRECHT_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_UTRECHT_ZERO_EMISSIEZONE"
	NL_ZWOLLE_ZERO_EMISSIEZONE LowEmissionZoneExemptions = "NL_ZWOLLE_ZERO_EMISSIEZONE"
)

// All allowed values of LowEmissionZoneExemptions enum
var AllowedLowEmissionZoneExemptionsEnumValues = []LowEmissionZoneExemptions{
	"BE_LAGE_EMISSIEZONE_ANTWERPEN",
	"BE_LAGE_EMISSIEZONE_GENT",
	"BE_ZONE_BASSE_EMISSION_BRUXELLES",
	"DK_AALBORG_MILJOZONE",
	"DK_ARHUS_MILJOZONE",
	"DK_FREDERIKSBERG_MILJOZONE",
	"DK_KOBENHAVN_MILJOZONE",
	"DK_ODENSE_MILJOZONE",
	"ES_ZBE_ALMERIA",
	"ES_ZBE_BILBAO",
	"ES_ZBE_CORDOBA",
	"ES_ZBE_SAN_SEBASTIAN",
	"ES_ZBE_TORREMOLINOS",
	"ES_ZBE_VALLADOLID",
	"FR_STRASBOURG_ZFE",
	"GB_ABERDEEN_LEZ",
	"GB_BATH_CAZ",
	"GB_BIRMINGHAM_CAZ",
	"GB_BRADFORD_CAZ",
	"GB_BRISTOL_CAZ",
	"GB_DUNDEE_LEZ",
	"GB_EDINBURGH_LEZ",
	"GB_GLASGOW_LEZ",
	"GB_LONDON_ULTRA_LOW_EMISSION_ZONE",
	"GB_NEWCASTLE_CAZ",
	"GB_PORTSMOUTH_CAZ",
	"GB_SHEFFIELD_CAZ",
	"IT_MILANO_AREA_C",
	"IT_PALERMO_ZTL",
	"NL_AMSTERDAM_MILIEUZONE",
	"NL_AMSTERDAM_ZERO_EMISSIEZONE",
	"NL_ARNHEM_MILIEUZONE",
	"NL_ASSEN_ZERO_EMISSIEZONE",
	"NL_BREDA_MILIEUZONE",
	"NL_DELFT_HAAG_ZERO_EMISSIEZONE",
	"NL_DELFT_MILIEUZONE",
	"NL_DEN_HAAG_MILIEUZONE",
	"NL_DEN_HAAG_ZERO_EMISSIEZONE",
	"NL_EINDHOVEN_MILIEUZONE",
	"NL_EINDHOVEN_ZERO_EMISSIEZONE",
	"NL_GOUDA_ZERO_EMISSIEZONE",
	"NL_HAARLEM_MILIEUZONE",
	"NL_LEIDEN_MILIEUZONE",
	"NL_LEIDEN_ZERO_EMISSIEZONE",
	"NL_MAASTRICHT_MILIEUZONE",
	"NL_MAASTRICHT_ZERO_EMISSIEZONE",
	"NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE",
	"NL_NIJMEGEN_ZERO_EMISSIEZONE",
	"NL_RIJSWIJK_MILIEUZONE",
	"NL_ROTTERDAM_MILIEUZONE",
	"NL_ROTTERDAM_ZERO_EMISSIEZONE",
	"NL_S_GRAVENDIJKWAL_MILIEUZONE",
	"NL_S_HERTOGENBOSCH_MILIEUZONE",
	"NL_TILBURG_MILIEUZONE",
	"NL_TILBURG_ZERO_EMISSIEZONE",
	"NL_UTRECHT_MILIEUZONE",
	"NL_UTRECHT_ZERO_EMISSIEZONE",
	"NL_ZWOLLE_ZERO_EMISSIEZONE",
}

func (v *LowEmissionZoneExemptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LowEmissionZoneExemptions(value)
	for _, existing := range AllowedLowEmissionZoneExemptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LowEmissionZoneExemptions", value)
}

// NewLowEmissionZoneExemptionsFromValue returns a pointer to a valid LowEmissionZoneExemptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLowEmissionZoneExemptionsFromValue(v string) (*LowEmissionZoneExemptions, error) {
	ev := LowEmissionZoneExemptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LowEmissionZoneExemptions: valid values are %v", v, AllowedLowEmissionZoneExemptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LowEmissionZoneExemptions) IsValid() bool {
	for _, existing := range AllowedLowEmissionZoneExemptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LowEmissionZoneExemptions value
func (v LowEmissionZoneExemptions) Ptr() *LowEmissionZoneExemptions {
	return &v
}

type NullableLowEmissionZoneExemptions struct {
	value *LowEmissionZoneExemptions
	isSet bool
}

func (v NullableLowEmissionZoneExemptions) Get() *LowEmissionZoneExemptions {
	return v.value
}

func (v *NullableLowEmissionZoneExemptions) Set(val *LowEmissionZoneExemptions) {
	v.value = val
	v.isSet = true
}

func (v NullableLowEmissionZoneExemptions) IsSet() bool {
	return v.isSet
}

func (v *NullableLowEmissionZoneExemptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLowEmissionZoneExemptions(val *LowEmissionZoneExemptions) *NullableLowEmissionZoneExemptions {
	return &NullableLowEmissionZoneExemptions{value: val, isSet: true}
}

func (v NullableLowEmissionZoneExemptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLowEmissionZoneExemptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

