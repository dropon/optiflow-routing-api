/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LowEmissionZoneTypes the model 'LowEmissionZoneTypes'
type LowEmissionZoneTypes string

// List of LowEmissionZoneTypes
const (
	DE_GREEN LowEmissionZoneTypes = "DE_GREEN"
	DE_YELLOW LowEmissionZoneTypes = "DE_YELLOW"
	DE_RED LowEmissionZoneTypes = "DE_RED"
	DE_NONE LowEmissionZoneTypes = "DE_NONE"
)

// All allowed values of LowEmissionZoneTypes enum
var AllowedLowEmissionZoneTypesEnumValues = []LowEmissionZoneTypes{
	"DE_GREEN",
	"DE_YELLOW",
	"DE_RED",
	"DE_NONE",
}

func (v *LowEmissionZoneTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LowEmissionZoneTypes(value)
	for _, existing := range AllowedLowEmissionZoneTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LowEmissionZoneTypes", value)
}

// NewLowEmissionZoneTypesFromValue returns a pointer to a valid LowEmissionZoneTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLowEmissionZoneTypesFromValue(v string) (*LowEmissionZoneTypes, error) {
	ev := LowEmissionZoneTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LowEmissionZoneTypes: valid values are %v", v, AllowedLowEmissionZoneTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LowEmissionZoneTypes) IsValid() bool {
	for _, existing := range AllowedLowEmissionZoneTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LowEmissionZoneTypes value
func (v LowEmissionZoneTypes) Ptr() *LowEmissionZoneTypes {
	return &v
}

type NullableLowEmissionZoneTypes struct {
	value *LowEmissionZoneTypes
	isSet bool
}

func (v NullableLowEmissionZoneTypes) Get() *LowEmissionZoneTypes {
	return v.value
}

func (v *NullableLowEmissionZoneTypes) Set(val *LowEmissionZoneTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableLowEmissionZoneTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableLowEmissionZoneTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLowEmissionZoneTypes(val *LowEmissionZoneTypes) *NullableLowEmissionZoneTypes {
	return &NullableLowEmissionZoneTypes{value: val, isSet: true}
}

func (v NullableLowEmissionZoneTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLowEmissionZoneTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

