/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MonetaryCosts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonetaryCosts{}

// MonetaryCosts Provides an overview of the costs of the route.   Requires the result _MONETARY_COSTS_ to be requested.
type MonetaryCosts struct {
	// The currency code according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency string `json:"currency" validate:"regexp=[A-Z]{3}"`
	// The total monetary cost of the route.
	TotalCost float64 `json:"totalCost"`
	// The distance cost based on the **monetaryCostOptions[costPerKilometer]** and the driving distance.
	DistanceCost float64 `json:"distanceCost"`
	// The working time cost based on **monetaryCostOptions[costPerWorkingHour]** and the driving time. Break, service and rest times are not considered.
	WorkingTimeCost float64 `json:"workingTimeCost"`
	// The energy cost based on the vehicle's consumption and the corresponding cost parameters.
	EnergyCost float64 `json:"energyCost"`
	// The toll cost based on the route and the vehicle.   Toll prices do not include VAT. 
	TollCost float64 `json:"tollCost"`
}

type _MonetaryCosts MonetaryCosts

// NewMonetaryCosts instantiates a new MonetaryCosts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonetaryCosts(currency string, totalCost float64, distanceCost float64, workingTimeCost float64, energyCost float64, tollCost float64) *MonetaryCosts {
	this := MonetaryCosts{}
	this.Currency = currency
	this.TotalCost = totalCost
	this.DistanceCost = distanceCost
	this.WorkingTimeCost = workingTimeCost
	this.EnergyCost = energyCost
	this.TollCost = tollCost
	return &this
}

// NewMonetaryCostsWithDefaults instantiates a new MonetaryCosts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonetaryCostsWithDefaults() *MonetaryCosts {
	this := MonetaryCosts{}
	return &this
}

// GetCurrency returns the Currency field value
func (o *MonetaryCosts) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *MonetaryCosts) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *MonetaryCosts) SetCurrency(v string) {
	o.Currency = v
}

// GetTotalCost returns the TotalCost field value
func (o *MonetaryCosts) GetTotalCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value
// and a boolean to check if the value has been set.
func (o *MonetaryCosts) GetTotalCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCost, true
}

// SetTotalCost sets field value
func (o *MonetaryCosts) SetTotalCost(v float64) {
	o.TotalCost = v
}

// GetDistanceCost returns the DistanceCost field value
func (o *MonetaryCosts) GetDistanceCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DistanceCost
}

// GetDistanceCostOk returns a tuple with the DistanceCost field value
// and a boolean to check if the value has been set.
func (o *MonetaryCosts) GetDistanceCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DistanceCost, true
}

// SetDistanceCost sets field value
func (o *MonetaryCosts) SetDistanceCost(v float64) {
	o.DistanceCost = v
}

// GetWorkingTimeCost returns the WorkingTimeCost field value
func (o *MonetaryCosts) GetWorkingTimeCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.WorkingTimeCost
}

// GetWorkingTimeCostOk returns a tuple with the WorkingTimeCost field value
// and a boolean to check if the value has been set.
func (o *MonetaryCosts) GetWorkingTimeCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkingTimeCost, true
}

// SetWorkingTimeCost sets field value
func (o *MonetaryCosts) SetWorkingTimeCost(v float64) {
	o.WorkingTimeCost = v
}

// GetEnergyCost returns the EnergyCost field value
func (o *MonetaryCosts) GetEnergyCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.EnergyCost
}

// GetEnergyCostOk returns a tuple with the EnergyCost field value
// and a boolean to check if the value has been set.
func (o *MonetaryCosts) GetEnergyCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnergyCost, true
}

// SetEnergyCost sets field value
func (o *MonetaryCosts) SetEnergyCost(v float64) {
	o.EnergyCost = v
}

// GetTollCost returns the TollCost field value
func (o *MonetaryCosts) GetTollCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TollCost
}

// GetTollCostOk returns a tuple with the TollCost field value
// and a boolean to check if the value has been set.
func (o *MonetaryCosts) GetTollCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TollCost, true
}

// SetTollCost sets field value
func (o *MonetaryCosts) SetTollCost(v float64) {
	o.TollCost = v
}

func (o MonetaryCosts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonetaryCosts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currency"] = o.Currency
	toSerialize["totalCost"] = o.TotalCost
	toSerialize["distanceCost"] = o.DistanceCost
	toSerialize["workingTimeCost"] = o.WorkingTimeCost
	toSerialize["energyCost"] = o.EnergyCost
	toSerialize["tollCost"] = o.TollCost
	return toSerialize, nil
}

func (o *MonetaryCosts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currency",
		"totalCost",
		"distanceCost",
		"workingTimeCost",
		"energyCost",
		"tollCost",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMonetaryCosts := _MonetaryCosts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMonetaryCosts)

	if err != nil {
		return err
	}

	*o = MonetaryCosts(varMonetaryCosts)

	return err
}

type NullableMonetaryCosts struct {
	value *MonetaryCosts
	isSet bool
}

func (v NullableMonetaryCosts) Get() *MonetaryCosts {
	return v.value
}

func (v *NullableMonetaryCosts) Set(val *MonetaryCosts) {
	v.value = val
	v.isSet = true
}

func (v NullableMonetaryCosts) IsSet() bool {
	return v.isSet
}

func (v *NullableMonetaryCosts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonetaryCosts(val *MonetaryCosts) *NullableMonetaryCosts {
	return &NullableMonetaryCosts{value: val, isSet: true}
}

func (v NullableMonetaryCosts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonetaryCosts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


