/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnRoadWaypoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnRoadWaypoint{}

// OnRoadWaypoint An _on-road waypoint_ will be matched to the nearest possible road. The air-line connection between given and matched coordinates is not included in the route polyline, distance and duration.
type OnRoadWaypoint struct {
	// The latitude value in degrees (WGS84/EPSG:4326) from south to north.
	Latitude float64 `json:"latitude"`
	// The longitude value in degrees (WGS84/EPSG:4326) from west to east.
	Longitude float64 `json:"longitude"`
	// Specifies that this waypoint will be reached at the side of street on which it is located. This is useful to prevent the driver from crossing the street to actually reach the location represented by this waypoint.
	MatchSideOfStreet *bool `json:"matchSideOfStreet,omitempty"`
	// The service time [s] that is required at this waypoint, e.g. for pickup or delivery.
	ServiceTime *int32 `json:"serviceTime,omitempty"`
	// If true, the service time can be used for a break or rest. This parameter will be ignored, if **serviceTime** is 0 or if no **driver** is specified.
	UseServiceTimeForRecreation *bool `json:"useServiceTimeForRecreation,omitempty"`
	// The opening intervals at this waypoint, each specified by two points in time - the beginning and the end of the interval. Leaving this parameter empty means that the waypoint is always open. Service can only start within one of the opening intervals. If the vehicle does not arrive at a waypoint within an opening interval, a waiting time will be scheduled.  When using a multi-day **workingHoursPreset** this waiting time will usually be used for daily rests instead, in order to continue the route with a rested driver.
	OpeningIntervals []TimeInterval `json:"openingIntervals,omitempty"`
	VehicleParameters *VehicleParametersAtWaypoint `json:"vehicleParameters,omitempty"`
	EvParameters *EvParametersAtWaypoint `json:"evParameters,omitempty"`
}

type _OnRoadWaypoint OnRoadWaypoint

// NewOnRoadWaypoint instantiates a new OnRoadWaypoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnRoadWaypoint(latitude float64, longitude float64) *OnRoadWaypoint {
	this := OnRoadWaypoint{}
	this.Latitude = latitude
	this.Longitude = longitude
	var matchSideOfStreet bool = false
	this.MatchSideOfStreet = &matchSideOfStreet
	var serviceTime int32 = 0
	this.ServiceTime = &serviceTime
	var useServiceTimeForRecreation bool = false
	this.UseServiceTimeForRecreation = &useServiceTimeForRecreation
	return &this
}

// NewOnRoadWaypointWithDefaults instantiates a new OnRoadWaypoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnRoadWaypointWithDefaults() *OnRoadWaypoint {
	this := OnRoadWaypoint{}
	var matchSideOfStreet bool = false
	this.MatchSideOfStreet = &matchSideOfStreet
	var serviceTime int32 = 0
	this.ServiceTime = &serviceTime
	var useServiceTimeForRecreation bool = false
	this.UseServiceTimeForRecreation = &useServiceTimeForRecreation
	return &this
}

// GetLatitude returns the Latitude field value
func (o *OnRoadWaypoint) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *OnRoadWaypoint) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *OnRoadWaypoint) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *OnRoadWaypoint) SetLongitude(v float64) {
	o.Longitude = v
}

// GetMatchSideOfStreet returns the MatchSideOfStreet field value if set, zero value otherwise.
func (o *OnRoadWaypoint) GetMatchSideOfStreet() bool {
	if o == nil || IsNil(o.MatchSideOfStreet) {
		var ret bool
		return ret
	}
	return *o.MatchSideOfStreet
}

// GetMatchSideOfStreetOk returns a tuple with the MatchSideOfStreet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetMatchSideOfStreetOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchSideOfStreet) {
		return nil, false
	}
	return o.MatchSideOfStreet, true
}

// HasMatchSideOfStreet returns a boolean if a field has been set.
func (o *OnRoadWaypoint) HasMatchSideOfStreet() bool {
	if o != nil && !IsNil(o.MatchSideOfStreet) {
		return true
	}

	return false
}

// SetMatchSideOfStreet gets a reference to the given bool and assigns it to the MatchSideOfStreet field.
func (o *OnRoadWaypoint) SetMatchSideOfStreet(v bool) {
	o.MatchSideOfStreet = &v
}

// GetServiceTime returns the ServiceTime field value if set, zero value otherwise.
func (o *OnRoadWaypoint) GetServiceTime() int32 {
	if o == nil || IsNil(o.ServiceTime) {
		var ret int32
		return ret
	}
	return *o.ServiceTime
}

// GetServiceTimeOk returns a tuple with the ServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetServiceTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceTime) {
		return nil, false
	}
	return o.ServiceTime, true
}

// HasServiceTime returns a boolean if a field has been set.
func (o *OnRoadWaypoint) HasServiceTime() bool {
	if o != nil && !IsNil(o.ServiceTime) {
		return true
	}

	return false
}

// SetServiceTime gets a reference to the given int32 and assigns it to the ServiceTime field.
func (o *OnRoadWaypoint) SetServiceTime(v int32) {
	o.ServiceTime = &v
}

// GetUseServiceTimeForRecreation returns the UseServiceTimeForRecreation field value if set, zero value otherwise.
func (o *OnRoadWaypoint) GetUseServiceTimeForRecreation() bool {
	if o == nil || IsNil(o.UseServiceTimeForRecreation) {
		var ret bool
		return ret
	}
	return *o.UseServiceTimeForRecreation
}

// GetUseServiceTimeForRecreationOk returns a tuple with the UseServiceTimeForRecreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetUseServiceTimeForRecreationOk() (*bool, bool) {
	if o == nil || IsNil(o.UseServiceTimeForRecreation) {
		return nil, false
	}
	return o.UseServiceTimeForRecreation, true
}

// HasUseServiceTimeForRecreation returns a boolean if a field has been set.
func (o *OnRoadWaypoint) HasUseServiceTimeForRecreation() bool {
	if o != nil && !IsNil(o.UseServiceTimeForRecreation) {
		return true
	}

	return false
}

// SetUseServiceTimeForRecreation gets a reference to the given bool and assigns it to the UseServiceTimeForRecreation field.
func (o *OnRoadWaypoint) SetUseServiceTimeForRecreation(v bool) {
	o.UseServiceTimeForRecreation = &v
}

// GetOpeningIntervals returns the OpeningIntervals field value if set, zero value otherwise.
func (o *OnRoadWaypoint) GetOpeningIntervals() []TimeInterval {
	if o == nil || IsNil(o.OpeningIntervals) {
		var ret []TimeInterval
		return ret
	}
	return o.OpeningIntervals
}

// GetOpeningIntervalsOk returns a tuple with the OpeningIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetOpeningIntervalsOk() ([]TimeInterval, bool) {
	if o == nil || IsNil(o.OpeningIntervals) {
		return nil, false
	}
	return o.OpeningIntervals, true
}

// HasOpeningIntervals returns a boolean if a field has been set.
func (o *OnRoadWaypoint) HasOpeningIntervals() bool {
	if o != nil && !IsNil(o.OpeningIntervals) {
		return true
	}

	return false
}

// SetOpeningIntervals gets a reference to the given []TimeInterval and assigns it to the OpeningIntervals field.
func (o *OnRoadWaypoint) SetOpeningIntervals(v []TimeInterval) {
	o.OpeningIntervals = v
}

// GetVehicleParameters returns the VehicleParameters field value if set, zero value otherwise.
func (o *OnRoadWaypoint) GetVehicleParameters() VehicleParametersAtWaypoint {
	if o == nil || IsNil(o.VehicleParameters) {
		var ret VehicleParametersAtWaypoint
		return ret
	}
	return *o.VehicleParameters
}

// GetVehicleParametersOk returns a tuple with the VehicleParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetVehicleParametersOk() (*VehicleParametersAtWaypoint, bool) {
	if o == nil || IsNil(o.VehicleParameters) {
		return nil, false
	}
	return o.VehicleParameters, true
}

// HasVehicleParameters returns a boolean if a field has been set.
func (o *OnRoadWaypoint) HasVehicleParameters() bool {
	if o != nil && !IsNil(o.VehicleParameters) {
		return true
	}

	return false
}

// SetVehicleParameters gets a reference to the given VehicleParametersAtWaypoint and assigns it to the VehicleParameters field.
func (o *OnRoadWaypoint) SetVehicleParameters(v VehicleParametersAtWaypoint) {
	o.VehicleParameters = &v
}

// GetEvParameters returns the EvParameters field value if set, zero value otherwise.
func (o *OnRoadWaypoint) GetEvParameters() EvParametersAtWaypoint {
	if o == nil || IsNil(o.EvParameters) {
		var ret EvParametersAtWaypoint
		return ret
	}
	return *o.EvParameters
}

// GetEvParametersOk returns a tuple with the EvParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnRoadWaypoint) GetEvParametersOk() (*EvParametersAtWaypoint, bool) {
	if o == nil || IsNil(o.EvParameters) {
		return nil, false
	}
	return o.EvParameters, true
}

// HasEvParameters returns a boolean if a field has been set.
func (o *OnRoadWaypoint) HasEvParameters() bool {
	if o != nil && !IsNil(o.EvParameters) {
		return true
	}

	return false
}

// SetEvParameters gets a reference to the given EvParametersAtWaypoint and assigns it to the EvParameters field.
func (o *OnRoadWaypoint) SetEvParameters(v EvParametersAtWaypoint) {
	o.EvParameters = &v
}

func (o OnRoadWaypoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnRoadWaypoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	if !IsNil(o.MatchSideOfStreet) {
		toSerialize["matchSideOfStreet"] = o.MatchSideOfStreet
	}
	if !IsNil(o.ServiceTime) {
		toSerialize["serviceTime"] = o.ServiceTime
	}
	if !IsNil(o.UseServiceTimeForRecreation) {
		toSerialize["useServiceTimeForRecreation"] = o.UseServiceTimeForRecreation
	}
	if !IsNil(o.OpeningIntervals) {
		toSerialize["openingIntervals"] = o.OpeningIntervals
	}
	if !IsNil(o.VehicleParameters) {
		toSerialize["vehicleParameters"] = o.VehicleParameters
	}
	if !IsNil(o.EvParameters) {
		toSerialize["evParameters"] = o.EvParameters
	}
	return toSerialize, nil
}

func (o *OnRoadWaypoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnRoadWaypoint := _OnRoadWaypoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnRoadWaypoint)

	if err != nil {
		return err
	}

	*o = OnRoadWaypoint(varOnRoadWaypoint)

	return err
}

type NullableOnRoadWaypoint struct {
	value *OnRoadWaypoint
	isSet bool
}

func (v NullableOnRoadWaypoint) Get() *OnRoadWaypoint {
	return v.value
}

func (v *NullableOnRoadWaypoint) Set(val *OnRoadWaypoint) {
	v.value = val
	v.isSet = true
}

func (v NullableOnRoadWaypoint) IsSet() bool {
	return v.isSet
}

func (v *NullableOnRoadWaypoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnRoadWaypoint(val *OnRoadWaypoint) *NullableOnRoadWaypoint {
	return &NullableOnRoadWaypoint{value: val, isSet: true}
}

func (v NullableOnRoadWaypoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnRoadWaypoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


