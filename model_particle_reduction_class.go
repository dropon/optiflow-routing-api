/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ParticleReductionClass The particle reduction class (Partikelminderungsklasse) according to 'Anlage XIV zu &sect; 48 StVZO' (German law). This value is present for compatibility reasons and does not influence any of the results.  Supported for **engineType** _COMBUSTION_ and _HYBRID_. 
type ParticleReductionClass string

// List of ParticleReductionClass
const (
	PMK_0 ParticleReductionClass = "PMK_0"
	PMK_1 ParticleReductionClass = "PMK_1"
	PMK_2 ParticleReductionClass = "PMK_2"
	PMK_3 ParticleReductionClass = "PMK_3"
	PMK_4 ParticleReductionClass = "PMK_4"
	NONE ParticleReductionClass = "NONE"
)

// All allowed values of ParticleReductionClass enum
var AllowedParticleReductionClassEnumValues = []ParticleReductionClass{
	"PMK_0",
	"PMK_1",
	"PMK_2",
	"PMK_3",
	"PMK_4",
	"NONE",
}

func (v *ParticleReductionClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ParticleReductionClass(value)
	for _, existing := range AllowedParticleReductionClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ParticleReductionClass", value)
}

// NewParticleReductionClassFromValue returns a pointer to a valid ParticleReductionClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewParticleReductionClassFromValue(v string) (*ParticleReductionClass, error) {
	ev := ParticleReductionClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ParticleReductionClass: valid values are %v", v, AllowedParticleReductionClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ParticleReductionClass) IsValid() bool {
	for _, existing := range AllowedParticleReductionClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ParticleReductionClass value
func (v ParticleReductionClass) Ptr() *ParticleReductionClass {
	return &v
}

type NullableParticleReductionClass struct {
	value *ParticleReductionClass
	isSet bool
}

func (v NullableParticleReductionClass) Get() *ParticleReductionClass {
	return v.value
}

func (v *NullableParticleReductionClass) Set(val *ParticleReductionClass) {
	v.value = val
	v.isSet = true
}

func (v NullableParticleReductionClass) IsSet() bool {
	return v.isSet
}

func (v *NullableParticleReductionClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticleReductionClass(val *ParticleReductionClass) *NullableParticleReductionClass {
	return &NullableParticleReductionClass{value: val, isSet: true}
}

func (v NullableParticleReductionClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticleReductionClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

