/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// PaymentMethod A payment method for toll costs.    * `ELECTRONIC_TOLL_COLLECTION_SUBSCRIPTION` - Pay with an electronic toll collection system for which a subscription is required.    * `ELECTRONIC_TOLL_COLLECTION` - Pay with some electronic toll collection system for which no prior subscription is required.    * `CASH` - Pay with cash at a toll booth.    * `CREDIT_CARD` - Pay with credit card at a toll booth.
type PaymentMethod string

// List of PaymentMethod
const (
	ELECTRONIC_TOLL_COLLECTION_SUBSCRIPTION PaymentMethod = "ELECTRONIC_TOLL_COLLECTION_SUBSCRIPTION"
	ELECTRONIC_TOLL_COLLECTION PaymentMethod = "ELECTRONIC_TOLL_COLLECTION"
	CASH PaymentMethod = "CASH"
	CREDIT_CARD PaymentMethod = "CREDIT_CARD"
)

// All allowed values of PaymentMethod enum
var AllowedPaymentMethodEnumValues = []PaymentMethod{
	"ELECTRONIC_TOLL_COLLECTION_SUBSCRIPTION",
	"ELECTRONIC_TOLL_COLLECTION",
	"CASH",
	"CREDIT_CARD",
}

func (v *PaymentMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentMethod(value)
	for _, existing := range AllowedPaymentMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentMethod", value)
}

// NewPaymentMethodFromValue returns a pointer to a valid PaymentMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentMethodFromValue(v string) (*PaymentMethod, error) {
	ev := PaymentMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentMethod: valid values are %v", v, AllowedPaymentMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentMethod) IsValid() bool {
	for _, existing := range AllowedPaymentMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentMethod value
func (v PaymentMethod) Ptr() *PaymentMethod {
	return &v
}

type NullablePaymentMethod struct {
	value *PaymentMethod
	isSet bool
}

func (v NullablePaymentMethod) Get() *PaymentMethod {
	return v.value
}

func (v *NullablePaymentMethod) Set(val *PaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethod(val *PaymentMethod) *NullablePaymentMethod {
	return &NullablePaymentMethod{value: val, isSet: true}
}

func (v NullablePaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

