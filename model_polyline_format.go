/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PolylineFormat Defines the format for polylines in the response.    * `GEO_JSON` - Polylines are returned in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.    * `GOOGLE_ENCODED_POLYLINE` - Polylines are returned in [Google's Encoded Polyline](https://developers.google.com/maps/documentation/utilities/polylinealgorithm) format.  
type PolylineFormat string

// List of PolylineFormat
const (
	GEO_JSON PolylineFormat = "GEO_JSON"
	GOOGLE_ENCODED_POLYLINE PolylineFormat = "GOOGLE_ENCODED_POLYLINE"
)

// All allowed values of PolylineFormat enum
var AllowedPolylineFormatEnumValues = []PolylineFormat{
	"GEO_JSON",
	"GOOGLE_ENCODED_POLYLINE",
}

func (v *PolylineFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PolylineFormat(value)
	for _, existing := range AllowedPolylineFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PolylineFormat", value)
}

// NewPolylineFormatFromValue returns a pointer to a valid PolylineFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolylineFormatFromValue(v string) (*PolylineFormat, error) {
	ev := PolylineFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PolylineFormat: valid values are %v", v, AllowedPolylineFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolylineFormat) IsValid() bool {
	for _, existing := range AllowedPolylineFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PolylineFormat value
func (v PolylineFormat) Ptr() *PolylineFormat {
	return &v
}

type NullablePolylineFormat struct {
	value *PolylineFormat
	isSet bool
}

func (v NullablePolylineFormat) Get() *PolylineFormat {
	return v.value
}

func (v *NullablePolylineFormat) Set(val *PolylineFormat) {
	v.value = val
	v.isSet = true
}

func (v NullablePolylineFormat) IsSet() bool {
	return v.isSet
}

func (v *NullablePolylineFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolylineFormat(val *PolylineFormat) *NullablePolylineFormat {
	return &NullablePolylineFormat{value: val, isSet: true}
}

func (v NullablePolylineFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolylineFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

