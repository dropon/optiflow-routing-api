/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PositionAtWaypoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionAtWaypoint{}

// PositionAtWaypoint The vehicle position if it is at a waypoint. This parameter is mutually exclusive with **position**.
type PositionAtWaypoint struct {
	// The name of the waypoint.
	Name string `json:"name"`
	// The service time [s] which has already been performed.
	PerformedServiceTime *int32 `json:"performedServiceTime,omitempty"`
}

type _PositionAtWaypoint PositionAtWaypoint

// NewPositionAtWaypoint instantiates a new PositionAtWaypoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionAtWaypoint(name string) *PositionAtWaypoint {
	this := PositionAtWaypoint{}
	this.Name = name
	var performedServiceTime int32 = 0
	this.PerformedServiceTime = &performedServiceTime
	return &this
}

// NewPositionAtWaypointWithDefaults instantiates a new PositionAtWaypoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionAtWaypointWithDefaults() *PositionAtWaypoint {
	this := PositionAtWaypoint{}
	var performedServiceTime int32 = 0
	this.PerformedServiceTime = &performedServiceTime
	return &this
}

// GetName returns the Name field value
func (o *PositionAtWaypoint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PositionAtWaypoint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PositionAtWaypoint) SetName(v string) {
	o.Name = v
}

// GetPerformedServiceTime returns the PerformedServiceTime field value if set, zero value otherwise.
func (o *PositionAtWaypoint) GetPerformedServiceTime() int32 {
	if o == nil || IsNil(o.PerformedServiceTime) {
		var ret int32
		return ret
	}
	return *o.PerformedServiceTime
}

// GetPerformedServiceTimeOk returns a tuple with the PerformedServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionAtWaypoint) GetPerformedServiceTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.PerformedServiceTime) {
		return nil, false
	}
	return o.PerformedServiceTime, true
}

// HasPerformedServiceTime returns a boolean if a field has been set.
func (o *PositionAtWaypoint) HasPerformedServiceTime() bool {
	if o != nil && !IsNil(o.PerformedServiceTime) {
		return true
	}

	return false
}

// SetPerformedServiceTime gets a reference to the given int32 and assigns it to the PerformedServiceTime field.
func (o *PositionAtWaypoint) SetPerformedServiceTime(v int32) {
	o.PerformedServiceTime = &v
}

func (o PositionAtWaypoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionAtWaypoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.PerformedServiceTime) {
		toSerialize["performedServiceTime"] = o.PerformedServiceTime
	}
	return toSerialize, nil
}

func (o *PositionAtWaypoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPositionAtWaypoint := _PositionAtWaypoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPositionAtWaypoint)

	if err != nil {
		return err
	}

	*o = PositionAtWaypoint(varPositionAtWaypoint)

	return err
}

type NullablePositionAtWaypoint struct {
	value *PositionAtWaypoint
	isSet bool
}

func (v NullablePositionAtWaypoint) Get() *PositionAtWaypoint {
	return v.value
}

func (v *NullablePositionAtWaypoint) Set(val *PositionAtWaypoint) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionAtWaypoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionAtWaypoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionAtWaypoint(val *PositionAtWaypoint) *NullablePositionAtWaypoint {
	return &NullablePositionAtWaypoint{value: val, isSet: true}
}

func (v NullablePositionAtWaypoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionAtWaypoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


