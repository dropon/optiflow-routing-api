/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PositionOnRoute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PositionOnRoute{}

// PositionOnRoute The position of the vehicle if the vehicle position is not at a waypoint but somewhere on the route. This parameter is mutually exclusive with **waypoint**.
type PositionOnRoute struct {
	// The latitude value in degrees (WGS84/EPSG:4326) from south to north.
	Latitude float64 `json:"latitude"`
	// The longitude value in degrees (WGS84/EPSG:4326) from west to east.
	Longitude float64 `json:"longitude"`
	// The name of the next waypoint on the route.
	NextWaypointName string `json:"nextWaypointName"`
	// The current heading of the vehicle [deg]. It denotes the driving direction, North represents 0 degrees, East represents 90 degrees, South represents 180 degrees, West represents 270 degrees.  If specified and if the heading of the vehicle is not in the direction of the route near the given **position**, it is assumed that the vehicle has left the route so that a new route will be calculated. This new route will then be  calculated from the road closest to the position matching the vehicle heading. For more information see this [concept](./concepts/estimated-time-arrival).
	Heading *int32 `json:"heading,omitempty"`
	// Denotes the tolerance between **heading** and the direction of a road, i.e. roads with a direction of **heading**Â±**headingTolerance** are taken into account. Applies only if **heading** is specified.
	HeadingTolerance *int32 `json:"headingTolerance,omitempty"`
}

type _PositionOnRoute PositionOnRoute

// NewPositionOnRoute instantiates a new PositionOnRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionOnRoute(latitude float64, longitude float64, nextWaypointName string) *PositionOnRoute {
	this := PositionOnRoute{}
	this.Latitude = latitude
	this.Longitude = longitude
	this.NextWaypointName = nextWaypointName
	var headingTolerance int32 = 45
	this.HeadingTolerance = &headingTolerance
	return &this
}

// NewPositionOnRouteWithDefaults instantiates a new PositionOnRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionOnRouteWithDefaults() *PositionOnRoute {
	this := PositionOnRoute{}
	var headingTolerance int32 = 45
	this.HeadingTolerance = &headingTolerance
	return &this
}

// GetLatitude returns the Latitude field value
func (o *PositionOnRoute) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *PositionOnRoute) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *PositionOnRoute) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *PositionOnRoute) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *PositionOnRoute) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *PositionOnRoute) SetLongitude(v float64) {
	o.Longitude = v
}

// GetNextWaypointName returns the NextWaypointName field value
func (o *PositionOnRoute) GetNextWaypointName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextWaypointName
}

// GetNextWaypointNameOk returns a tuple with the NextWaypointName field value
// and a boolean to check if the value has been set.
func (o *PositionOnRoute) GetNextWaypointNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextWaypointName, true
}

// SetNextWaypointName sets field value
func (o *PositionOnRoute) SetNextWaypointName(v string) {
	o.NextWaypointName = v
}

// GetHeading returns the Heading field value if set, zero value otherwise.
func (o *PositionOnRoute) GetHeading() int32 {
	if o == nil || IsNil(o.Heading) {
		var ret int32
		return ret
	}
	return *o.Heading
}

// GetHeadingOk returns a tuple with the Heading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionOnRoute) GetHeadingOk() (*int32, bool) {
	if o == nil || IsNil(o.Heading) {
		return nil, false
	}
	return o.Heading, true
}

// HasHeading returns a boolean if a field has been set.
func (o *PositionOnRoute) HasHeading() bool {
	if o != nil && !IsNil(o.Heading) {
		return true
	}

	return false
}

// SetHeading gets a reference to the given int32 and assigns it to the Heading field.
func (o *PositionOnRoute) SetHeading(v int32) {
	o.Heading = &v
}

// GetHeadingTolerance returns the HeadingTolerance field value if set, zero value otherwise.
func (o *PositionOnRoute) GetHeadingTolerance() int32 {
	if o == nil || IsNil(o.HeadingTolerance) {
		var ret int32
		return ret
	}
	return *o.HeadingTolerance
}

// GetHeadingToleranceOk returns a tuple with the HeadingTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionOnRoute) GetHeadingToleranceOk() (*int32, bool) {
	if o == nil || IsNil(o.HeadingTolerance) {
		return nil, false
	}
	return o.HeadingTolerance, true
}

// HasHeadingTolerance returns a boolean if a field has been set.
func (o *PositionOnRoute) HasHeadingTolerance() bool {
	if o != nil && !IsNil(o.HeadingTolerance) {
		return true
	}

	return false
}

// SetHeadingTolerance gets a reference to the given int32 and assigns it to the HeadingTolerance field.
func (o *PositionOnRoute) SetHeadingTolerance(v int32) {
	o.HeadingTolerance = &v
}

func (o PositionOnRoute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PositionOnRoute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	toSerialize["nextWaypointName"] = o.NextWaypointName
	if !IsNil(o.Heading) {
		toSerialize["heading"] = o.Heading
	}
	if !IsNil(o.HeadingTolerance) {
		toSerialize["headingTolerance"] = o.HeadingTolerance
	}
	return toSerialize, nil
}

func (o *PositionOnRoute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
		"nextWaypointName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPositionOnRoute := _PositionOnRoute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPositionOnRoute)

	if err != nil {
		return err
	}

	*o = PositionOnRoute(varPositionOnRoute)

	return err
}

type NullablePositionOnRoute struct {
	value *PositionOnRoute
	isSet bool
}

func (v NullablePositionOnRoute) Get() *PositionOnRoute {
	return v.value
}

func (v *NullablePositionOnRoute) Set(val *PositionOnRoute) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionOnRoute) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionOnRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionOnRoute(val *PositionOnRoute) *NullablePositionOnRoute {
	return &NullablePositionOnRoute{value: val, isSet: true}
}

func (v NullablePositionOnRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionOnRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


