/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
)

// checks if the ReachableAreasResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachableAreasResponse{}

// ReachableAreasResponse struct for ReachableAreasResponse
type ReachableAreasResponse struct {
	Status *CalculationStatus `json:"status,omitempty"`
	ReachableAreas *ReachableAreas `json:"reachableAreas,omitempty"`
	Error *ErrorResponse `json:"error,omitempty"`
}

// NewReachableAreasResponse instantiates a new ReachableAreasResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachableAreasResponse() *ReachableAreasResponse {
	this := ReachableAreasResponse{}
	return &this
}

// NewReachableAreasResponseWithDefaults instantiates a new ReachableAreasResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachableAreasResponseWithDefaults() *ReachableAreasResponse {
	this := ReachableAreasResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReachableAreasResponse) GetStatus() CalculationStatus {
	if o == nil || IsNil(o.Status) {
		var ret CalculationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableAreasResponse) GetStatusOk() (*CalculationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReachableAreasResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CalculationStatus and assigns it to the Status field.
func (o *ReachableAreasResponse) SetStatus(v CalculationStatus) {
	o.Status = &v
}

// GetReachableAreas returns the ReachableAreas field value if set, zero value otherwise.
func (o *ReachableAreasResponse) GetReachableAreas() ReachableAreas {
	if o == nil || IsNil(o.ReachableAreas) {
		var ret ReachableAreas
		return ret
	}
	return *o.ReachableAreas
}

// GetReachableAreasOk returns a tuple with the ReachableAreas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableAreasResponse) GetReachableAreasOk() (*ReachableAreas, bool) {
	if o == nil || IsNil(o.ReachableAreas) {
		return nil, false
	}
	return o.ReachableAreas, true
}

// HasReachableAreas returns a boolean if a field has been set.
func (o *ReachableAreasResponse) HasReachableAreas() bool {
	if o != nil && !IsNil(o.ReachableAreas) {
		return true
	}

	return false
}

// SetReachableAreas gets a reference to the given ReachableAreas and assigns it to the ReachableAreas field.
func (o *ReachableAreasResponse) SetReachableAreas(v ReachableAreas) {
	o.ReachableAreas = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ReachableAreasResponse) GetError() ErrorResponse {
	if o == nil || IsNil(o.Error) {
		var ret ErrorResponse
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableAreasResponse) GetErrorOk() (*ErrorResponse, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ReachableAreasResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorResponse and assigns it to the Error field.
func (o *ReachableAreasResponse) SetError(v ErrorResponse) {
	o.Error = &v
}

func (o ReachableAreasResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachableAreasResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ReachableAreas) {
		toSerialize["reachableAreas"] = o.ReachableAreas
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableReachableAreasResponse struct {
	value *ReachableAreasResponse
	isSet bool
}

func (v NullableReachableAreasResponse) Get() *ReachableAreasResponse {
	return v.value
}

func (v *NullableReachableAreasResponse) Set(val *ReachableAreasResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReachableAreasResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReachableAreasResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachableAreasResponse(val *ReachableAreasResponse) *NullableReachableAreasResponse {
	return &NullableReachableAreasResponse{value: val, isSet: true}
}

func (v NullableReachableAreasResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachableAreasResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


