/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReachableLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachableLocation{}

// ReachableLocation Contains the distance and travel time from the input waypoint or route to a reached location or vice versa (depending on the request drivingDirection).
type ReachableLocation struct {
	// The distance from the input waypoint to this location or vice versa.
	Distance *int32 `json:"distance,omitempty"`
	// The travel time from the input waypoint to this location or vice versa.
	TravelTime *int32 `json:"travelTime,omitempty"`
	// The index of the reached input location.
	Index *int32 `json:"index,omitempty"`
}

// NewReachableLocation instantiates a new ReachableLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachableLocation() *ReachableLocation {
	this := ReachableLocation{}
	return &this
}

// NewReachableLocationWithDefaults instantiates a new ReachableLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachableLocationWithDefaults() *ReachableLocation {
	this := ReachableLocation{}
	return &this
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *ReachableLocation) GetDistance() int32 {
	if o == nil || IsNil(o.Distance) {
		var ret int32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocation) GetDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *ReachableLocation) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int32 and assigns it to the Distance field.
func (o *ReachableLocation) SetDistance(v int32) {
	o.Distance = &v
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise.
func (o *ReachableLocation) GetTravelTime() int32 {
	if o == nil || IsNil(o.TravelTime) {
		var ret int32
		return ret
	}
	return *o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocation) GetTravelTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.TravelTime) {
		return nil, false
	}
	return o.TravelTime, true
}

// HasTravelTime returns a boolean if a field has been set.
func (o *ReachableLocation) HasTravelTime() bool {
	if o != nil && !IsNil(o.TravelTime) {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given int32 and assigns it to the TravelTime field.
func (o *ReachableLocation) SetTravelTime(v int32) {
	o.TravelTime = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ReachableLocation) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocation) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ReachableLocation) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ReachableLocation) SetIndex(v int32) {
	o.Index = &v
}

func (o ReachableLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachableLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.TravelTime) {
		toSerialize["travelTime"] = o.TravelTime
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	return toSerialize, nil
}

type NullableReachableLocation struct {
	value *ReachableLocation
	isSet bool
}

func (v NullableReachableLocation) Get() *ReachableLocation {
	return v.value
}

func (v *NullableReachableLocation) Set(val *ReachableLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableReachableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableReachableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachableLocation(val *ReachableLocation) *NullableReachableLocation {
	return &NullableReachableLocation{value: val, isSet: true}
}

func (v NullableReachableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


