/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReachableLocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachableLocations{}

// ReachableLocations The results of a reachable locations calculation.
type ReachableLocations struct {
	// Reachable locations ordered by distance or travel time (depending on the request **horizonType**).
	Reachable []ReachableLocation `json:"reachable,omitempty"`
	// Indexes of the unreachable locations as given in the request locations.
	Unreachable []int32 `json:"unreachable,omitempty"`
	// A list of warnings concerning the validity of the result.
	Warnings []Warning `json:"warnings,omitempty"`
}

// NewReachableLocations instantiates a new ReachableLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachableLocations() *ReachableLocations {
	this := ReachableLocations{}
	return &this
}

// NewReachableLocationsWithDefaults instantiates a new ReachableLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachableLocationsWithDefaults() *ReachableLocations {
	this := ReachableLocations{}
	return &this
}

// GetReachable returns the Reachable field value if set, zero value otherwise.
func (o *ReachableLocations) GetReachable() []ReachableLocation {
	if o == nil || IsNil(o.Reachable) {
		var ret []ReachableLocation
		return ret
	}
	return o.Reachable
}

// GetReachableOk returns a tuple with the Reachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocations) GetReachableOk() ([]ReachableLocation, bool) {
	if o == nil || IsNil(o.Reachable) {
		return nil, false
	}
	return o.Reachable, true
}

// HasReachable returns a boolean if a field has been set.
func (o *ReachableLocations) HasReachable() bool {
	if o != nil && !IsNil(o.Reachable) {
		return true
	}

	return false
}

// SetReachable gets a reference to the given []ReachableLocation and assigns it to the Reachable field.
func (o *ReachableLocations) SetReachable(v []ReachableLocation) {
	o.Reachable = v
}

// GetUnreachable returns the Unreachable field value if set, zero value otherwise.
func (o *ReachableLocations) GetUnreachable() []int32 {
	if o == nil || IsNil(o.Unreachable) {
		var ret []int32
		return ret
	}
	return o.Unreachable
}

// GetUnreachableOk returns a tuple with the Unreachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocations) GetUnreachableOk() ([]int32, bool) {
	if o == nil || IsNil(o.Unreachable) {
		return nil, false
	}
	return o.Unreachable, true
}

// HasUnreachable returns a boolean if a field has been set.
func (o *ReachableLocations) HasUnreachable() bool {
	if o != nil && !IsNil(o.Unreachable) {
		return true
	}

	return false
}

// SetUnreachable gets a reference to the given []int32 and assigns it to the Unreachable field.
func (o *ReachableLocations) SetUnreachable(v []int32) {
	o.Unreachable = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ReachableLocations) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocations) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ReachableLocations) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *ReachableLocations) SetWarnings(v []Warning) {
	o.Warnings = v
}

func (o ReachableLocations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachableLocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reachable) {
		toSerialize["reachable"] = o.Reachable
	}
	if !IsNil(o.Unreachable) {
		toSerialize["unreachable"] = o.Unreachable
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableReachableLocations struct {
	value *ReachableLocations
	isSet bool
}

func (v NullableReachableLocations) Get() *ReachableLocations {
	return v.value
}

func (v *NullableReachableLocations) Set(val *ReachableLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableReachableLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableReachableLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachableLocations(val *ReachableLocations) *NullableReachableLocations {
	return &NullableReachableLocations{value: val, isSet: true}
}

func (v NullableReachableLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachableLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


