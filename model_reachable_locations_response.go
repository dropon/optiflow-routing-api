/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReachableLocationsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachableLocationsResponse{}

// ReachableLocationsResponse struct for ReachableLocationsResponse
type ReachableLocationsResponse struct {
	Status *CalculationStatus `json:"status,omitempty"`
	ReachableLocations *ReachableLocations `json:"reachableLocations,omitempty"`
	Error *ErrorResponse `json:"error,omitempty"`
}

// NewReachableLocationsResponse instantiates a new ReachableLocationsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachableLocationsResponse() *ReachableLocationsResponse {
	this := ReachableLocationsResponse{}
	return &this
}

// NewReachableLocationsResponseWithDefaults instantiates a new ReachableLocationsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachableLocationsResponseWithDefaults() *ReachableLocationsResponse {
	this := ReachableLocationsResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReachableLocationsResponse) GetStatus() CalculationStatus {
	if o == nil || IsNil(o.Status) {
		var ret CalculationStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocationsResponse) GetStatusOk() (*CalculationStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReachableLocationsResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CalculationStatus and assigns it to the Status field.
func (o *ReachableLocationsResponse) SetStatus(v CalculationStatus) {
	o.Status = &v
}

// GetReachableLocations returns the ReachableLocations field value if set, zero value otherwise.
func (o *ReachableLocationsResponse) GetReachableLocations() ReachableLocations {
	if o == nil || IsNil(o.ReachableLocations) {
		var ret ReachableLocations
		return ret
	}
	return *o.ReachableLocations
}

// GetReachableLocationsOk returns a tuple with the ReachableLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocationsResponse) GetReachableLocationsOk() (*ReachableLocations, bool) {
	if o == nil || IsNil(o.ReachableLocations) {
		return nil, false
	}
	return o.ReachableLocations, true
}

// HasReachableLocations returns a boolean if a field has been set.
func (o *ReachableLocationsResponse) HasReachableLocations() bool {
	if o != nil && !IsNil(o.ReachableLocations) {
		return true
	}

	return false
}

// SetReachableLocations gets a reference to the given ReachableLocations and assigns it to the ReachableLocations field.
func (o *ReachableLocationsResponse) SetReachableLocations(v ReachableLocations) {
	o.ReachableLocations = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ReachableLocationsResponse) GetError() ErrorResponse {
	if o == nil || IsNil(o.Error) {
		var ret ErrorResponse
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableLocationsResponse) GetErrorOk() (*ErrorResponse, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ReachableLocationsResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorResponse and assigns it to the Error field.
func (o *ReachableLocationsResponse) SetError(v ErrorResponse) {
	o.Error = &v
}

func (o ReachableLocationsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachableLocationsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.ReachableLocations) {
		toSerialize["reachableLocations"] = o.ReachableLocations
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableReachableLocationsResponse struct {
	value *ReachableLocationsResponse
	isSet bool
}

func (v NullableReachableLocationsResponse) Get() *ReachableLocationsResponse {
	return v.value
}

func (v *NullableReachableLocationsResponse) Set(val *ReachableLocationsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReachableLocationsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReachableLocationsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachableLocationsResponse(val *ReachableLocationsResponse) *NullableReachableLocationsResponse {
	return &NullableReachableLocationsResponse{value: val, isSet: true}
}

func (v NullableReachableLocationsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachableLocationsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


