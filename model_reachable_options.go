/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"time"
)

// checks if the ReachableOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReachableOptions{}

// ReachableOptions struct for ReachableOptions
type ReachableOptions struct {
	DrivingDirection *DrivingDirection `json:"drivingDirection,omitempty"`
	// Defines the start time for **drivingDirection** _OUTBOUND_ or the arrival time for **drivingDirection** _INBOUND_ formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If none of them is specified the current time will be used.  If the date-time string does not include an explicit offset to UTC, the time will be interpreted as the local time of the waypoint. The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00. The response will contain the offset to UTC specified in the request or that of the waypoint. For best results it should not be more than one month in the past nor more than six months in the future. See [here](./concepts/date-and-time) for more information on the relevance of date and time.
	ReferenceTime *time.Time `json:"referenceTime,omitempty"`
	TrafficMode *ReachableTrafficMode `json:"trafficMode,omitempty"`
	// Comma-separated list of countries the route is allowed to pass. By default, all countries are allowed. If this parameter is present, only these countries are allowed to be passed, i.e. drive only in these countries. This parameter is mutually exclusive with **prohibitedCountries**. Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
	AllowedCountries *string `json:"allowedCountries,omitempty"`
	// Comma-separated list of countries the route must not pass. By default, all countries are allowed. If this parameter is present, all but the given countries are allowed to be passed, i.e. do not drive in these countries. This parameter is mutually exclusive with **allowedCountries**. Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
	ProhibitedCountries *string `json:"prohibitedCountries,omitempty"`
	// Pipe-separated list of polylines.   Roads and combined transports that intersect the given polylines will be considered as blocked. Each list element is a polyline. Each point is a coordinate of latitude and longitude. Coordinates and points are separated by a comma. Format: `<poly1_lat1>,<poly1_lon1>,...,<poly1_latN>,<poly1_lonN>|<poly2_lat1>,<poly2_lon1>,...,<poly2_latN>,<poly2_lonN>|...`   Notes: * Be aware of the URL length restrictions. * If there is no other route connecting two waypoints the will be reported as violated and correspondingly violation events with type **BLOCKED_ROAD_BY_INTERSECTION** will be reported if violation events are requested. * Requests will be rejected if at least one provided polyline   * does not consist of an even number of coordinates,   * consists of less than two points,   * contains invalid coordinates or   * intersects more than 5000 road segments. 
	BlockIntersectingRoads *string `json:"blockIntersectingRoads,omitempty"`
}

// NewReachableOptions instantiates a new ReachableOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReachableOptions() *ReachableOptions {
	this := ReachableOptions{}
	var drivingDirection DrivingDirection = OUTBOUND
	this.DrivingDirection = &drivingDirection
	var trafficMode ReachableTrafficMode = AVERAGE
	this.TrafficMode = &trafficMode
	return &this
}

// NewReachableOptionsWithDefaults instantiates a new ReachableOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReachableOptionsWithDefaults() *ReachableOptions {
	this := ReachableOptions{}
	var drivingDirection DrivingDirection = OUTBOUND
	this.DrivingDirection = &drivingDirection
	var trafficMode ReachableTrafficMode = AVERAGE
	this.TrafficMode = &trafficMode
	return &this
}

// GetDrivingDirection returns the DrivingDirection field value if set, zero value otherwise.
func (o *ReachableOptions) GetDrivingDirection() DrivingDirection {
	if o == nil || IsNil(o.DrivingDirection) {
		var ret DrivingDirection
		return ret
	}
	return *o.DrivingDirection
}

// GetDrivingDirectionOk returns a tuple with the DrivingDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableOptions) GetDrivingDirectionOk() (*DrivingDirection, bool) {
	if o == nil || IsNil(o.DrivingDirection) {
		return nil, false
	}
	return o.DrivingDirection, true
}

// HasDrivingDirection returns a boolean if a field has been set.
func (o *ReachableOptions) HasDrivingDirection() bool {
	if o != nil && !IsNil(o.DrivingDirection) {
		return true
	}

	return false
}

// SetDrivingDirection gets a reference to the given DrivingDirection and assigns it to the DrivingDirection field.
func (o *ReachableOptions) SetDrivingDirection(v DrivingDirection) {
	o.DrivingDirection = &v
}

// GetReferenceTime returns the ReferenceTime field value if set, zero value otherwise.
func (o *ReachableOptions) GetReferenceTime() time.Time {
	if o == nil || IsNil(o.ReferenceTime) {
		var ret time.Time
		return ret
	}
	return *o.ReferenceTime
}

// GetReferenceTimeOk returns a tuple with the ReferenceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableOptions) GetReferenceTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReferenceTime) {
		return nil, false
	}
	return o.ReferenceTime, true
}

// HasReferenceTime returns a boolean if a field has been set.
func (o *ReachableOptions) HasReferenceTime() bool {
	if o != nil && !IsNil(o.ReferenceTime) {
		return true
	}

	return false
}

// SetReferenceTime gets a reference to the given time.Time and assigns it to the ReferenceTime field.
func (o *ReachableOptions) SetReferenceTime(v time.Time) {
	o.ReferenceTime = &v
}

// GetTrafficMode returns the TrafficMode field value if set, zero value otherwise.
func (o *ReachableOptions) GetTrafficMode() ReachableTrafficMode {
	if o == nil || IsNil(o.TrafficMode) {
		var ret ReachableTrafficMode
		return ret
	}
	return *o.TrafficMode
}

// GetTrafficModeOk returns a tuple with the TrafficMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableOptions) GetTrafficModeOk() (*ReachableTrafficMode, bool) {
	if o == nil || IsNil(o.TrafficMode) {
		return nil, false
	}
	return o.TrafficMode, true
}

// HasTrafficMode returns a boolean if a field has been set.
func (o *ReachableOptions) HasTrafficMode() bool {
	if o != nil && !IsNil(o.TrafficMode) {
		return true
	}

	return false
}

// SetTrafficMode gets a reference to the given ReachableTrafficMode and assigns it to the TrafficMode field.
func (o *ReachableOptions) SetTrafficMode(v ReachableTrafficMode) {
	o.TrafficMode = &v
}

// GetAllowedCountries returns the AllowedCountries field value if set, zero value otherwise.
func (o *ReachableOptions) GetAllowedCountries() string {
	if o == nil || IsNil(o.AllowedCountries) {
		var ret string
		return ret
	}
	return *o.AllowedCountries
}

// GetAllowedCountriesOk returns a tuple with the AllowedCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableOptions) GetAllowedCountriesOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedCountries) {
		return nil, false
	}
	return o.AllowedCountries, true
}

// HasAllowedCountries returns a boolean if a field has been set.
func (o *ReachableOptions) HasAllowedCountries() bool {
	if o != nil && !IsNil(o.AllowedCountries) {
		return true
	}

	return false
}

// SetAllowedCountries gets a reference to the given string and assigns it to the AllowedCountries field.
func (o *ReachableOptions) SetAllowedCountries(v string) {
	o.AllowedCountries = &v
}

// GetProhibitedCountries returns the ProhibitedCountries field value if set, zero value otherwise.
func (o *ReachableOptions) GetProhibitedCountries() string {
	if o == nil || IsNil(o.ProhibitedCountries) {
		var ret string
		return ret
	}
	return *o.ProhibitedCountries
}

// GetProhibitedCountriesOk returns a tuple with the ProhibitedCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableOptions) GetProhibitedCountriesOk() (*string, bool) {
	if o == nil || IsNil(o.ProhibitedCountries) {
		return nil, false
	}
	return o.ProhibitedCountries, true
}

// HasProhibitedCountries returns a boolean if a field has been set.
func (o *ReachableOptions) HasProhibitedCountries() bool {
	if o != nil && !IsNil(o.ProhibitedCountries) {
		return true
	}

	return false
}

// SetProhibitedCountries gets a reference to the given string and assigns it to the ProhibitedCountries field.
func (o *ReachableOptions) SetProhibitedCountries(v string) {
	o.ProhibitedCountries = &v
}

// GetBlockIntersectingRoads returns the BlockIntersectingRoads field value if set, zero value otherwise.
func (o *ReachableOptions) GetBlockIntersectingRoads() string {
	if o == nil || IsNil(o.BlockIntersectingRoads) {
		var ret string
		return ret
	}
	return *o.BlockIntersectingRoads
}

// GetBlockIntersectingRoadsOk returns a tuple with the BlockIntersectingRoads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReachableOptions) GetBlockIntersectingRoadsOk() (*string, bool) {
	if o == nil || IsNil(o.BlockIntersectingRoads) {
		return nil, false
	}
	return o.BlockIntersectingRoads, true
}

// HasBlockIntersectingRoads returns a boolean if a field has been set.
func (o *ReachableOptions) HasBlockIntersectingRoads() bool {
	if o != nil && !IsNil(o.BlockIntersectingRoads) {
		return true
	}

	return false
}

// SetBlockIntersectingRoads gets a reference to the given string and assigns it to the BlockIntersectingRoads field.
func (o *ReachableOptions) SetBlockIntersectingRoads(v string) {
	o.BlockIntersectingRoads = &v
}

func (o ReachableOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReachableOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DrivingDirection) {
		toSerialize["drivingDirection"] = o.DrivingDirection
	}
	if !IsNil(o.ReferenceTime) {
		toSerialize["referenceTime"] = o.ReferenceTime
	}
	if !IsNil(o.TrafficMode) {
		toSerialize["trafficMode"] = o.TrafficMode
	}
	if !IsNil(o.AllowedCountries) {
		toSerialize["allowedCountries"] = o.AllowedCountries
	}
	if !IsNil(o.ProhibitedCountries) {
		toSerialize["prohibitedCountries"] = o.ProhibitedCountries
	}
	if !IsNil(o.BlockIntersectingRoads) {
		toSerialize["blockIntersectingRoads"] = o.BlockIntersectingRoads
	}
	return toSerialize, nil
}

type NullableReachableOptions struct {
	value *ReachableOptions
	isSet bool
}

func (v NullableReachableOptions) Get() *ReachableOptions {
	return v.value
}

func (v *NullableReachableOptions) Set(val *ReachableOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableReachableOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableReachableOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReachableOptions(val *ReachableOptions) *NullableReachableOptions {
	return &NullableReachableOptions{value: val, isSet: true}
}

func (v NullableReachableOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReachableOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


