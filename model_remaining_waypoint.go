/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RemainingWaypoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemainingWaypoint{}

// RemainingWaypoint struct for RemainingWaypoint
type RemainingWaypoint struct {
	// The name of this waypoint.
	Name string `json:"name"`
	// The estimated time of arrival at this waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Does not include service, break, rest and waiting at this waypoint.
	EstimatedTimeOfArrival time.Time `json:"estimatedTimeOfArrival"`
	// The distance from the current position to this waypoint [m].
	Distance int32 `json:"distance"`
	// The travel time from the current position to this waypoint [s]. Does not include service, break, rest and waiting at this waypoint.
	TravelTime int32 `json:"travelTime"`
	// The delay due to live traffic from the current position to this waypoint [s].
	TrafficDelay int32 `json:"trafficDelay"`
	// The waiting time at this waypoint [s].
	WaitingTime int32 `json:"waitingTime"`
	// Contains the list of violated schedule restrictions at this waypoint.
	ScheduleViolations []ScheduleViolationType `json:"scheduleViolations"`
	// If there is no valid route for the given vehicle between the vehicle position and this waypoint, but the resulting route can be calculated using roads actually prohibited, the route is marked as violated.
	Violated bool `json:"violated"`
}

type _RemainingWaypoint RemainingWaypoint

// NewRemainingWaypoint instantiates a new RemainingWaypoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemainingWaypoint(name string, estimatedTimeOfArrival time.Time, distance int32, travelTime int32, trafficDelay int32, waitingTime int32, scheduleViolations []ScheduleViolationType, violated bool) *RemainingWaypoint {
	this := RemainingWaypoint{}
	this.Name = name
	this.EstimatedTimeOfArrival = estimatedTimeOfArrival
	this.Distance = distance
	this.TravelTime = travelTime
	this.TrafficDelay = trafficDelay
	this.WaitingTime = waitingTime
	this.ScheduleViolations = scheduleViolations
	this.Violated = violated
	return &this
}

// NewRemainingWaypointWithDefaults instantiates a new RemainingWaypoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemainingWaypointWithDefaults() *RemainingWaypoint {
	this := RemainingWaypoint{}
	return &this
}

// GetName returns the Name field value
func (o *RemainingWaypoint) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RemainingWaypoint) SetName(v string) {
	o.Name = v
}

// GetEstimatedTimeOfArrival returns the EstimatedTimeOfArrival field value
func (o *RemainingWaypoint) GetEstimatedTimeOfArrival() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EstimatedTimeOfArrival
}

// GetEstimatedTimeOfArrivalOk returns a tuple with the EstimatedTimeOfArrival field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetEstimatedTimeOfArrivalOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedTimeOfArrival, true
}

// SetEstimatedTimeOfArrival sets field value
func (o *RemainingWaypoint) SetEstimatedTimeOfArrival(v time.Time) {
	o.EstimatedTimeOfArrival = v
}

// GetDistance returns the Distance field value
func (o *RemainingWaypoint) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *RemainingWaypoint) SetDistance(v int32) {
	o.Distance = v
}

// GetTravelTime returns the TravelTime field value
func (o *RemainingWaypoint) GetTravelTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetTravelTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TravelTime, true
}

// SetTravelTime sets field value
func (o *RemainingWaypoint) SetTravelTime(v int32) {
	o.TravelTime = v
}

// GetTrafficDelay returns the TrafficDelay field value
func (o *RemainingWaypoint) GetTrafficDelay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrafficDelay
}

// GetTrafficDelayOk returns a tuple with the TrafficDelay field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetTrafficDelayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrafficDelay, true
}

// SetTrafficDelay sets field value
func (o *RemainingWaypoint) SetTrafficDelay(v int32) {
	o.TrafficDelay = v
}

// GetWaitingTime returns the WaitingTime field value
func (o *RemainingWaypoint) GetWaitingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetWaitingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitingTime, true
}

// SetWaitingTime sets field value
func (o *RemainingWaypoint) SetWaitingTime(v int32) {
	o.WaitingTime = v
}

// GetScheduleViolations returns the ScheduleViolations field value
func (o *RemainingWaypoint) GetScheduleViolations() []ScheduleViolationType {
	if o == nil {
		var ret []ScheduleViolationType
		return ret
	}

	return o.ScheduleViolations
}

// GetScheduleViolationsOk returns a tuple with the ScheduleViolations field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetScheduleViolationsOk() ([]ScheduleViolationType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleViolations, true
}

// SetScheduleViolations sets field value
func (o *RemainingWaypoint) SetScheduleViolations(v []ScheduleViolationType) {
	o.ScheduleViolations = v
}

// GetViolated returns the Violated field value
func (o *RemainingWaypoint) GetViolated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Violated
}

// GetViolatedOk returns a tuple with the Violated field value
// and a boolean to check if the value has been set.
func (o *RemainingWaypoint) GetViolatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Violated, true
}

// SetViolated sets field value
func (o *RemainingWaypoint) SetViolated(v bool) {
	o.Violated = v
}

func (o RemainingWaypoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemainingWaypoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["estimatedTimeOfArrival"] = o.EstimatedTimeOfArrival
	toSerialize["distance"] = o.Distance
	toSerialize["travelTime"] = o.TravelTime
	toSerialize["trafficDelay"] = o.TrafficDelay
	toSerialize["waitingTime"] = o.WaitingTime
	toSerialize["scheduleViolations"] = o.ScheduleViolations
	toSerialize["violated"] = o.Violated
	return toSerialize, nil
}

func (o *RemainingWaypoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"estimatedTimeOfArrival",
		"distance",
		"travelTime",
		"trafficDelay",
		"waitingTime",
		"scheduleViolations",
		"violated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemainingWaypoint := _RemainingWaypoint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemainingWaypoint)

	if err != nil {
		return err
	}

	*o = RemainingWaypoint(varRemainingWaypoint)

	return err
}

type NullableRemainingWaypoint struct {
	value *RemainingWaypoint
	isSet bool
}

func (v NullableRemainingWaypoint) Get() *RemainingWaypoint {
	return v.value
}

func (v *NullableRemainingWaypoint) Set(val *RemainingWaypoint) {
	v.value = val
	v.isSet = true
}

func (v NullableRemainingWaypoint) IsSet() bool {
	return v.isSet
}

func (v *NullableRemainingWaypoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemainingWaypoint(val *RemainingWaypoint) *NullableRemainingWaypoint {
	return &NullableRemainingWaypoint{value: val, isSet: true}
}

func (v NullableRemainingWaypoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemainingWaypoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


