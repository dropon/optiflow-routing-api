/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RouteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteResponse{}

// RouteResponse struct for RouteResponse
type RouteResponse struct {
	// The distance of the route [m].
	Distance int32 `json:"distance"`
	// The travel time for the route [s].
	TravelTime int32 `json:"travelTime"`
	// The total delay due to live traffic on the route [s].  This value contains the sum of all traffic events on the route and will be non-zero only if **options[trafficMode]=REALISTIC**. See [here](./concepts/traffic-modes) for more information.
	TrafficDelay *int32 `json:"trafficDelay,omitempty"`
	// If there is no valid route but the resulting route can be calculated by using actually prohibited roads, the route is marked as violated. When requesting _VIOLATION_EVENTS_ there is a corresponding violation event containing the position, time and the vehicle property in question. See [here](./concepts/violations) for more information.
	Violated bool `json:"violated"`
	// The ID of the calculated route. It is valid for 12 hours.
	RouteId *string `json:"routeId,omitempty"`
	// The legs of the route.
	Legs []Leg `json:"legs,omitempty"`
	Toll *Toll `json:"toll,omitempty"`
	// The polyline of the route in the format specified by **options[polylineFormat]**.
	Polyline *string `json:"polyline,omitempty"`
	// Detailed information on maneuvers, border crossings and other events along the route in chronological order.
	Events []Event `json:"events,omitempty"`
	Emissions *Emissions `json:"emissions,omitempty"`
	// Detailed information on alternative routes. Requires _ALTERNATIVE_ROUTES_ to be requested. The array may be empty when no alternative routes are found.
	AlternativeRoutes []AlternativeRoute `json:"alternativeRoutes,omitempty"`
	ScheduleReport *ScheduleReport `json:"scheduleReport,omitempty"`
	EvReport *EvReport `json:"evReport,omitempty"`
	// A base64 encoded representation of the route that can be used for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator). The base64 binary has to be decoded and saved as a text file with the extension .bcr. Requires _GUIDED_NAVIGATION_ to be requested.
	GuidedNavigation *string `json:"guidedNavigation,omitempty"`
	MonetaryCosts *MonetaryCosts `json:"monetaryCosts,omitempty"`
	// A list of warnings concerning the validity of the result.
	Warnings []Warning `json:"warnings,omitempty"`
}

type _RouteResponse RouteResponse

// NewRouteResponse instantiates a new RouteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteResponse(distance int32, travelTime int32, violated bool) *RouteResponse {
	this := RouteResponse{}
	this.Distance = distance
	this.TravelTime = travelTime
	this.Violated = violated
	return &this
}

// NewRouteResponseWithDefaults instantiates a new RouteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteResponseWithDefaults() *RouteResponse {
	this := RouteResponse{}
	return &this
}

// GetDistance returns the Distance field value
func (o *RouteResponse) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *RouteResponse) SetDistance(v int32) {
	o.Distance = v
}

// GetTravelTime returns the TravelTime field value
func (o *RouteResponse) GetTravelTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetTravelTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TravelTime, true
}

// SetTravelTime sets field value
func (o *RouteResponse) SetTravelTime(v int32) {
	o.TravelTime = v
}

// GetTrafficDelay returns the TrafficDelay field value if set, zero value otherwise.
func (o *RouteResponse) GetTrafficDelay() int32 {
	if o == nil || IsNil(o.TrafficDelay) {
		var ret int32
		return ret
	}
	return *o.TrafficDelay
}

// GetTrafficDelayOk returns a tuple with the TrafficDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetTrafficDelayOk() (*int32, bool) {
	if o == nil || IsNil(o.TrafficDelay) {
		return nil, false
	}
	return o.TrafficDelay, true
}

// HasTrafficDelay returns a boolean if a field has been set.
func (o *RouteResponse) HasTrafficDelay() bool {
	if o != nil && !IsNil(o.TrafficDelay) {
		return true
	}

	return false
}

// SetTrafficDelay gets a reference to the given int32 and assigns it to the TrafficDelay field.
func (o *RouteResponse) SetTrafficDelay(v int32) {
	o.TrafficDelay = &v
}

// GetViolated returns the Violated field value
func (o *RouteResponse) GetViolated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Violated
}

// GetViolatedOk returns a tuple with the Violated field value
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetViolatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Violated, true
}

// SetViolated sets field value
func (o *RouteResponse) SetViolated(v bool) {
	o.Violated = v
}

// GetRouteId returns the RouteId field value if set, zero value otherwise.
func (o *RouteResponse) GetRouteId() string {
	if o == nil || IsNil(o.RouteId) {
		var ret string
		return ret
	}
	return *o.RouteId
}

// GetRouteIdOk returns a tuple with the RouteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetRouteIdOk() (*string, bool) {
	if o == nil || IsNil(o.RouteId) {
		return nil, false
	}
	return o.RouteId, true
}

// HasRouteId returns a boolean if a field has been set.
func (o *RouteResponse) HasRouteId() bool {
	if o != nil && !IsNil(o.RouteId) {
		return true
	}

	return false
}

// SetRouteId gets a reference to the given string and assigns it to the RouteId field.
func (o *RouteResponse) SetRouteId(v string) {
	o.RouteId = &v
}

// GetLegs returns the Legs field value if set, zero value otherwise.
func (o *RouteResponse) GetLegs() []Leg {
	if o == nil || IsNil(o.Legs) {
		var ret []Leg
		return ret
	}
	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetLegsOk() ([]Leg, bool) {
	if o == nil || IsNil(o.Legs) {
		return nil, false
	}
	return o.Legs, true
}

// HasLegs returns a boolean if a field has been set.
func (o *RouteResponse) HasLegs() bool {
	if o != nil && !IsNil(o.Legs) {
		return true
	}

	return false
}

// SetLegs gets a reference to the given []Leg and assigns it to the Legs field.
func (o *RouteResponse) SetLegs(v []Leg) {
	o.Legs = v
}

// GetToll returns the Toll field value if set, zero value otherwise.
func (o *RouteResponse) GetToll() Toll {
	if o == nil || IsNil(o.Toll) {
		var ret Toll
		return ret
	}
	return *o.Toll
}

// GetTollOk returns a tuple with the Toll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetTollOk() (*Toll, bool) {
	if o == nil || IsNil(o.Toll) {
		return nil, false
	}
	return o.Toll, true
}

// HasToll returns a boolean if a field has been set.
func (o *RouteResponse) HasToll() bool {
	if o != nil && !IsNil(o.Toll) {
		return true
	}

	return false
}

// SetToll gets a reference to the given Toll and assigns it to the Toll field.
func (o *RouteResponse) SetToll(v Toll) {
	o.Toll = &v
}

// GetPolyline returns the Polyline field value if set, zero value otherwise.
func (o *RouteResponse) GetPolyline() string {
	if o == nil || IsNil(o.Polyline) {
		var ret string
		return ret
	}
	return *o.Polyline
}

// GetPolylineOk returns a tuple with the Polyline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetPolylineOk() (*string, bool) {
	if o == nil || IsNil(o.Polyline) {
		return nil, false
	}
	return o.Polyline, true
}

// HasPolyline returns a boolean if a field has been set.
func (o *RouteResponse) HasPolyline() bool {
	if o != nil && !IsNil(o.Polyline) {
		return true
	}

	return false
}

// SetPolyline gets a reference to the given string and assigns it to the Polyline field.
func (o *RouteResponse) SetPolyline(v string) {
	o.Polyline = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *RouteResponse) GetEvents() []Event {
	if o == nil || IsNil(o.Events) {
		var ret []Event
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetEventsOk() ([]Event, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *RouteResponse) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []Event and assigns it to the Events field.
func (o *RouteResponse) SetEvents(v []Event) {
	o.Events = v
}

// GetEmissions returns the Emissions field value if set, zero value otherwise.
func (o *RouteResponse) GetEmissions() Emissions {
	if o == nil || IsNil(o.Emissions) {
		var ret Emissions
		return ret
	}
	return *o.Emissions
}

// GetEmissionsOk returns a tuple with the Emissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetEmissionsOk() (*Emissions, bool) {
	if o == nil || IsNil(o.Emissions) {
		return nil, false
	}
	return o.Emissions, true
}

// HasEmissions returns a boolean if a field has been set.
func (o *RouteResponse) HasEmissions() bool {
	if o != nil && !IsNil(o.Emissions) {
		return true
	}

	return false
}

// SetEmissions gets a reference to the given Emissions and assigns it to the Emissions field.
func (o *RouteResponse) SetEmissions(v Emissions) {
	o.Emissions = &v
}

// GetAlternativeRoutes returns the AlternativeRoutes field value if set, zero value otherwise.
func (o *RouteResponse) GetAlternativeRoutes() []AlternativeRoute {
	if o == nil || IsNil(o.AlternativeRoutes) {
		var ret []AlternativeRoute
		return ret
	}
	return o.AlternativeRoutes
}

// GetAlternativeRoutesOk returns a tuple with the AlternativeRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetAlternativeRoutesOk() ([]AlternativeRoute, bool) {
	if o == nil || IsNil(o.AlternativeRoutes) {
		return nil, false
	}
	return o.AlternativeRoutes, true
}

// HasAlternativeRoutes returns a boolean if a field has been set.
func (o *RouteResponse) HasAlternativeRoutes() bool {
	if o != nil && !IsNil(o.AlternativeRoutes) {
		return true
	}

	return false
}

// SetAlternativeRoutes gets a reference to the given []AlternativeRoute and assigns it to the AlternativeRoutes field.
func (o *RouteResponse) SetAlternativeRoutes(v []AlternativeRoute) {
	o.AlternativeRoutes = v
}

// GetScheduleReport returns the ScheduleReport field value if set, zero value otherwise.
func (o *RouteResponse) GetScheduleReport() ScheduleReport {
	if o == nil || IsNil(o.ScheduleReport) {
		var ret ScheduleReport
		return ret
	}
	return *o.ScheduleReport
}

// GetScheduleReportOk returns a tuple with the ScheduleReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetScheduleReportOk() (*ScheduleReport, bool) {
	if o == nil || IsNil(o.ScheduleReport) {
		return nil, false
	}
	return o.ScheduleReport, true
}

// HasScheduleReport returns a boolean if a field has been set.
func (o *RouteResponse) HasScheduleReport() bool {
	if o != nil && !IsNil(o.ScheduleReport) {
		return true
	}

	return false
}

// SetScheduleReport gets a reference to the given ScheduleReport and assigns it to the ScheduleReport field.
func (o *RouteResponse) SetScheduleReport(v ScheduleReport) {
	o.ScheduleReport = &v
}

// GetEvReport returns the EvReport field value if set, zero value otherwise.
func (o *RouteResponse) GetEvReport() EvReport {
	if o == nil || IsNil(o.EvReport) {
		var ret EvReport
		return ret
	}
	return *o.EvReport
}

// GetEvReportOk returns a tuple with the EvReport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetEvReportOk() (*EvReport, bool) {
	if o == nil || IsNil(o.EvReport) {
		return nil, false
	}
	return o.EvReport, true
}

// HasEvReport returns a boolean if a field has been set.
func (o *RouteResponse) HasEvReport() bool {
	if o != nil && !IsNil(o.EvReport) {
		return true
	}

	return false
}

// SetEvReport gets a reference to the given EvReport and assigns it to the EvReport field.
func (o *RouteResponse) SetEvReport(v EvReport) {
	o.EvReport = &v
}

// GetGuidedNavigation returns the GuidedNavigation field value if set, zero value otherwise.
func (o *RouteResponse) GetGuidedNavigation() string {
	if o == nil || IsNil(o.GuidedNavigation) {
		var ret string
		return ret
	}
	return *o.GuidedNavigation
}

// GetGuidedNavigationOk returns a tuple with the GuidedNavigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetGuidedNavigationOk() (*string, bool) {
	if o == nil || IsNil(o.GuidedNavigation) {
		return nil, false
	}
	return o.GuidedNavigation, true
}

// HasGuidedNavigation returns a boolean if a field has been set.
func (o *RouteResponse) HasGuidedNavigation() bool {
	if o != nil && !IsNil(o.GuidedNavigation) {
		return true
	}

	return false
}

// SetGuidedNavigation gets a reference to the given string and assigns it to the GuidedNavigation field.
func (o *RouteResponse) SetGuidedNavigation(v string) {
	o.GuidedNavigation = &v
}

// GetMonetaryCosts returns the MonetaryCosts field value if set, zero value otherwise.
func (o *RouteResponse) GetMonetaryCosts() MonetaryCosts {
	if o == nil || IsNil(o.MonetaryCosts) {
		var ret MonetaryCosts
		return ret
	}
	return *o.MonetaryCosts
}

// GetMonetaryCostsOk returns a tuple with the MonetaryCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetMonetaryCostsOk() (*MonetaryCosts, bool) {
	if o == nil || IsNil(o.MonetaryCosts) {
		return nil, false
	}
	return o.MonetaryCosts, true
}

// HasMonetaryCosts returns a boolean if a field has been set.
func (o *RouteResponse) HasMonetaryCosts() bool {
	if o != nil && !IsNil(o.MonetaryCosts) {
		return true
	}

	return false
}

// SetMonetaryCosts gets a reference to the given MonetaryCosts and assigns it to the MonetaryCosts field.
func (o *RouteResponse) SetMonetaryCosts(v MonetaryCosts) {
	o.MonetaryCosts = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *RouteResponse) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteResponse) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RouteResponse) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *RouteResponse) SetWarnings(v []Warning) {
	o.Warnings = v
}

func (o RouteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["distance"] = o.Distance
	toSerialize["travelTime"] = o.TravelTime
	if !IsNil(o.TrafficDelay) {
		toSerialize["trafficDelay"] = o.TrafficDelay
	}
	toSerialize["violated"] = o.Violated
	if !IsNil(o.RouteId) {
		toSerialize["routeId"] = o.RouteId
	}
	if !IsNil(o.Legs) {
		toSerialize["legs"] = o.Legs
	}
	if !IsNil(o.Toll) {
		toSerialize["toll"] = o.Toll
	}
	if !IsNil(o.Polyline) {
		toSerialize["polyline"] = o.Polyline
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Emissions) {
		toSerialize["emissions"] = o.Emissions
	}
	if !IsNil(o.AlternativeRoutes) {
		toSerialize["alternativeRoutes"] = o.AlternativeRoutes
	}
	if !IsNil(o.ScheduleReport) {
		toSerialize["scheduleReport"] = o.ScheduleReport
	}
	if !IsNil(o.EvReport) {
		toSerialize["evReport"] = o.EvReport
	}
	if !IsNil(o.GuidedNavigation) {
		toSerialize["guidedNavigation"] = o.GuidedNavigation
	}
	if !IsNil(o.MonetaryCosts) {
		toSerialize["monetaryCosts"] = o.MonetaryCosts
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *RouteResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"distance",
		"travelTime",
		"violated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteResponse := _RouteResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteResponse)

	if err != nil {
		return err
	}

	*o = RouteResponse(varRouteResponse)

	return err
}

type NullableRouteResponse struct {
	value *RouteResponse
	isSet bool
}

func (v NullableRouteResponse) Get() *RouteResponse {
	return v.value
}

func (v *NullableRouteResponse) Set(val *RouteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteResponse(val *RouteResponse) *NullableRouteResponse {
	return &NullableRouteResponse{value: val, isSet: true}
}

func (v NullableRouteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


