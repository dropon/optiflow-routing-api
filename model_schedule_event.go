/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScheduleEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleEvent{}

// ScheduleEvent Issued when the driver has to take a break or a rest, perform service or wait for a waypoint to open. If **useServiceTimeForRecreation** is true, each _SERVICE_ is reported along with another type depending on whether or not the service time is actually used for recreation. Times on a combined transport are always _WAITING_ unless used for recreation. Requires _SCHEDULE_EVENTS_ to be requested, POST only.
type ScheduleEvent struct {
	// The duration [s].
	Duration int32 `json:"duration"`
	// Tells what happens at this position of the route. 
	ScheduleTypes []ScheduleType `json:"scheduleTypes"`
}

type _ScheduleEvent ScheduleEvent

// NewScheduleEvent instantiates a new ScheduleEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleEvent(duration int32, scheduleTypes []ScheduleType) *ScheduleEvent {
	this := ScheduleEvent{}
	this.Duration = duration
	this.ScheduleTypes = scheduleTypes
	return &this
}

// NewScheduleEventWithDefaults instantiates a new ScheduleEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleEventWithDefaults() *ScheduleEvent {
	this := ScheduleEvent{}
	return &this
}

// GetDuration returns the Duration field value
func (o *ScheduleEvent) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *ScheduleEvent) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *ScheduleEvent) SetDuration(v int32) {
	o.Duration = v
}

// GetScheduleTypes returns the ScheduleTypes field value
func (o *ScheduleEvent) GetScheduleTypes() []ScheduleType {
	if o == nil {
		var ret []ScheduleType
		return ret
	}

	return o.ScheduleTypes
}

// GetScheduleTypesOk returns a tuple with the ScheduleTypes field value
// and a boolean to check if the value has been set.
func (o *ScheduleEvent) GetScheduleTypesOk() ([]ScheduleType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleTypes, true
}

// SetScheduleTypes sets field value
func (o *ScheduleEvent) SetScheduleTypes(v []ScheduleType) {
	o.ScheduleTypes = v
}

func (o ScheduleEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration
	toSerialize["scheduleTypes"] = o.ScheduleTypes
	return toSerialize, nil
}

func (o *ScheduleEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
		"scheduleTypes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleEvent := _ScheduleEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleEvent)

	if err != nil {
		return err
	}

	*o = ScheduleEvent(varScheduleEvent)

	return err
}

type NullableScheduleEvent struct {
	value *ScheduleEvent
	isSet bool
}

func (v NullableScheduleEvent) Get() *ScheduleEvent {
	return v.value
}

func (v *NullableScheduleEvent) Set(val *ScheduleEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleEvent(val *ScheduleEvent) *NullableScheduleEvent {
	return &NullableScheduleEvent{value: val, isSet: true}
}

func (v NullableScheduleEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


