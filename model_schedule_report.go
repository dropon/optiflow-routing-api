/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ScheduleReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScheduleReport{}

// ScheduleReport Provides an overview of the times of the schedule of this route including break and rest times. The sum of all times is equal to the **travelTime** of the route.         If **useServiceTimeForRecreation** is true, waiting, break and rest times which take place during service will not be reported here. If that does not match your needs, please evaluate the corresponding **scheduleEvent**s.  Requires _SCHEDULE_REPORT_ to be requested, POST only.
type ScheduleReport struct {
	// The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.
	EndTime *time.Time `json:"endTime,omitempty"`
	// The total driving time of the route [s]. Time which is not service, waiting, break or rest is considered as driving.
	DrivingTime int32 `json:"drivingTime"`
	// The total service time of the route [s], equal to the sum of **schedule** events of type _SERVICE_.
	ServiceTime int32 `json:"serviceTime"`
	// The total waiting time of the route [s], equal to the sum of **schedule** events of type _WAITING_ which are not _SERVICE_ at the same time.
	WaitingTime int32 `json:"waitingTime"`
	// The total break time of the route [s], equal to the sum of **schedule** events of type _BREAK_ which are not _SERVICE_ at the same time.
	BreakTime int32 `json:"breakTime"`
	// The total rest time of the route [s], equal to the sum of **schedule** events of type _DAILY_REST_ which are not _SERVICE_ at the same time.
	RestTime int32 `json:"restTime"`
}

type _ScheduleReport ScheduleReport

// NewScheduleReport instantiates a new ScheduleReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScheduleReport(drivingTime int32, serviceTime int32, waitingTime int32, breakTime int32, restTime int32) *ScheduleReport {
	this := ScheduleReport{}
	this.DrivingTime = drivingTime
	this.ServiceTime = serviceTime
	this.WaitingTime = waitingTime
	this.BreakTime = breakTime
	this.RestTime = restTime
	return &this
}

// NewScheduleReportWithDefaults instantiates a new ScheduleReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleReportWithDefaults() *ScheduleReport {
	this := ScheduleReport{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ScheduleReport) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ScheduleReport) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *ScheduleReport) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ScheduleReport) GetEndTime() time.Time {
	if o == nil || IsNil(o.EndTime) {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ScheduleReport) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *ScheduleReport) SetEndTime(v time.Time) {
	o.EndTime = &v
}

// GetDrivingTime returns the DrivingTime field value
func (o *ScheduleReport) GetDrivingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetDrivingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DrivingTime, true
}

// SetDrivingTime sets field value
func (o *ScheduleReport) SetDrivingTime(v int32) {
	o.DrivingTime = v
}

// GetServiceTime returns the ServiceTime field value
func (o *ScheduleReport) GetServiceTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServiceTime
}

// GetServiceTimeOk returns a tuple with the ServiceTime field value
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetServiceTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceTime, true
}

// SetServiceTime sets field value
func (o *ScheduleReport) SetServiceTime(v int32) {
	o.ServiceTime = v
}

// GetWaitingTime returns the WaitingTime field value
func (o *ScheduleReport) GetWaitingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetWaitingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitingTime, true
}

// SetWaitingTime sets field value
func (o *ScheduleReport) SetWaitingTime(v int32) {
	o.WaitingTime = v
}

// GetBreakTime returns the BreakTime field value
func (o *ScheduleReport) GetBreakTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BreakTime
}

// GetBreakTimeOk returns a tuple with the BreakTime field value
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetBreakTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BreakTime, true
}

// SetBreakTime sets field value
func (o *ScheduleReport) SetBreakTime(v int32) {
	o.BreakTime = v
}

// GetRestTime returns the RestTime field value
func (o *ScheduleReport) GetRestTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RestTime
}

// GetRestTimeOk returns a tuple with the RestTime field value
// and a boolean to check if the value has been set.
func (o *ScheduleReport) GetRestTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestTime, true
}

// SetRestTime sets field value
func (o *ScheduleReport) SetRestTime(v int32) {
	o.RestTime = v
}

func (o ScheduleReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScheduleReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	toSerialize["drivingTime"] = o.DrivingTime
	toSerialize["serviceTime"] = o.ServiceTime
	toSerialize["waitingTime"] = o.WaitingTime
	toSerialize["breakTime"] = o.BreakTime
	toSerialize["restTime"] = o.RestTime
	return toSerialize, nil
}

func (o *ScheduleReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"drivingTime",
		"serviceTime",
		"waitingTime",
		"breakTime",
		"restTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScheduleReport := _ScheduleReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScheduleReport)

	if err != nil {
		return err
	}

	*o = ScheduleReport(varScheduleReport)

	return err
}

type NullableScheduleReport struct {
	value *ScheduleReport
	isSet bool
}

func (v NullableScheduleReport) Get() *ScheduleReport {
	return v.value
}

func (v *NullableScheduleReport) Set(val *ScheduleReport) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleReport) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleReport(val *ScheduleReport) *NullableScheduleReport {
	return &NullableScheduleReport{value: val, isSet: true}
}

func (v NullableScheduleReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


