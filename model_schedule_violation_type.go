/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"fmt"
)

// ScheduleViolationType the model 'ScheduleViolationType'
type ScheduleViolationType string

// List of ScheduleViolationType
const (
	OPENING_INTERVAL ScheduleViolationType = "OPENING_INTERVAL"
	MAXIMUM_TRAVEL_TIME ScheduleViolationType = "MAXIMUM_TRAVEL_TIME"
	MAXIMUM_DRIVING_TIME ScheduleViolationType = "MAXIMUM_DRIVING_TIME"
)

// All allowed values of ScheduleViolationType enum
var AllowedScheduleViolationTypeEnumValues = []ScheduleViolationType{
	"OPENING_INTERVAL",
	"MAXIMUM_TRAVEL_TIME",
	"MAXIMUM_DRIVING_TIME",
}

func (v *ScheduleViolationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScheduleViolationType(value)
	for _, existing := range AllowedScheduleViolationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScheduleViolationType", value)
}

// NewScheduleViolationTypeFromValue returns a pointer to a valid ScheduleViolationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScheduleViolationTypeFromValue(v string) (*ScheduleViolationType, error) {
	ev := ScheduleViolationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScheduleViolationType: valid values are %v", v, AllowedScheduleViolationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScheduleViolationType) IsValid() bool {
	for _, existing := range AllowedScheduleViolationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScheduleViolationType value
func (v ScheduleViolationType) Ptr() *ScheduleViolationType {
	return &v
}

type NullableScheduleViolationType struct {
	value *ScheduleViolationType
	isSet bool
}

func (v NullableScheduleViolationType) Get() *ScheduleViolationType {
	return v.value
}

func (v *NullableScheduleViolationType) Set(val *ScheduleViolationType) {
	v.value = val
	v.isSet = true
}

func (v NullableScheduleViolationType) IsSet() bool {
	return v.isSet
}

func (v *NullableScheduleViolationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScheduleViolationType(val *ScheduleViolationType) *NullableScheduleViolationType {
	return &NullableScheduleViolationType{value: val, isSet: true}
}

func (v NullableScheduleViolationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScheduleViolationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

