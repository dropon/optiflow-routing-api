/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Toll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Toll{}

// Toll Detailed information on the toll costs, providers and tariff information.   Toll prices do not include VAT. 
type Toll struct {
	Costs *TollCosts `json:"costs,omitempty"`
	// The list of toll sections defined by the toll operators.
	Sections []TollSection `json:"sections,omitempty"`
	// The list of toll systems defined by the toll operators.
	Systems []TollSystem `json:"systems,omitempty"`
	Currencies *Currencies `json:"currencies,omitempty"`
}

// NewToll instantiates a new Toll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToll() *Toll {
	this := Toll{}
	return &this
}

// NewTollWithDefaults instantiates a new Toll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTollWithDefaults() *Toll {
	this := Toll{}
	return &this
}

// GetCosts returns the Costs field value if set, zero value otherwise.
func (o *Toll) GetCosts() TollCosts {
	if o == nil || IsNil(o.Costs) {
		var ret TollCosts
		return ret
	}
	return *o.Costs
}

// GetCostsOk returns a tuple with the Costs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Toll) GetCostsOk() (*TollCosts, bool) {
	if o == nil || IsNil(o.Costs) {
		return nil, false
	}
	return o.Costs, true
}

// HasCosts returns a boolean if a field has been set.
func (o *Toll) HasCosts() bool {
	if o != nil && !IsNil(o.Costs) {
		return true
	}

	return false
}

// SetCosts gets a reference to the given TollCosts and assigns it to the Costs field.
func (o *Toll) SetCosts(v TollCosts) {
	o.Costs = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *Toll) GetSections() []TollSection {
	if o == nil || IsNil(o.Sections) {
		var ret []TollSection
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Toll) GetSectionsOk() ([]TollSection, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *Toll) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []TollSection and assigns it to the Sections field.
func (o *Toll) SetSections(v []TollSection) {
	o.Sections = v
}

// GetSystems returns the Systems field value if set, zero value otherwise.
func (o *Toll) GetSystems() []TollSystem {
	if o == nil || IsNil(o.Systems) {
		var ret []TollSystem
		return ret
	}
	return o.Systems
}

// GetSystemsOk returns a tuple with the Systems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Toll) GetSystemsOk() ([]TollSystem, bool) {
	if o == nil || IsNil(o.Systems) {
		return nil, false
	}
	return o.Systems, true
}

// HasSystems returns a boolean if a field has been set.
func (o *Toll) HasSystems() bool {
	if o != nil && !IsNil(o.Systems) {
		return true
	}

	return false
}

// SetSystems gets a reference to the given []TollSystem and assigns it to the Systems field.
func (o *Toll) SetSystems(v []TollSystem) {
	o.Systems = v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *Toll) GetCurrencies() Currencies {
	if o == nil || IsNil(o.Currencies) {
		var ret Currencies
		return ret
	}
	return *o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Toll) GetCurrenciesOk() (*Currencies, bool) {
	if o == nil || IsNil(o.Currencies) {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *Toll) HasCurrencies() bool {
	if o != nil && !IsNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given Currencies and assigns it to the Currencies field.
func (o *Toll) SetCurrencies(v Currencies) {
	o.Currencies = &v
}

func (o Toll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Toll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Costs) {
		toSerialize["costs"] = o.Costs
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	if !IsNil(o.Systems) {
		toSerialize["systems"] = o.Systems
	}
	if !IsNil(o.Currencies) {
		toSerialize["currencies"] = o.Currencies
	}
	return toSerialize, nil
}

type NullableToll struct {
	value *Toll
	isSet bool
}

func (v NullableToll) Get() *Toll {
	return v.value
}

func (v *NullableToll) Set(val *Toll) {
	v.value = val
	v.isSet = true
}

func (v NullableToll) IsSet() bool {
	return v.isSet
}

func (v *NullableToll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToll(val *Toll) *NullableToll {
	return &NullableToll{value: val, isSet: true}
}

func (v NullableToll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


