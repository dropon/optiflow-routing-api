/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TollCostsByCountry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TollCostsByCountry{}

// TollCostsByCountry struct for TollCostsByCountry
type TollCostsByCountry struct {
	// Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
	CountryCode string `json:"countryCode"`
	Price TollPrice `json:"price"`
	ConvertedPrice *TollPrice `json:"convertedPrice,omitempty"`
}

type _TollCostsByCountry TollCostsByCountry

// NewTollCostsByCountry instantiates a new TollCostsByCountry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTollCostsByCountry(countryCode string, price TollPrice) *TollCostsByCountry {
	this := TollCostsByCountry{}
	this.CountryCode = countryCode
	this.Price = price
	return &this
}

// NewTollCostsByCountryWithDefaults instantiates a new TollCostsByCountry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTollCostsByCountryWithDefaults() *TollCostsByCountry {
	this := TollCostsByCountry{}
	return &this
}

// GetCountryCode returns the CountryCode field value
func (o *TollCostsByCountry) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *TollCostsByCountry) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *TollCostsByCountry) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetPrice returns the Price field value
func (o *TollCostsByCountry) GetPrice() TollPrice {
	if o == nil {
		var ret TollPrice
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *TollCostsByCountry) GetPriceOk() (*TollPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *TollCostsByCountry) SetPrice(v TollPrice) {
	o.Price = v
}

// GetConvertedPrice returns the ConvertedPrice field value if set, zero value otherwise.
func (o *TollCostsByCountry) GetConvertedPrice() TollPrice {
	if o == nil || IsNil(o.ConvertedPrice) {
		var ret TollPrice
		return ret
	}
	return *o.ConvertedPrice
}

// GetConvertedPriceOk returns a tuple with the ConvertedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollCostsByCountry) GetConvertedPriceOk() (*TollPrice, bool) {
	if o == nil || IsNil(o.ConvertedPrice) {
		return nil, false
	}
	return o.ConvertedPrice, true
}

// HasConvertedPrice returns a boolean if a field has been set.
func (o *TollCostsByCountry) HasConvertedPrice() bool {
	if o != nil && !IsNil(o.ConvertedPrice) {
		return true
	}

	return false
}

// SetConvertedPrice gets a reference to the given TollPrice and assigns it to the ConvertedPrice field.
func (o *TollCostsByCountry) SetConvertedPrice(v TollPrice) {
	o.ConvertedPrice = &v
}

func (o TollCostsByCountry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TollCostsByCountry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["countryCode"] = o.CountryCode
	toSerialize["price"] = o.Price
	if !IsNil(o.ConvertedPrice) {
		toSerialize["convertedPrice"] = o.ConvertedPrice
	}
	return toSerialize, nil
}

func (o *TollCostsByCountry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"countryCode",
		"price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTollCostsByCountry := _TollCostsByCountry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTollCostsByCountry)

	if err != nil {
		return err
	}

	*o = TollCostsByCountry(varTollCostsByCountry)

	return err
}

type NullableTollCostsByCountry struct {
	value *TollCostsByCountry
	isSet bool
}

func (v NullableTollCostsByCountry) Get() *TollCostsByCountry {
	return v.value
}

func (v *NullableTollCostsByCountry) Set(val *TollCostsByCountry) {
	v.value = val
	v.isSet = true
}

func (v NullableTollCostsByCountry) IsSet() bool {
	return v.isSet
}

func (v *NullableTollCostsByCountry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTollCostsByCountry(val *TollCostsByCountry) *NullableTollCostsByCountry {
	return &NullableTollCostsByCountry{value: val, isSet: true}
}

func (v NullableTollCostsByCountry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTollCostsByCountry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


