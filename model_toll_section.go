/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TollSection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TollSection{}

// TollSection struct for TollSection
type TollSection struct {
	// The toll costs payable for this section. If different prices according to the payment method exist, this list contains one item for each price. The first item contains the price used to calculate the total toll costs for the route. Further items are alternative costs for the section with different payment methods or different subscriptions.
	Costs []TollSectionCost `json:"costs"`
	TollRoadType TollRoadType `json:"tollRoadType"`
	// The index in the list of toll systems this toll section belongs to.
	TollSystemIndex *int32 `json:"tollSystemIndex,omitempty"`
	// Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
	CountryCode string `json:"countryCode"`
	// A name that describes this toll section. It can relate to the names of the road intersections, to the area in general or to the type of toll.
	DisplayName *string `json:"displayName,omitempty"`
	// The official distance defined by the toll operator [m].  It may be different from the travel distance. Only present if the toll operator provides an official distance.
	OfficialDistance *int32 `json:"officialDistance,omitempty"`
	// The calculated distance of the toll section on the current route.  It may be different from the official distance.
	CalculatedDistance *int32 `json:"calculatedDistance,omitempty"`
	// States whether the section is approximated because the start or destination waypoint is located inside a toll section and thus the exact toll price cannot be calculated. The closest toll location after the waypoint is used to approximate the toll price.
	Approximated *bool `json:"approximated,omitempty"`
}

type _TollSection TollSection

// NewTollSection instantiates a new TollSection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTollSection(costs []TollSectionCost, tollRoadType TollRoadType, countryCode string) *TollSection {
	this := TollSection{}
	this.Costs = costs
	this.TollRoadType = tollRoadType
	this.CountryCode = countryCode
	return &this
}

// NewTollSectionWithDefaults instantiates a new TollSection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTollSectionWithDefaults() *TollSection {
	this := TollSection{}
	return &this
}

// GetCosts returns the Costs field value
func (o *TollSection) GetCosts() []TollSectionCost {
	if o == nil {
		var ret []TollSectionCost
		return ret
	}

	return o.Costs
}

// GetCostsOk returns a tuple with the Costs field value
// and a boolean to check if the value has been set.
func (o *TollSection) GetCostsOk() ([]TollSectionCost, bool) {
	if o == nil {
		return nil, false
	}
	return o.Costs, true
}

// SetCosts sets field value
func (o *TollSection) SetCosts(v []TollSectionCost) {
	o.Costs = v
}

// GetTollRoadType returns the TollRoadType field value
func (o *TollSection) GetTollRoadType() TollRoadType {
	if o == nil {
		var ret TollRoadType
		return ret
	}

	return o.TollRoadType
}

// GetTollRoadTypeOk returns a tuple with the TollRoadType field value
// and a boolean to check if the value has been set.
func (o *TollSection) GetTollRoadTypeOk() (*TollRoadType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TollRoadType, true
}

// SetTollRoadType sets field value
func (o *TollSection) SetTollRoadType(v TollRoadType) {
	o.TollRoadType = v
}

// GetTollSystemIndex returns the TollSystemIndex field value if set, zero value otherwise.
func (o *TollSection) GetTollSystemIndex() int32 {
	if o == nil || IsNil(o.TollSystemIndex) {
		var ret int32
		return ret
	}
	return *o.TollSystemIndex
}

// GetTollSystemIndexOk returns a tuple with the TollSystemIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSection) GetTollSystemIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.TollSystemIndex) {
		return nil, false
	}
	return o.TollSystemIndex, true
}

// HasTollSystemIndex returns a boolean if a field has been set.
func (o *TollSection) HasTollSystemIndex() bool {
	if o != nil && !IsNil(o.TollSystemIndex) {
		return true
	}

	return false
}

// SetTollSystemIndex gets a reference to the given int32 and assigns it to the TollSystemIndex field.
func (o *TollSection) SetTollSystemIndex(v int32) {
	o.TollSystemIndex = &v
}

// GetCountryCode returns the CountryCode field value
func (o *TollSection) GetCountryCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *TollSection) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *TollSection) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TollSection) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSection) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TollSection) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TollSection) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetOfficialDistance returns the OfficialDistance field value if set, zero value otherwise.
func (o *TollSection) GetOfficialDistance() int32 {
	if o == nil || IsNil(o.OfficialDistance) {
		var ret int32
		return ret
	}
	return *o.OfficialDistance
}

// GetOfficialDistanceOk returns a tuple with the OfficialDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSection) GetOfficialDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.OfficialDistance) {
		return nil, false
	}
	return o.OfficialDistance, true
}

// HasOfficialDistance returns a boolean if a field has been set.
func (o *TollSection) HasOfficialDistance() bool {
	if o != nil && !IsNil(o.OfficialDistance) {
		return true
	}

	return false
}

// SetOfficialDistance gets a reference to the given int32 and assigns it to the OfficialDistance field.
func (o *TollSection) SetOfficialDistance(v int32) {
	o.OfficialDistance = &v
}

// GetCalculatedDistance returns the CalculatedDistance field value if set, zero value otherwise.
func (o *TollSection) GetCalculatedDistance() int32 {
	if o == nil || IsNil(o.CalculatedDistance) {
		var ret int32
		return ret
	}
	return *o.CalculatedDistance
}

// GetCalculatedDistanceOk returns a tuple with the CalculatedDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSection) GetCalculatedDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.CalculatedDistance) {
		return nil, false
	}
	return o.CalculatedDistance, true
}

// HasCalculatedDistance returns a boolean if a field has been set.
func (o *TollSection) HasCalculatedDistance() bool {
	if o != nil && !IsNil(o.CalculatedDistance) {
		return true
	}

	return false
}

// SetCalculatedDistance gets a reference to the given int32 and assigns it to the CalculatedDistance field.
func (o *TollSection) SetCalculatedDistance(v int32) {
	o.CalculatedDistance = &v
}

// GetApproximated returns the Approximated field value if set, zero value otherwise.
func (o *TollSection) GetApproximated() bool {
	if o == nil || IsNil(o.Approximated) {
		var ret bool
		return ret
	}
	return *o.Approximated
}

// GetApproximatedOk returns a tuple with the Approximated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSection) GetApproximatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Approximated) {
		return nil, false
	}
	return o.Approximated, true
}

// HasApproximated returns a boolean if a field has been set.
func (o *TollSection) HasApproximated() bool {
	if o != nil && !IsNil(o.Approximated) {
		return true
	}

	return false
}

// SetApproximated gets a reference to the given bool and assigns it to the Approximated field.
func (o *TollSection) SetApproximated(v bool) {
	o.Approximated = &v
}

func (o TollSection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TollSection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["costs"] = o.Costs
	toSerialize["tollRoadType"] = o.TollRoadType
	if !IsNil(o.TollSystemIndex) {
		toSerialize["tollSystemIndex"] = o.TollSystemIndex
	}
	toSerialize["countryCode"] = o.CountryCode
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.OfficialDistance) {
		toSerialize["officialDistance"] = o.OfficialDistance
	}
	if !IsNil(o.CalculatedDistance) {
		toSerialize["calculatedDistance"] = o.CalculatedDistance
	}
	if !IsNil(o.Approximated) {
		toSerialize["approximated"] = o.Approximated
	}
	return toSerialize, nil
}

func (o *TollSection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"costs",
		"tollRoadType",
		"countryCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTollSection := _TollSection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTollSection)

	if err != nil {
		return err
	}

	*o = TollSection(varTollSection)

	return err
}

type NullableTollSection struct {
	value *TollSection
	isSet bool
}

func (v NullableTollSection) Get() *TollSection {
	return v.value
}

func (v *NullableTollSection) Set(val *TollSection) {
	v.value = val
	v.isSet = true
}

func (v NullableTollSection) IsSet() bool {
	return v.isSet
}

func (v *NullableTollSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTollSection(val *TollSection) *NullableTollSection {
	return &NullableTollSection{value: val, isSet: true}
}

func (v NullableTollSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTollSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


