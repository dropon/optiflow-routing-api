/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TollSectionCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TollSectionCost{}

// TollSectionCost struct for TollSectionCost
type TollSectionCost struct {
	// The price in the specified currency.
	Price float64 `json:"price"`
	// The currency code according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
	Currency string `json:"currency"`
	// The payment methods for toll costs.    * `ELECTRONIC_TOLL_COLLECTION_SUBSCRIPTION` - Electronic toll collection system with a subscription required.    * `ELECTRONIC_TOLL_COLLECTION` - Electronic toll collection system with no subscription required.    * `CASH` - Cash payment at a toll booth.    * `CREDIT_CARD` - Credit card payment at a toll booth.
	PaymentMethods []PaymentMethod `json:"paymentMethods,omitempty"`
	// The required electronic toll collection subscriptions for the payment method _ELECTRONIC_TOLL_COLLECTION_SUBSCRIPTION_.
	EtcSubscriptions []string `json:"etcSubscriptions,omitempty"`
	// The price of the section in the converted currency.
	ConvertedPrice *TollPrice `json:"convertedPrice,omitempty"`
}

type _TollSectionCost TollSectionCost

// NewTollSectionCost instantiates a new TollSectionCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTollSectionCost(price float64, currency string) *TollSectionCost {
	this := TollSectionCost{}
	this.Price = price
	this.Currency = currency
	return &this
}

// NewTollSectionCostWithDefaults instantiates a new TollSectionCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTollSectionCostWithDefaults() *TollSectionCost {
	this := TollSectionCost{}
	return &this
}

// GetPrice returns the Price field value
func (o *TollSectionCost) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *TollSectionCost) GetPriceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *TollSectionCost) SetPrice(v float64) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *TollSectionCost) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TollSectionCost) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TollSectionCost) SetCurrency(v string) {
	o.Currency = v
}

// GetPaymentMethods returns the PaymentMethods field value if set, zero value otherwise.
func (o *TollSectionCost) GetPaymentMethods() []PaymentMethod {
	if o == nil || IsNil(o.PaymentMethods) {
		var ret []PaymentMethod
		return ret
	}
	return o.PaymentMethods
}

// GetPaymentMethodsOk returns a tuple with the PaymentMethods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSectionCost) GetPaymentMethodsOk() ([]PaymentMethod, bool) {
	if o == nil || IsNil(o.PaymentMethods) {
		return nil, false
	}
	return o.PaymentMethods, true
}

// HasPaymentMethods returns a boolean if a field has been set.
func (o *TollSectionCost) HasPaymentMethods() bool {
	if o != nil && !IsNil(o.PaymentMethods) {
		return true
	}

	return false
}

// SetPaymentMethods gets a reference to the given []PaymentMethod and assigns it to the PaymentMethods field.
func (o *TollSectionCost) SetPaymentMethods(v []PaymentMethod) {
	o.PaymentMethods = v
}

// GetEtcSubscriptions returns the EtcSubscriptions field value if set, zero value otherwise.
func (o *TollSectionCost) GetEtcSubscriptions() []string {
	if o == nil || IsNil(o.EtcSubscriptions) {
		var ret []string
		return ret
	}
	return o.EtcSubscriptions
}

// GetEtcSubscriptionsOk returns a tuple with the EtcSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSectionCost) GetEtcSubscriptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.EtcSubscriptions) {
		return nil, false
	}
	return o.EtcSubscriptions, true
}

// HasEtcSubscriptions returns a boolean if a field has been set.
func (o *TollSectionCost) HasEtcSubscriptions() bool {
	if o != nil && !IsNil(o.EtcSubscriptions) {
		return true
	}

	return false
}

// SetEtcSubscriptions gets a reference to the given []string and assigns it to the EtcSubscriptions field.
func (o *TollSectionCost) SetEtcSubscriptions(v []string) {
	o.EtcSubscriptions = v
}

// GetConvertedPrice returns the ConvertedPrice field value if set, zero value otherwise.
func (o *TollSectionCost) GetConvertedPrice() TollPrice {
	if o == nil || IsNil(o.ConvertedPrice) {
		var ret TollPrice
		return ret
	}
	return *o.ConvertedPrice
}

// GetConvertedPriceOk returns a tuple with the ConvertedPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSectionCost) GetConvertedPriceOk() (*TollPrice, bool) {
	if o == nil || IsNil(o.ConvertedPrice) {
		return nil, false
	}
	return o.ConvertedPrice, true
}

// HasConvertedPrice returns a boolean if a field has been set.
func (o *TollSectionCost) HasConvertedPrice() bool {
	if o != nil && !IsNil(o.ConvertedPrice) {
		return true
	}

	return false
}

// SetConvertedPrice gets a reference to the given TollPrice and assigns it to the ConvertedPrice field.
func (o *TollSectionCost) SetConvertedPrice(v TollPrice) {
	o.ConvertedPrice = &v
}

func (o TollSectionCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TollSectionCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	if !IsNil(o.PaymentMethods) {
		toSerialize["paymentMethods"] = o.PaymentMethods
	}
	if !IsNil(o.EtcSubscriptions) {
		toSerialize["etcSubscriptions"] = o.EtcSubscriptions
	}
	if !IsNil(o.ConvertedPrice) {
		toSerialize["convertedPrice"] = o.ConvertedPrice
	}
	return toSerialize, nil
}

func (o *TollSectionCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"price",
		"currency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTollSectionCost := _TollSectionCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTollSectionCost)

	if err != nil {
		return err
	}

	*o = TollSectionCost(varTollSectionCost)

	return err
}

type NullableTollSectionCost struct {
	value *TollSectionCost
	isSet bool
}

func (v NullableTollSectionCost) Get() *TollSectionCost {
	return v.value
}

func (v *NullableTollSectionCost) Set(val *TollSectionCost) {
	v.value = val
	v.isSet = true
}

func (v NullableTollSectionCost) IsSet() bool {
	return v.isSet
}

func (v *NullableTollSectionCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTollSectionCost(val *TollSectionCost) *NullableTollSectionCost {
	return &NullableTollSectionCost{value: val, isSet: true}
}

func (v NullableTollSectionCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTollSectionCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


