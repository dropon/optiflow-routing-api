/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TollSystem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TollSystem{}

// TollSystem struct for TollSystem
type TollSystem struct {
	// The name of the toll system.
	Name string `json:"name"`
	// The name of the toll operator.
	OperatorName *string `json:"operatorName,omitempty"`
	// The tariff version that has been used.
	TariffVersion *string `json:"tariffVersion,omitempty"`
	// The starting date of the tariff version validity formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	TariffVersionValidFrom *time.Time `json:"tariffVersionValidFrom,omitempty"`
}

type _TollSystem TollSystem

// NewTollSystem instantiates a new TollSystem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTollSystem(name string) *TollSystem {
	this := TollSystem{}
	this.Name = name
	return &this
}

// NewTollSystemWithDefaults instantiates a new TollSystem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTollSystemWithDefaults() *TollSystem {
	this := TollSystem{}
	return &this
}

// GetName returns the Name field value
func (o *TollSystem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TollSystem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TollSystem) SetName(v string) {
	o.Name = v
}

// GetOperatorName returns the OperatorName field value if set, zero value otherwise.
func (o *TollSystem) GetOperatorName() string {
	if o == nil || IsNil(o.OperatorName) {
		var ret string
		return ret
	}
	return *o.OperatorName
}

// GetOperatorNameOk returns a tuple with the OperatorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSystem) GetOperatorNameOk() (*string, bool) {
	if o == nil || IsNil(o.OperatorName) {
		return nil, false
	}
	return o.OperatorName, true
}

// HasOperatorName returns a boolean if a field has been set.
func (o *TollSystem) HasOperatorName() bool {
	if o != nil && !IsNil(o.OperatorName) {
		return true
	}

	return false
}

// SetOperatorName gets a reference to the given string and assigns it to the OperatorName field.
func (o *TollSystem) SetOperatorName(v string) {
	o.OperatorName = &v
}

// GetTariffVersion returns the TariffVersion field value if set, zero value otherwise.
func (o *TollSystem) GetTariffVersion() string {
	if o == nil || IsNil(o.TariffVersion) {
		var ret string
		return ret
	}
	return *o.TariffVersion
}

// GetTariffVersionOk returns a tuple with the TariffVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSystem) GetTariffVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TariffVersion) {
		return nil, false
	}
	return o.TariffVersion, true
}

// HasTariffVersion returns a boolean if a field has been set.
func (o *TollSystem) HasTariffVersion() bool {
	if o != nil && !IsNil(o.TariffVersion) {
		return true
	}

	return false
}

// SetTariffVersion gets a reference to the given string and assigns it to the TariffVersion field.
func (o *TollSystem) SetTariffVersion(v string) {
	o.TariffVersion = &v
}

// GetTariffVersionValidFrom returns the TariffVersionValidFrom field value if set, zero value otherwise.
func (o *TollSystem) GetTariffVersionValidFrom() time.Time {
	if o == nil || IsNil(o.TariffVersionValidFrom) {
		var ret time.Time
		return ret
	}
	return *o.TariffVersionValidFrom
}

// GetTariffVersionValidFromOk returns a tuple with the TariffVersionValidFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TollSystem) GetTariffVersionValidFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TariffVersionValidFrom) {
		return nil, false
	}
	return o.TariffVersionValidFrom, true
}

// HasTariffVersionValidFrom returns a boolean if a field has been set.
func (o *TollSystem) HasTariffVersionValidFrom() bool {
	if o != nil && !IsNil(o.TariffVersionValidFrom) {
		return true
	}

	return false
}

// SetTariffVersionValidFrom gets a reference to the given time.Time and assigns it to the TariffVersionValidFrom field.
func (o *TollSystem) SetTariffVersionValidFrom(v time.Time) {
	o.TariffVersionValidFrom = &v
}

func (o TollSystem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TollSystem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.OperatorName) {
		toSerialize["operatorName"] = o.OperatorName
	}
	if !IsNil(o.TariffVersion) {
		toSerialize["tariffVersion"] = o.TariffVersion
	}
	if !IsNil(o.TariffVersionValidFrom) {
		toSerialize["tariffVersionValidFrom"] = o.TariffVersionValidFrom
	}
	return toSerialize, nil
}

func (o *TollSystem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTollSystem := _TollSystem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTollSystem)

	if err != nil {
		return err
	}

	*o = TollSystem(varTollSystem)

	return err
}

type NullableTollSystem struct {
	value *TollSystem
	isSet bool
}

func (v NullableTollSystem) Get() *TollSystem {
	return v.value
}

func (v *NullableTollSystem) Set(val *TollSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableTollSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableTollSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTollSystem(val *TollSystem) *NullableTollSystem {
	return &NullableTollSystem{value: val, isSet: true}
}

func (v NullableTollSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTollSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


