/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrafficEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficEvent{}

// TrafficEvent Issued when the route passes a road for which live traffic data contain an incident such as a traffic jam. Requires _TRAFFIC_EVENTS_ to be requested.
type TrafficEvent struct {
	// The delay due to this incident [s].
	Delay int32 `json:"delay"`
	// The description of the incident in the language specified by the parameter **options[language]**. 
	Description *string `json:"description,omitempty"`
	// The language of the description, if the given language is not supported for this incident. Not present otherwise.
	Language *string `json:"language,omitempty" validate:"regexp=[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"`
	AccessType AccessType `json:"accessType"`
	// For **accessType** _ENTER_ this index points to the corresponding event with **accessType** _EXIT_ and vice-versa. Not present otherwise.
	RelatedEventIndex *int32 `json:"relatedEventIndex,omitempty"`
	// The polyline of the traffic event in the format specified by **options[polylineFormat]**. Only present for **accessType** _ENTER_. Requires _TRAFFIC_EVENTS_POLYLINE_ to be requested.
	Polyline *string `json:"polyline,omitempty"`
}

type _TrafficEvent TrafficEvent

// NewTrafficEvent instantiates a new TrafficEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficEvent(delay int32, accessType AccessType) *TrafficEvent {
	this := TrafficEvent{}
	this.Delay = delay
	this.AccessType = accessType
	return &this
}

// NewTrafficEventWithDefaults instantiates a new TrafficEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficEventWithDefaults() *TrafficEvent {
	this := TrafficEvent{}
	return &this
}

// GetDelay returns the Delay field value
func (o *TrafficEvent) GetDelay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Delay
}

// GetDelayOk returns a tuple with the Delay field value
// and a boolean to check if the value has been set.
func (o *TrafficEvent) GetDelayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delay, true
}

// SetDelay sets field value
func (o *TrafficEvent) SetDelay(v int32) {
	o.Delay = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrafficEvent) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficEvent) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrafficEvent) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrafficEvent) SetDescription(v string) {
	o.Description = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *TrafficEvent) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficEvent) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *TrafficEvent) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *TrafficEvent) SetLanguage(v string) {
	o.Language = &v
}

// GetAccessType returns the AccessType field value
func (o *TrafficEvent) GetAccessType() AccessType {
	if o == nil {
		var ret AccessType
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *TrafficEvent) GetAccessTypeOk() (*AccessType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *TrafficEvent) SetAccessType(v AccessType) {
	o.AccessType = v
}

// GetRelatedEventIndex returns the RelatedEventIndex field value if set, zero value otherwise.
func (o *TrafficEvent) GetRelatedEventIndex() int32 {
	if o == nil || IsNil(o.RelatedEventIndex) {
		var ret int32
		return ret
	}
	return *o.RelatedEventIndex
}

// GetRelatedEventIndexOk returns a tuple with the RelatedEventIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficEvent) GetRelatedEventIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.RelatedEventIndex) {
		return nil, false
	}
	return o.RelatedEventIndex, true
}

// HasRelatedEventIndex returns a boolean if a field has been set.
func (o *TrafficEvent) HasRelatedEventIndex() bool {
	if o != nil && !IsNil(o.RelatedEventIndex) {
		return true
	}

	return false
}

// SetRelatedEventIndex gets a reference to the given int32 and assigns it to the RelatedEventIndex field.
func (o *TrafficEvent) SetRelatedEventIndex(v int32) {
	o.RelatedEventIndex = &v
}

// GetPolyline returns the Polyline field value if set, zero value otherwise.
func (o *TrafficEvent) GetPolyline() string {
	if o == nil || IsNil(o.Polyline) {
		var ret string
		return ret
	}
	return *o.Polyline
}

// GetPolylineOk returns a tuple with the Polyline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficEvent) GetPolylineOk() (*string, bool) {
	if o == nil || IsNil(o.Polyline) {
		return nil, false
	}
	return o.Polyline, true
}

// HasPolyline returns a boolean if a field has been set.
func (o *TrafficEvent) HasPolyline() bool {
	if o != nil && !IsNil(o.Polyline) {
		return true
	}

	return false
}

// SetPolyline gets a reference to the given string and assigns it to the Polyline field.
func (o *TrafficEvent) SetPolyline(v string) {
	o.Polyline = &v
}

func (o TrafficEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delay"] = o.Delay
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	toSerialize["accessType"] = o.AccessType
	if !IsNil(o.RelatedEventIndex) {
		toSerialize["relatedEventIndex"] = o.RelatedEventIndex
	}
	if !IsNil(o.Polyline) {
		toSerialize["polyline"] = o.Polyline
	}
	return toSerialize, nil
}

func (o *TrafficEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delay",
		"accessType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrafficEvent := _TrafficEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrafficEvent)

	if err != nil {
		return err
	}

	*o = TrafficEvent(varTrafficEvent)

	return err
}

type NullableTrafficEvent struct {
	value *TrafficEvent
	isSet bool
}

func (v NullableTrafficEvent) Get() *TrafficEvent {
	return v.value
}

func (v *NullableTrafficEvent) Set(val *TrafficEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficEvent(val *TrafficEvent) *NullableTrafficEvent {
	return &NullableTrafficEvent{value: val, isSet: true}
}

func (v NullableTrafficEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


