/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TruckRoutes the model 'TruckRoutes'
type TruckRoutes string

// List of TruckRoutes
const (
	DE_LKWUEBERLSTVAUSNV TruckRoutes = "DE_LKWUEBERLSTVAUSNV"
	NL_LZV TruckRoutes = "NL_LZV"
	NZ_HPMV TruckRoutes = "NZ_HPMV"
	SE_BK_1 TruckRoutes = "SE_BK_1"
	SE_BK_2 TruckRoutes = "SE_BK_2"
	SE_BK_3 TruckRoutes = "SE_BK_3"
	SE_BK_4 TruckRoutes = "SE_BK_4"
	US_STAA TruckRoutes = "US_STAA"
	US_TD TruckRoutes = "US_TD"
	AU_B_DOUBLE TruckRoutes = "AU_B_DOUBLE"
	AU_B_DOUBLE_HML TruckRoutes = "AU_B_DOUBLE_HML"
	AU_B_TRIPLE TruckRoutes = "AU_B_TRIPLE"
	AU_B_TRIPLE_HML TruckRoutes = "AU_B_TRIPLE_HML"
	AU_AB_TRIPLE TruckRoutes = "AU_AB_TRIPLE"
	AU_AB_TRIPLE_HML TruckRoutes = "AU_AB_TRIPLE_HML"
	GENERAL_TRUCK_ROUTES TruckRoutes = "GENERAL_TRUCK_ROUTES"
	NONE TruckRoutes = "NONE"
)

// All allowed values of TruckRoutes enum
var AllowedTruckRoutesEnumValues = []TruckRoutes{
	"DE_LKWUEBERLSTVAUSNV",
	"NL_LZV",
	"NZ_HPMV",
	"SE_BK_1",
	"SE_BK_2",
	"SE_BK_3",
	"SE_BK_4",
	"US_STAA",
	"US_TD",
	"AU_B_DOUBLE",
	"AU_B_DOUBLE_HML",
	"AU_B_TRIPLE",
	"AU_B_TRIPLE_HML",
	"AU_AB_TRIPLE",
	"AU_AB_TRIPLE_HML",
	"GENERAL_TRUCK_ROUTES",
	"NONE",
}

func (v *TruckRoutes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TruckRoutes(value)
	for _, existing := range AllowedTruckRoutesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TruckRoutes", value)
}

// NewTruckRoutesFromValue returns a pointer to a valid TruckRoutes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTruckRoutesFromValue(v string) (*TruckRoutes, error) {
	ev := TruckRoutes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TruckRoutes: valid values are %v", v, AllowedTruckRoutesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TruckRoutes) IsValid() bool {
	for _, existing := range AllowedTruckRoutesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TruckRoutes value
func (v TruckRoutes) Ptr() *TruckRoutes {
	return &v
}

type NullableTruckRoutes struct {
	value *TruckRoutes
	isSet bool
}

func (v NullableTruckRoutes) Get() *TruckRoutes {
	return v.value
}

func (v *NullableTruckRoutes) Set(val *TruckRoutes) {
	v.value = val
	v.isSet = true
}

func (v NullableTruckRoutes) IsSet() bool {
	return v.isSet
}

func (v *NullableTruckRoutes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTruckRoutes(val *TruckRoutes) *NullableTruckRoutes {
	return &NullableTruckRoutes{value: val, isSet: true}
}

func (v NullableTruckRoutes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTruckRoutes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

