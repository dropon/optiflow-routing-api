/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle struct for Vehicle
type Vehicle struct {
	EngineType *EngineType `json:"engineType,omitempty"`
	FuelType *FuelType `json:"fuelType,omitempty"`
	ElectricityType *ElectricityType `json:"electricityType,omitempty"`
	// The average fuel consumption of the vehicle. Depending on the **fuelType** [l/100km] for liquid fuel types or [kg/100km] for gaseous fuel types.  Supported for **engineType** _COMBUSTION_  or _HYBRID_. Relevant for `emissions`. 
	AverageFuelConsumption *float64 `json:"averageFuelConsumption,omitempty"`
	// The average electricity consumption of the vehicle [kWh/100km].  Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for `emissions`. 
	AverageElectricityConsumption *float64 `json:"averageElectricityConsumption,omitempty"`
	// The ratio of biofuel to conventional fuel [%], i.e. 10 for E10 with 10% biofuel.  Supported for **engineType** _COMBUSTION_ or _HYBRID_ and only for the fuel types _GASOLINE_, _DIESEL_, _CNG_GASOLINE_ and _LNG_GASOLINE_. Relevant for `emissions`. 
	BioFuelRatio *int32 `json:"bioFuelRatio,omitempty"`
	// Electric energy usage ratio from the total amount of energy consumed by the vehicle.  Supported for **engineType** _HYBRID_. Relevant for `emissions`. 
	HybridRatio *int32 `json:"hybridRatio,omitempty"`
	// Ratio of CNG or LPG usage from the total amount of fuel consumption.  Supported for **engineType** _COMBUSTION_ with **fuelType**  _CNG_GASOLINE_ or _LPG_GASOLINE_. Relevant for `emissions`. 
	DualFuelRatio *int32 `json:"dualFuelRatio,omitempty"`
	// The cylinder capacity of the vehicle [cm&#x00B3;]. This value is present for compatibility reasons and does not influence any of the results.  Supported for **engineType** _COMBUSTION_ or _HYBRID_. 
	CylinderCapacity *int32 `json:"cylinderCapacity,omitempty"`
	EmissionStandard *EmissionStandard `json:"emissionStandard,omitempty"`
	// The CO&#8322; emission class valid in the European Union. See also the  [Directive 1999/62/EC](https://eur-lex.europa.eu/eli/dir/1999/62/2022-03-24) of the European Parliament and  of the Council on the charging of heavy goods vehicles for the use of certain infrastructures, Article 7ga.  Must be 1 for combustion and hybrid vehicles with any **emissionStandard**, 2-4 for combustion and hybrid vehicles with **emissionStandard** of at least _EURO_6_, and 5 for electric vehicles.   Relevant for `toll`. 
	Co2EmissionClass *int32 `json:"co2EmissionClass,omitempty"`
	// Comma-separated list of the low-emission zone types of the vehicle. This parameter is deprecated and superseded by **lowEmissionZoneApprovals**. When still being used, only low-emission zones in Germany are affected, zones in other countries which need an environmental badge or vehicle registration can be entered without restriction. It is not possible to specify both parameters.  Available values are provided by type `LowEmissionZoneTypes`:  \"DE_GREEN\" \"DE_YELLOW\" \"DE_RED\" \"DE_NONE\"  Relevant for `routing`. 
	// Deprecated
	LowEmissionZoneTypes *string `json:"lowEmissionZoneTypes,omitempty"`
	// Comma-separated list of approvals to enter low-emission zones. Usually, such approvals are environmental badges to be placed on the windscreen, but that can also be any other kind of approval or vehicle registration allowing it to enter a low-emission zone.  Low-emission zones which do not need any kind of approval but depend only on the **emissionStandard** are not affected by this parameter. Instead they can be entered if the **emissionStandard**  is sufficient. Electric vehicles can always enter these zones.  The default of the selected predefined profile allows entering all low-emission zones the vehicle can get an approval for. So, if you do not want to care about that and your  vehicle operates in a region where it has all necessary approvals, leave this parameter empty.  In order to consider low-emission zones depending on the actually available approvals, i.e. on  the environmental badges on the windscreen and other vehicle registrations, specify all of them here. The vehicle can then enter only those zones for which a proper approval is present. Low-emission zones in countries for which no value is specified cannot be entered.  Available values are provided by type `LowEmissionZoneApprovals`. \"NONE\" \"AT_EURO_1\" \"AT_EURO_2\" \"AT_EURO_3\" \"AT_EURO_4\" \"AT_EURO_5\" \"AT_EURO_6\" \"DE_GREEN\" \"DE_YELLOW\" \"DE_RED\" \"DK_AUTHORIZED\" \"ES_CAT_B\" \"ES_CAT_C\" \"ES_CAT_ECO\" \"ES_CAT_ZERO\" \"FR_CRITAIR_0\" \"FR_CRITAIR_1\" \"FR_CRITAIR_2\" \"FR_CRITAIR_3\" \"FR_CRITAIR_4\" \"FR_CRITAIR_5\"  Only one value per country can be specified. Relevant for `routing`. See [here](./concepts/low-emission-zones) for more information. 
	LowEmissionZoneApprovals *string `json:"lowEmissionZoneApprovals,omitempty"`
	// Comma-separated list of exemptions to enter low-emission zones.  Available values are provided by type `LowEmissionZoneExemptions`: \"BE_LAGE_EMISSIEZONE_ANTWERPEN\" \"BE_LAGE_EMISSIEZONE_GENT\" \"BE_ZONE_BASSE_EMISSION_BRUXELLES\" \"DK_AALBORG_MILJOZONE\" \"DK_ARHUS_MILJOZONE\" \"DK_FREDERIKSBERG_MILJOZONE\" \"DK_KOBENHAVN_MILJOZONE\" \"DK_ODENSE_MILJOZONE\" \"ES_ZBE_ALMERIA\" \"ES_ZBE_BILBAO\" \"ES_ZBE_CORDOBA\" \"ES_ZBE_SAN_SEBASTIAN\" \"ES_ZBE_TORREMOLINOS\" \"ES_ZBE_VALLADOLID\" \"FR_STRASBOURG_ZFE\" \"GB_ABERDEEN_LEZ\" \"GB_BATH_CAZ\" \"GB_BIRMINGHAM_CAZ\" \"GB_BRADFORD_CAZ\" \"GB_BRISTOL_CAZ\" \"GB_DUNDEE_LEZ\" \"GB_EDINBURGH_LEZ\" \"GB_GLASGOW_LEZ\" \"GB_LONDON_ULTRA_LOW_EMISSION_ZONE\" \"GB_NEWCASTLE_CAZ\" \"GB_PORTSMOUTH_CAZ\" \"GB_SHEFFIELD_CAZ\" \"IT_MILANO_AREA_C\" \"IT_PALERMO_ZTL\" \"NL_AMSTERDAM_MILIEUZONE\" \"NL_AMSTERDAM_ZERO_EMISSIEZONE\" \"NL_ARNHEM_MILIEUZONE\" \"NL_ASSEN_ZERO_EMISSIEZONE\" \"NL_BREDA_MILIEUZONE\" \"NL_DELFT_HAAG_ZERO_EMISSIEZONE\" \"NL_DELFT_MILIEUZONE\" \"NL_DEN_HAAG_MILIEUZONE\" \"NL_DEN_HAAG_ZERO_EMISSIEZONE\" \"NL_EINDHOVEN_MILIEUZONE\" \"NL_EINDHOVEN_ZERO_EMISSIEZONE\" \"NL_GOUDA_ZERO_EMISSIEZONE\" \"NL_HAARLEM_MILIEUZONE\" \"NL_LEIDEN_MILIEUZONE\" \"NL_LEIDEN_ZERO_EMISSIEZONE\" \"NL_MAASTRICHT_MILIEUZONE\" \"NL_MAASTRICHT_ZERO_EMISSIEZONE\" \"NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE\" \"NL_NIJMEGEN_ZERO_EMISSIEZONE\" \"NL_RIJSWIJK_MILIEUZONE\" \"NL_ROTTERDAM_MILIEUZONE\" \"NL_ROTTERDAM_ZERO_EMISSIEZONE\" \"NL_S_GRAVENDIJKWAL_MILIEUZONE\" \"NL_S_HERTOGENBOSCH_MILIEUZONE\" \"NL_TILBURG_MILIEUZONE\" \"NL_TILBURG_ZERO_EMISSIEZONE\" \"NL_UTRECHT_MILIEUZONE\" \"NL_UTRECHT_ZERO_EMISSIEZONE\" \"NL_ZWOLLE_ZERO_EMISSIEZONE\"             Relevant for `routing`. See [here](./concepts/low-emission-zones) for more information. 
	LowEmissionZoneExemptions *string `json:"lowEmissionZoneExemptions,omitempty"`
	ParticleReductionClass *ParticleReductionClass `json:"particleReductionClass,omitempty"`
	// The empty weight of the vehicle [kg].  Relevant for `routing`, `emissions`, `range calculation`. 
	EmptyWeight *int32 `json:"emptyWeight,omitempty"`
	// The weight of the vehicle's load [kg].  Relevant for `routing`, `emissions`, `range calculation`. 
	LoadWeight *int32 `json:"loadWeight,omitempty"`
	// The total permitted weight of the vehicle and its load [kg]. This is the weight the vehicle is usually registered with. If this value is not specified but **totalTechnicallyPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for `routing`, `toll`, `emissions`. 
	TotalPermittedWeight *int32 `json:"totalPermittedWeight,omitempty"`
	// The total technically permitted weight of the vehicle and its load [kg].  Sometimes vehicles are registered with a smaller **totalPermittedWeight** than technically possible. For  such cases the possibly larger total technically permitted weight is specified here, it is relevant for  toll calculation in some European countries. If this value is not specified but **totalPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for `toll`. 
	TotalTechnicallyPermittedWeight *int32 `json:"totalTechnicallyPermittedWeight,omitempty"`
	// The maximum distributed weight that may be supported by an axle of the vehicle [kg].  Relevant for `routing`, `toll`. 
	AxleWeight *int32 `json:"axleWeight,omitempty"`
	// The total number of axles of the vehicle including the trailers.  Relevant for `toll`. 
	NumberOfAxles *int32 `json:"numberOfAxles,omitempty"`
	// The total number of tires of the vehicle including the trailers.  Relevant for `toll`. 
	NumberOfTires *int32 `json:"numberOfTires,omitempty"`
	// The height of the vehicle [cm].  Relevant for `routing`, `toll`. 
	Height *int32 `json:"height,omitempty"`
	// The height above the front axle [cm].  Relevant for `toll`. 
	HeightAboveFrontAxle *int32 `json:"heightAboveFrontAxle,omitempty"`
	// The length of the vehicle [cm].  Relevant for `routing`, `toll`. 
	Length *int32 `json:"length,omitempty"`
	// The width of the vehicle [cm].  Relevant for `routing`, `toll`. 
	Width *int32 `json:"width,omitempty"`
	// Comma-separated list of hazardous materials the vehicle has loaded. If none of the specific values applies, specify _OTHER_ to mark the vehicle carrying unspecific hazardous materials. If _NONE_ is specified along with other hazardous materials it is ignored. Depending on the load the route will avoid roads prohibited for and/or prefer roads prescribed for specific hazardous materials.  Available values are provided by type `HazardousMaterials`:  \"HAZARDOUS_TO_WATER\" \"EXPLOSIVE\" \"FLAMMABLE\" \"RADIOACTIVE\" \"INHALATION_HAZARD\" \"MEDICAL_WASTE\" \"OTHER\" \"NONE\"  Relevant for `routing`. 
	HazardousMaterials *string `json:"hazardousMaterials,omitempty"`
	TunnelRestrictionCode *TunnelRestrictionCode `json:"tunnelRestrictionCode,omitempty"`
	// Comma-separated list of truck routes the vehicle has to follow.  Available values are provided by type `TruckRoutes`:  * `DE_LKWUEBERLSTVAUSNV`  Preferred routes for long trucks in Germany, also known as Lang-LKW.  * `NL_LZV`  Preferred routes for long trucks in the Netherlands, also known as LZV (Langere en Zwaardere Vrachtautocombinatie).  * `NZ_HPMV`  The network for High Productivity Motor Vehicles (HPMV) carrying the maximum loads available under a permit (New Zealand Transport Agency).  * `SE_BK_1`  Public roads and bridges that support up to 64 t total permitted weight (Swedish Transport Administration).  * `SE_BK_2`  Public roads and bridges that support up to 51.4 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * `SE_BK_3`  Public roads and bridges that support up to 37.5 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * `SE_BK_4`  Public roads and bridges that support up to 74 t total permitted weight (draft summer 2018, Swedish Transport Administration).  * `US_STAA`  Routes that belong to the highway network as defined by the Surface Transportation Assistance Act in the US.  * `US_TD`  Part of a state-designated highway network for trucks in the US.  * `AU_B_DOUBLE`  B-Double routes as defined in Australia.  * `AU_B_DOUBLE_HML`  Routes for B-Double vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * `AU_B_TRIPLE`  B-Triple routes as defined in Australia.  * `AU_B_TRIPLE_HML`  Routes for B-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * `AU_AB_TRIPLE`  Routes for AB-Triple vehicle combinations operating (Australian Transport Administration).  * `AU_AB_TRIPLE_HML`  Routes for AB-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * `GENERAL_TRUCK_ROUTES`  General routes designated for trucks, for example to prevent trucks routing through city centres when they are on transit.  * `NONE`  Overrides the profile settings to specify not to follow any truck routes.   If _NONE_ is specified along with other truck routes it is ignored.  This parameter will be ignored for non-truck profiles, e.g. _EUR_CAR_, _EUR_VAN_, _USA_1_PICKUP_ or _AUS_LCV_LIGHT_COMMERCIAL_ and for routing modes other than _FAST_. Relevant for `routing`. 
	TruckRoutes *string `json:"truckRoutes,omitempty"`
	// Specifies if the vehicle usage is commercial.  Relevant for `toll`. 
	Commercial *bool `json:"commercial,omitempty"`
	// Comma-separated list of ETC Subscriptions. See [here](./concepts/electronic-toll-collection) for more information on available subscriptions.  Available values are provided by type `EtcSubscriptionTypes`:  \"AT_GOBOX\" \"BE_TELETOL\" \"BE_VIAPASS\" \"CH_LSVA\" \"DE_QUICKBOX\" \"DE_TOLLCOLLECT\" \"DE_WARNOWTUNNEL_RFID\" \"DK_BROPAS_BUSINESS\" \"IT_TELEPASS\" \"NL_TELECARD\" \"NL_TTAG\" \"NO_AUTOPASS\" \"PT_VIA_VERDE\" \"US_APASS\" \"US_BREEZEBY\" \"US_DOWNBEACH_EXPRESSPASS\" \"US_EPASS\" \"US_EXPRESSACCOUNT\" \"US_EXPRESSCARD\" \"US_EXPRESSPASS\" \"US_EXPRESSTOLL\" \"US_EZPASS\" \"US_EZTAG\" \"US_FASTRAK\" \"US_GEAUXPASS\" \"US_GOODTOGO\" \"US_GOPASS\" \"US_IPASS\" \"US_KTAG\" \"US_LEEWAY\" \"US_MACKINACBRIDGE_MACPASS\" \"US_MARYLAND_EZPASS\" \"US_MASSACHUSETTS_EZPASS\" \"US_NC_QUICKPASS\" \"US_NEWHAMPSHIRE_EZPASS\" \"US_NEWJERSEY_EZPASS\" \"US_NEWYORK_EZPASS\" \"US_NEXPRESS\" \"US_OHIO_EZPASS\" \"US_PALPASS\" \"US_PIKEPASS\" \"US_RIVERLINK\" \"US_RIVERLINK_NOTRANSPONDER\" \"US_SEAWAYTRANSITCARD\" \"US_SUNPASS\" \"US_TOLLTAG\" \"US_TXTAG\" \"US_VIRGINIA_EZPASS\" \"US_WESTVIRGINIA_EZPASS\" \"US_PEACHPASS\" \"US_NEXUS\" \"US_DELAWARE_EZPASS\" \"US_GROSSEILETOLLBRIDGE_PASSTAG\" \"US_EZPASS_PAYBYPLATE\"  Relevant for `toll`. 
	EtcSubscriptions *string `json:"etcSubscriptions,omitempty"`
}

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle() *Vehicle {
	this := Vehicle{}
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	return &this
}

// GetEngineType returns the EngineType field value if set, zero value otherwise.
func (o *Vehicle) GetEngineType() EngineType {
	if o == nil || IsNil(o.EngineType) {
		var ret EngineType
		return ret
	}
	return *o.EngineType
}

// GetEngineTypeOk returns a tuple with the EngineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEngineTypeOk() (*EngineType, bool) {
	if o == nil || IsNil(o.EngineType) {
		return nil, false
	}
	return o.EngineType, true
}

// HasEngineType returns a boolean if a field has been set.
func (o *Vehicle) HasEngineType() bool {
	if o != nil && !IsNil(o.EngineType) {
		return true
	}

	return false
}

// SetEngineType gets a reference to the given EngineType and assigns it to the EngineType field.
func (o *Vehicle) SetEngineType(v EngineType) {
	o.EngineType = &v
}

// GetFuelType returns the FuelType field value if set, zero value otherwise.
func (o *Vehicle) GetFuelType() FuelType {
	if o == nil || IsNil(o.FuelType) {
		var ret FuelType
		return ret
	}
	return *o.FuelType
}

// GetFuelTypeOk returns a tuple with the FuelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetFuelTypeOk() (*FuelType, bool) {
	if o == nil || IsNil(o.FuelType) {
		return nil, false
	}
	return o.FuelType, true
}

// HasFuelType returns a boolean if a field has been set.
func (o *Vehicle) HasFuelType() bool {
	if o != nil && !IsNil(o.FuelType) {
		return true
	}

	return false
}

// SetFuelType gets a reference to the given FuelType and assigns it to the FuelType field.
func (o *Vehicle) SetFuelType(v FuelType) {
	o.FuelType = &v
}

// GetElectricityType returns the ElectricityType field value if set, zero value otherwise.
func (o *Vehicle) GetElectricityType() ElectricityType {
	if o == nil || IsNil(o.ElectricityType) {
		var ret ElectricityType
		return ret
	}
	return *o.ElectricityType
}

// GetElectricityTypeOk returns a tuple with the ElectricityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetElectricityTypeOk() (*ElectricityType, bool) {
	if o == nil || IsNil(o.ElectricityType) {
		return nil, false
	}
	return o.ElectricityType, true
}

// HasElectricityType returns a boolean if a field has been set.
func (o *Vehicle) HasElectricityType() bool {
	if o != nil && !IsNil(o.ElectricityType) {
		return true
	}

	return false
}

// SetElectricityType gets a reference to the given ElectricityType and assigns it to the ElectricityType field.
func (o *Vehicle) SetElectricityType(v ElectricityType) {
	o.ElectricityType = &v
}

// GetAverageFuelConsumption returns the AverageFuelConsumption field value if set, zero value otherwise.
func (o *Vehicle) GetAverageFuelConsumption() float64 {
	if o == nil || IsNil(o.AverageFuelConsumption) {
		var ret float64
		return ret
	}
	return *o.AverageFuelConsumption
}

// GetAverageFuelConsumptionOk returns a tuple with the AverageFuelConsumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetAverageFuelConsumptionOk() (*float64, bool) {
	if o == nil || IsNil(o.AverageFuelConsumption) {
		return nil, false
	}
	return o.AverageFuelConsumption, true
}

// HasAverageFuelConsumption returns a boolean if a field has been set.
func (o *Vehicle) HasAverageFuelConsumption() bool {
	if o != nil && !IsNil(o.AverageFuelConsumption) {
		return true
	}

	return false
}

// SetAverageFuelConsumption gets a reference to the given float64 and assigns it to the AverageFuelConsumption field.
func (o *Vehicle) SetAverageFuelConsumption(v float64) {
	o.AverageFuelConsumption = &v
}

// GetAverageElectricityConsumption returns the AverageElectricityConsumption field value if set, zero value otherwise.
func (o *Vehicle) GetAverageElectricityConsumption() float64 {
	if o == nil || IsNil(o.AverageElectricityConsumption) {
		var ret float64
		return ret
	}
	return *o.AverageElectricityConsumption
}

// GetAverageElectricityConsumptionOk returns a tuple with the AverageElectricityConsumption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetAverageElectricityConsumptionOk() (*float64, bool) {
	if o == nil || IsNil(o.AverageElectricityConsumption) {
		return nil, false
	}
	return o.AverageElectricityConsumption, true
}

// HasAverageElectricityConsumption returns a boolean if a field has been set.
func (o *Vehicle) HasAverageElectricityConsumption() bool {
	if o != nil && !IsNil(o.AverageElectricityConsumption) {
		return true
	}

	return false
}

// SetAverageElectricityConsumption gets a reference to the given float64 and assigns it to the AverageElectricityConsumption field.
func (o *Vehicle) SetAverageElectricityConsumption(v float64) {
	o.AverageElectricityConsumption = &v
}

// GetBioFuelRatio returns the BioFuelRatio field value if set, zero value otherwise.
func (o *Vehicle) GetBioFuelRatio() int32 {
	if o == nil || IsNil(o.BioFuelRatio) {
		var ret int32
		return ret
	}
	return *o.BioFuelRatio
}

// GetBioFuelRatioOk returns a tuple with the BioFuelRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetBioFuelRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.BioFuelRatio) {
		return nil, false
	}
	return o.BioFuelRatio, true
}

// HasBioFuelRatio returns a boolean if a field has been set.
func (o *Vehicle) HasBioFuelRatio() bool {
	if o != nil && !IsNil(o.BioFuelRatio) {
		return true
	}

	return false
}

// SetBioFuelRatio gets a reference to the given int32 and assigns it to the BioFuelRatio field.
func (o *Vehicle) SetBioFuelRatio(v int32) {
	o.BioFuelRatio = &v
}

// GetHybridRatio returns the HybridRatio field value if set, zero value otherwise.
func (o *Vehicle) GetHybridRatio() int32 {
	if o == nil || IsNil(o.HybridRatio) {
		var ret int32
		return ret
	}
	return *o.HybridRatio
}

// GetHybridRatioOk returns a tuple with the HybridRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetHybridRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.HybridRatio) {
		return nil, false
	}
	return o.HybridRatio, true
}

// HasHybridRatio returns a boolean if a field has been set.
func (o *Vehicle) HasHybridRatio() bool {
	if o != nil && !IsNil(o.HybridRatio) {
		return true
	}

	return false
}

// SetHybridRatio gets a reference to the given int32 and assigns it to the HybridRatio field.
func (o *Vehicle) SetHybridRatio(v int32) {
	o.HybridRatio = &v
}

// GetDualFuelRatio returns the DualFuelRatio field value if set, zero value otherwise.
func (o *Vehicle) GetDualFuelRatio() int32 {
	if o == nil || IsNil(o.DualFuelRatio) {
		var ret int32
		return ret
	}
	return *o.DualFuelRatio
}

// GetDualFuelRatioOk returns a tuple with the DualFuelRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetDualFuelRatioOk() (*int32, bool) {
	if o == nil || IsNil(o.DualFuelRatio) {
		return nil, false
	}
	return o.DualFuelRatio, true
}

// HasDualFuelRatio returns a boolean if a field has been set.
func (o *Vehicle) HasDualFuelRatio() bool {
	if o != nil && !IsNil(o.DualFuelRatio) {
		return true
	}

	return false
}

// SetDualFuelRatio gets a reference to the given int32 and assigns it to the DualFuelRatio field.
func (o *Vehicle) SetDualFuelRatio(v int32) {
	o.DualFuelRatio = &v
}

// GetCylinderCapacity returns the CylinderCapacity field value if set, zero value otherwise.
func (o *Vehicle) GetCylinderCapacity() int32 {
	if o == nil || IsNil(o.CylinderCapacity) {
		var ret int32
		return ret
	}
	return *o.CylinderCapacity
}

// GetCylinderCapacityOk returns a tuple with the CylinderCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCylinderCapacityOk() (*int32, bool) {
	if o == nil || IsNil(o.CylinderCapacity) {
		return nil, false
	}
	return o.CylinderCapacity, true
}

// HasCylinderCapacity returns a boolean if a field has been set.
func (o *Vehicle) HasCylinderCapacity() bool {
	if o != nil && !IsNil(o.CylinderCapacity) {
		return true
	}

	return false
}

// SetCylinderCapacity gets a reference to the given int32 and assigns it to the CylinderCapacity field.
func (o *Vehicle) SetCylinderCapacity(v int32) {
	o.CylinderCapacity = &v
}

// GetEmissionStandard returns the EmissionStandard field value if set, zero value otherwise.
func (o *Vehicle) GetEmissionStandard() EmissionStandard {
	if o == nil || IsNil(o.EmissionStandard) {
		var ret EmissionStandard
		return ret
	}
	return *o.EmissionStandard
}

// GetEmissionStandardOk returns a tuple with the EmissionStandard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEmissionStandardOk() (*EmissionStandard, bool) {
	if o == nil || IsNil(o.EmissionStandard) {
		return nil, false
	}
	return o.EmissionStandard, true
}

// HasEmissionStandard returns a boolean if a field has been set.
func (o *Vehicle) HasEmissionStandard() bool {
	if o != nil && !IsNil(o.EmissionStandard) {
		return true
	}

	return false
}

// SetEmissionStandard gets a reference to the given EmissionStandard and assigns it to the EmissionStandard field.
func (o *Vehicle) SetEmissionStandard(v EmissionStandard) {
	o.EmissionStandard = &v
}

// GetCo2EmissionClass returns the Co2EmissionClass field value if set, zero value otherwise.
func (o *Vehicle) GetCo2EmissionClass() int32 {
	if o == nil || IsNil(o.Co2EmissionClass) {
		var ret int32
		return ret
	}
	return *o.Co2EmissionClass
}

// GetCo2EmissionClassOk returns a tuple with the Co2EmissionClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCo2EmissionClassOk() (*int32, bool) {
	if o == nil || IsNil(o.Co2EmissionClass) {
		return nil, false
	}
	return o.Co2EmissionClass, true
}

// HasCo2EmissionClass returns a boolean if a field has been set.
func (o *Vehicle) HasCo2EmissionClass() bool {
	if o != nil && !IsNil(o.Co2EmissionClass) {
		return true
	}

	return false
}

// SetCo2EmissionClass gets a reference to the given int32 and assigns it to the Co2EmissionClass field.
func (o *Vehicle) SetCo2EmissionClass(v int32) {
	o.Co2EmissionClass = &v
}

// GetLowEmissionZoneTypes returns the LowEmissionZoneTypes field value if set, zero value otherwise.
// Deprecated
func (o *Vehicle) GetLowEmissionZoneTypes() string {
	if o == nil || IsNil(o.LowEmissionZoneTypes) {
		var ret string
		return ret
	}
	return *o.LowEmissionZoneTypes
}

// GetLowEmissionZoneTypesOk returns a tuple with the LowEmissionZoneTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Vehicle) GetLowEmissionZoneTypesOk() (*string, bool) {
	if o == nil || IsNil(o.LowEmissionZoneTypes) {
		return nil, false
	}
	return o.LowEmissionZoneTypes, true
}

// HasLowEmissionZoneTypes returns a boolean if a field has been set.
func (o *Vehicle) HasLowEmissionZoneTypes() bool {
	if o != nil && !IsNil(o.LowEmissionZoneTypes) {
		return true
	}

	return false
}

// SetLowEmissionZoneTypes gets a reference to the given string and assigns it to the LowEmissionZoneTypes field.
// Deprecated
func (o *Vehicle) SetLowEmissionZoneTypes(v string) {
	o.LowEmissionZoneTypes = &v
}

// GetLowEmissionZoneApprovals returns the LowEmissionZoneApprovals field value if set, zero value otherwise.
func (o *Vehicle) GetLowEmissionZoneApprovals() string {
	if o == nil || IsNil(o.LowEmissionZoneApprovals) {
		var ret string
		return ret
	}
	return *o.LowEmissionZoneApprovals
}

// GetLowEmissionZoneApprovalsOk returns a tuple with the LowEmissionZoneApprovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetLowEmissionZoneApprovalsOk() (*string, bool) {
	if o == nil || IsNil(o.LowEmissionZoneApprovals) {
		return nil, false
	}
	return o.LowEmissionZoneApprovals, true
}

// HasLowEmissionZoneApprovals returns a boolean if a field has been set.
func (o *Vehicle) HasLowEmissionZoneApprovals() bool {
	if o != nil && !IsNil(o.LowEmissionZoneApprovals) {
		return true
	}

	return false
}

// SetLowEmissionZoneApprovals gets a reference to the given string and assigns it to the LowEmissionZoneApprovals field.
func (o *Vehicle) SetLowEmissionZoneApprovals(v string) {
	o.LowEmissionZoneApprovals = &v
}

// GetLowEmissionZoneExemptions returns the LowEmissionZoneExemptions field value if set, zero value otherwise.
func (o *Vehicle) GetLowEmissionZoneExemptions() string {
	if o == nil || IsNil(o.LowEmissionZoneExemptions) {
		var ret string
		return ret
	}
	return *o.LowEmissionZoneExemptions
}

// GetLowEmissionZoneExemptionsOk returns a tuple with the LowEmissionZoneExemptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetLowEmissionZoneExemptionsOk() (*string, bool) {
	if o == nil || IsNil(o.LowEmissionZoneExemptions) {
		return nil, false
	}
	return o.LowEmissionZoneExemptions, true
}

// HasLowEmissionZoneExemptions returns a boolean if a field has been set.
func (o *Vehicle) HasLowEmissionZoneExemptions() bool {
	if o != nil && !IsNil(o.LowEmissionZoneExemptions) {
		return true
	}

	return false
}

// SetLowEmissionZoneExemptions gets a reference to the given string and assigns it to the LowEmissionZoneExemptions field.
func (o *Vehicle) SetLowEmissionZoneExemptions(v string) {
	o.LowEmissionZoneExemptions = &v
}

// GetParticleReductionClass returns the ParticleReductionClass field value if set, zero value otherwise.
func (o *Vehicle) GetParticleReductionClass() ParticleReductionClass {
	if o == nil || IsNil(o.ParticleReductionClass) {
		var ret ParticleReductionClass
		return ret
	}
	return *o.ParticleReductionClass
}

// GetParticleReductionClassOk returns a tuple with the ParticleReductionClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetParticleReductionClassOk() (*ParticleReductionClass, bool) {
	if o == nil || IsNil(o.ParticleReductionClass) {
		return nil, false
	}
	return o.ParticleReductionClass, true
}

// HasParticleReductionClass returns a boolean if a field has been set.
func (o *Vehicle) HasParticleReductionClass() bool {
	if o != nil && !IsNil(o.ParticleReductionClass) {
		return true
	}

	return false
}

// SetParticleReductionClass gets a reference to the given ParticleReductionClass and assigns it to the ParticleReductionClass field.
func (o *Vehicle) SetParticleReductionClass(v ParticleReductionClass) {
	o.ParticleReductionClass = &v
}

// GetEmptyWeight returns the EmptyWeight field value if set, zero value otherwise.
func (o *Vehicle) GetEmptyWeight() int32 {
	if o == nil || IsNil(o.EmptyWeight) {
		var ret int32
		return ret
	}
	return *o.EmptyWeight
}

// GetEmptyWeightOk returns a tuple with the EmptyWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEmptyWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.EmptyWeight) {
		return nil, false
	}
	return o.EmptyWeight, true
}

// HasEmptyWeight returns a boolean if a field has been set.
func (o *Vehicle) HasEmptyWeight() bool {
	if o != nil && !IsNil(o.EmptyWeight) {
		return true
	}

	return false
}

// SetEmptyWeight gets a reference to the given int32 and assigns it to the EmptyWeight field.
func (o *Vehicle) SetEmptyWeight(v int32) {
	o.EmptyWeight = &v
}

// GetLoadWeight returns the LoadWeight field value if set, zero value otherwise.
func (o *Vehicle) GetLoadWeight() int32 {
	if o == nil || IsNil(o.LoadWeight) {
		var ret int32
		return ret
	}
	return *o.LoadWeight
}

// GetLoadWeightOk returns a tuple with the LoadWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetLoadWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.LoadWeight) {
		return nil, false
	}
	return o.LoadWeight, true
}

// HasLoadWeight returns a boolean if a field has been set.
func (o *Vehicle) HasLoadWeight() bool {
	if o != nil && !IsNil(o.LoadWeight) {
		return true
	}

	return false
}

// SetLoadWeight gets a reference to the given int32 and assigns it to the LoadWeight field.
func (o *Vehicle) SetLoadWeight(v int32) {
	o.LoadWeight = &v
}

// GetTotalPermittedWeight returns the TotalPermittedWeight field value if set, zero value otherwise.
func (o *Vehicle) GetTotalPermittedWeight() int32 {
	if o == nil || IsNil(o.TotalPermittedWeight) {
		var ret int32
		return ret
	}
	return *o.TotalPermittedWeight
}

// GetTotalPermittedWeightOk returns a tuple with the TotalPermittedWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTotalPermittedWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPermittedWeight) {
		return nil, false
	}
	return o.TotalPermittedWeight, true
}

// HasTotalPermittedWeight returns a boolean if a field has been set.
func (o *Vehicle) HasTotalPermittedWeight() bool {
	if o != nil && !IsNil(o.TotalPermittedWeight) {
		return true
	}

	return false
}

// SetTotalPermittedWeight gets a reference to the given int32 and assigns it to the TotalPermittedWeight field.
func (o *Vehicle) SetTotalPermittedWeight(v int32) {
	o.TotalPermittedWeight = &v
}

// GetTotalTechnicallyPermittedWeight returns the TotalTechnicallyPermittedWeight field value if set, zero value otherwise.
func (o *Vehicle) GetTotalTechnicallyPermittedWeight() int32 {
	if o == nil || IsNil(o.TotalTechnicallyPermittedWeight) {
		var ret int32
		return ret
	}
	return *o.TotalTechnicallyPermittedWeight
}

// GetTotalTechnicallyPermittedWeightOk returns a tuple with the TotalTechnicallyPermittedWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTotalTechnicallyPermittedWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalTechnicallyPermittedWeight) {
		return nil, false
	}
	return o.TotalTechnicallyPermittedWeight, true
}

// HasTotalTechnicallyPermittedWeight returns a boolean if a field has been set.
func (o *Vehicle) HasTotalTechnicallyPermittedWeight() bool {
	if o != nil && !IsNil(o.TotalTechnicallyPermittedWeight) {
		return true
	}

	return false
}

// SetTotalTechnicallyPermittedWeight gets a reference to the given int32 and assigns it to the TotalTechnicallyPermittedWeight field.
func (o *Vehicle) SetTotalTechnicallyPermittedWeight(v int32) {
	o.TotalTechnicallyPermittedWeight = &v
}

// GetAxleWeight returns the AxleWeight field value if set, zero value otherwise.
func (o *Vehicle) GetAxleWeight() int32 {
	if o == nil || IsNil(o.AxleWeight) {
		var ret int32
		return ret
	}
	return *o.AxleWeight
}

// GetAxleWeightOk returns a tuple with the AxleWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetAxleWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.AxleWeight) {
		return nil, false
	}
	return o.AxleWeight, true
}

// HasAxleWeight returns a boolean if a field has been set.
func (o *Vehicle) HasAxleWeight() bool {
	if o != nil && !IsNil(o.AxleWeight) {
		return true
	}

	return false
}

// SetAxleWeight gets a reference to the given int32 and assigns it to the AxleWeight field.
func (o *Vehicle) SetAxleWeight(v int32) {
	o.AxleWeight = &v
}

// GetNumberOfAxles returns the NumberOfAxles field value if set, zero value otherwise.
func (o *Vehicle) GetNumberOfAxles() int32 {
	if o == nil || IsNil(o.NumberOfAxles) {
		var ret int32
		return ret
	}
	return *o.NumberOfAxles
}

// GetNumberOfAxlesOk returns a tuple with the NumberOfAxles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetNumberOfAxlesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfAxles) {
		return nil, false
	}
	return o.NumberOfAxles, true
}

// HasNumberOfAxles returns a boolean if a field has been set.
func (o *Vehicle) HasNumberOfAxles() bool {
	if o != nil && !IsNil(o.NumberOfAxles) {
		return true
	}

	return false
}

// SetNumberOfAxles gets a reference to the given int32 and assigns it to the NumberOfAxles field.
func (o *Vehicle) SetNumberOfAxles(v int32) {
	o.NumberOfAxles = &v
}

// GetNumberOfTires returns the NumberOfTires field value if set, zero value otherwise.
func (o *Vehicle) GetNumberOfTires() int32 {
	if o == nil || IsNil(o.NumberOfTires) {
		var ret int32
		return ret
	}
	return *o.NumberOfTires
}

// GetNumberOfTiresOk returns a tuple with the NumberOfTires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetNumberOfTiresOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfTires) {
		return nil, false
	}
	return o.NumberOfTires, true
}

// HasNumberOfTires returns a boolean if a field has been set.
func (o *Vehicle) HasNumberOfTires() bool {
	if o != nil && !IsNil(o.NumberOfTires) {
		return true
	}

	return false
}

// SetNumberOfTires gets a reference to the given int32 and assigns it to the NumberOfTires field.
func (o *Vehicle) SetNumberOfTires(v int32) {
	o.NumberOfTires = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *Vehicle) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *Vehicle) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *Vehicle) SetHeight(v int32) {
	o.Height = &v
}

// GetHeightAboveFrontAxle returns the HeightAboveFrontAxle field value if set, zero value otherwise.
func (o *Vehicle) GetHeightAboveFrontAxle() int32 {
	if o == nil || IsNil(o.HeightAboveFrontAxle) {
		var ret int32
		return ret
	}
	return *o.HeightAboveFrontAxle
}

// GetHeightAboveFrontAxleOk returns a tuple with the HeightAboveFrontAxle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetHeightAboveFrontAxleOk() (*int32, bool) {
	if o == nil || IsNil(o.HeightAboveFrontAxle) {
		return nil, false
	}
	return o.HeightAboveFrontAxle, true
}

// HasHeightAboveFrontAxle returns a boolean if a field has been set.
func (o *Vehicle) HasHeightAboveFrontAxle() bool {
	if o != nil && !IsNil(o.HeightAboveFrontAxle) {
		return true
	}

	return false
}

// SetHeightAboveFrontAxle gets a reference to the given int32 and assigns it to the HeightAboveFrontAxle field.
func (o *Vehicle) SetHeightAboveFrontAxle(v int32) {
	o.HeightAboveFrontAxle = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *Vehicle) GetLength() int32 {
	if o == nil || IsNil(o.Length) {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *Vehicle) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *Vehicle) SetLength(v int32) {
	o.Length = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *Vehicle) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *Vehicle) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *Vehicle) SetWidth(v int32) {
	o.Width = &v
}

// GetHazardousMaterials returns the HazardousMaterials field value if set, zero value otherwise.
func (o *Vehicle) GetHazardousMaterials() string {
	if o == nil || IsNil(o.HazardousMaterials) {
		var ret string
		return ret
	}
	return *o.HazardousMaterials
}

// GetHazardousMaterialsOk returns a tuple with the HazardousMaterials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetHazardousMaterialsOk() (*string, bool) {
	if o == nil || IsNil(o.HazardousMaterials) {
		return nil, false
	}
	return o.HazardousMaterials, true
}

// HasHazardousMaterials returns a boolean if a field has been set.
func (o *Vehicle) HasHazardousMaterials() bool {
	if o != nil && !IsNil(o.HazardousMaterials) {
		return true
	}

	return false
}

// SetHazardousMaterials gets a reference to the given string and assigns it to the HazardousMaterials field.
func (o *Vehicle) SetHazardousMaterials(v string) {
	o.HazardousMaterials = &v
}

// GetTunnelRestrictionCode returns the TunnelRestrictionCode field value if set, zero value otherwise.
func (o *Vehicle) GetTunnelRestrictionCode() TunnelRestrictionCode {
	if o == nil || IsNil(o.TunnelRestrictionCode) {
		var ret TunnelRestrictionCode
		return ret
	}
	return *o.TunnelRestrictionCode
}

// GetTunnelRestrictionCodeOk returns a tuple with the TunnelRestrictionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTunnelRestrictionCodeOk() (*TunnelRestrictionCode, bool) {
	if o == nil || IsNil(o.TunnelRestrictionCode) {
		return nil, false
	}
	return o.TunnelRestrictionCode, true
}

// HasTunnelRestrictionCode returns a boolean if a field has been set.
func (o *Vehicle) HasTunnelRestrictionCode() bool {
	if o != nil && !IsNil(o.TunnelRestrictionCode) {
		return true
	}

	return false
}

// SetTunnelRestrictionCode gets a reference to the given TunnelRestrictionCode and assigns it to the TunnelRestrictionCode field.
func (o *Vehicle) SetTunnelRestrictionCode(v TunnelRestrictionCode) {
	o.TunnelRestrictionCode = &v
}

// GetTruckRoutes returns the TruckRoutes field value if set, zero value otherwise.
func (o *Vehicle) GetTruckRoutes() string {
	if o == nil || IsNil(o.TruckRoutes) {
		var ret string
		return ret
	}
	return *o.TruckRoutes
}

// GetTruckRoutesOk returns a tuple with the TruckRoutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetTruckRoutesOk() (*string, bool) {
	if o == nil || IsNil(o.TruckRoutes) {
		return nil, false
	}
	return o.TruckRoutes, true
}

// HasTruckRoutes returns a boolean if a field has been set.
func (o *Vehicle) HasTruckRoutes() bool {
	if o != nil && !IsNil(o.TruckRoutes) {
		return true
	}

	return false
}

// SetTruckRoutes gets a reference to the given string and assigns it to the TruckRoutes field.
func (o *Vehicle) SetTruckRoutes(v string) {
	o.TruckRoutes = &v
}

// GetCommercial returns the Commercial field value if set, zero value otherwise.
func (o *Vehicle) GetCommercial() bool {
	if o == nil || IsNil(o.Commercial) {
		var ret bool
		return ret
	}
	return *o.Commercial
}

// GetCommercialOk returns a tuple with the Commercial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCommercialOk() (*bool, bool) {
	if o == nil || IsNil(o.Commercial) {
		return nil, false
	}
	return o.Commercial, true
}

// HasCommercial returns a boolean if a field has been set.
func (o *Vehicle) HasCommercial() bool {
	if o != nil && !IsNil(o.Commercial) {
		return true
	}

	return false
}

// SetCommercial gets a reference to the given bool and assigns it to the Commercial field.
func (o *Vehicle) SetCommercial(v bool) {
	o.Commercial = &v
}

// GetEtcSubscriptions returns the EtcSubscriptions field value if set, zero value otherwise.
func (o *Vehicle) GetEtcSubscriptions() string {
	if o == nil || IsNil(o.EtcSubscriptions) {
		var ret string
		return ret
	}
	return *o.EtcSubscriptions
}

// GetEtcSubscriptionsOk returns a tuple with the EtcSubscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEtcSubscriptionsOk() (*string, bool) {
	if o == nil || IsNil(o.EtcSubscriptions) {
		return nil, false
	}
	return o.EtcSubscriptions, true
}

// HasEtcSubscriptions returns a boolean if a field has been set.
func (o *Vehicle) HasEtcSubscriptions() bool {
	if o != nil && !IsNil(o.EtcSubscriptions) {
		return true
	}

	return false
}

// SetEtcSubscriptions gets a reference to the given string and assigns it to the EtcSubscriptions field.
func (o *Vehicle) SetEtcSubscriptions(v string) {
	o.EtcSubscriptions = &v
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineType) {
		toSerialize["engineType"] = o.EngineType
	}
	if !IsNil(o.FuelType) {
		toSerialize["fuelType"] = o.FuelType
	}
	if !IsNil(o.ElectricityType) {
		toSerialize["electricityType"] = o.ElectricityType
	}
	if !IsNil(o.AverageFuelConsumption) {
		toSerialize["averageFuelConsumption"] = o.AverageFuelConsumption
	}
	if !IsNil(o.AverageElectricityConsumption) {
		toSerialize["averageElectricityConsumption"] = o.AverageElectricityConsumption
	}
	if !IsNil(o.BioFuelRatio) {
		toSerialize["bioFuelRatio"] = o.BioFuelRatio
	}
	if !IsNil(o.HybridRatio) {
		toSerialize["hybridRatio"] = o.HybridRatio
	}
	if !IsNil(o.DualFuelRatio) {
		toSerialize["dualFuelRatio"] = o.DualFuelRatio
	}
	if !IsNil(o.CylinderCapacity) {
		toSerialize["cylinderCapacity"] = o.CylinderCapacity
	}
	if !IsNil(o.EmissionStandard) {
		toSerialize["emissionStandard"] = o.EmissionStandard
	}
	if !IsNil(o.Co2EmissionClass) {
		toSerialize["co2EmissionClass"] = o.Co2EmissionClass
	}
	if !IsNil(o.LowEmissionZoneTypes) {
		toSerialize["lowEmissionZoneTypes"] = o.LowEmissionZoneTypes
	}
	if !IsNil(o.LowEmissionZoneApprovals) {
		toSerialize["lowEmissionZoneApprovals"] = o.LowEmissionZoneApprovals
	}
	if !IsNil(o.LowEmissionZoneExemptions) {
		toSerialize["lowEmissionZoneExemptions"] = o.LowEmissionZoneExemptions
	}
	if !IsNil(o.ParticleReductionClass) {
		toSerialize["particleReductionClass"] = o.ParticleReductionClass
	}
	if !IsNil(o.EmptyWeight) {
		toSerialize["emptyWeight"] = o.EmptyWeight
	}
	if !IsNil(o.LoadWeight) {
		toSerialize["loadWeight"] = o.LoadWeight
	}
	if !IsNil(o.TotalPermittedWeight) {
		toSerialize["totalPermittedWeight"] = o.TotalPermittedWeight
	}
	if !IsNil(o.TotalTechnicallyPermittedWeight) {
		toSerialize["totalTechnicallyPermittedWeight"] = o.TotalTechnicallyPermittedWeight
	}
	if !IsNil(o.AxleWeight) {
		toSerialize["axleWeight"] = o.AxleWeight
	}
	if !IsNil(o.NumberOfAxles) {
		toSerialize["numberOfAxles"] = o.NumberOfAxles
	}
	if !IsNil(o.NumberOfTires) {
		toSerialize["numberOfTires"] = o.NumberOfTires
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.HeightAboveFrontAxle) {
		toSerialize["heightAboveFrontAxle"] = o.HeightAboveFrontAxle
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.HazardousMaterials) {
		toSerialize["hazardousMaterials"] = o.HazardousMaterials
	}
	if !IsNil(o.TunnelRestrictionCode) {
		toSerialize["tunnelRestrictionCode"] = o.TunnelRestrictionCode
	}
	if !IsNil(o.TruckRoutes) {
		toSerialize["truckRoutes"] = o.TruckRoutes
	}
	if !IsNil(o.Commercial) {
		toSerialize["commercial"] = o.Commercial
	}
	if !IsNil(o.EtcSubscriptions) {
		toSerialize["etcSubscriptions"] = o.EtcSubscriptions
	}
	return toSerialize, nil
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


