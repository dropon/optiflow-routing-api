/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ViolatedVehicleProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViolatedVehicleProperty{}

// ViolatedVehicleProperty struct for ViolatedVehicleProperty
type ViolatedVehicleProperty struct {
	// The name of the violated vehicle property.  The following values represent a vehicle property which is greater than the given **limit**: \"WEIGHT\", \"HEIGHT\", \"LENGTH\", \"AXLE_WEIGHT\", \"WIDTH\", \"KPRA_LENGTH\", \"NUMBER_OF_AXLES\", \"TOTAL_PERMITTED_WEIGHT\".  The following values represent a vehicle property for which **value** contains additional information: \"LOW_EMISSION_ZONE\", \"TRUCK_ROUTE\", \"HAZARDOUS_MATERIALS\", \"TUNNEL_RESTRICTION\", \"TRAILER\".  This list can be extended at any time, clients should handle unknown values properly.  See [here](./concepts/violations) for more information.
	Property *string `json:"property,omitempty"`
	// If the **property** represents a vehicle dimension such as _WEIGHT_ or _HEIGHT_, this value contains the limit which was exceeded by the vehicle.
	Limit *int32 `json:"limit,omitempty"`
	// If the **property** is:  * _LOW_EMISSION_ZONE_, this value contains the name of the low-emission zone, see the corresponding low-emission zone event for details on what is required to enter this zone, * _TRUCK_ROUTE_, this value contains the name of the truck route prohibited for the selected vehicle, * _HAZARDOUS_MATERIALS_, this value contains a comma-separated list of the prohibited hazardous materials. * _TUNNEL_RESTRICTION_, this value represents the allowed tunnel restriction code. * _TRAILER_, this value represents that a trailer is not allowed.
	Value *string `json:"value,omitempty"`
}

// NewViolatedVehicleProperty instantiates a new ViolatedVehicleProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViolatedVehicleProperty() *ViolatedVehicleProperty {
	this := ViolatedVehicleProperty{}
	return &this
}

// NewViolatedVehiclePropertyWithDefaults instantiates a new ViolatedVehicleProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViolatedVehiclePropertyWithDefaults() *ViolatedVehicleProperty {
	this := ViolatedVehicleProperty{}
	return &this
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *ViolatedVehicleProperty) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolatedVehicleProperty) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *ViolatedVehicleProperty) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *ViolatedVehicleProperty) SetProperty(v string) {
	o.Property = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ViolatedVehicleProperty) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolatedVehicleProperty) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ViolatedVehicleProperty) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *ViolatedVehicleProperty) SetLimit(v int32) {
	o.Limit = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ViolatedVehicleProperty) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViolatedVehicleProperty) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ViolatedVehicleProperty) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ViolatedVehicleProperty) SetValue(v string) {
	o.Value = &v
}

func (o ViolatedVehicleProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViolatedVehicleProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableViolatedVehicleProperty struct {
	value *ViolatedVehicleProperty
	isSet bool
}

func (v NullableViolatedVehicleProperty) Get() *ViolatedVehicleProperty {
	return v.value
}

func (v *NullableViolatedVehicleProperty) Set(val *ViolatedVehicleProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableViolatedVehicleProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableViolatedVehicleProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolatedVehicleProperty(val *ViolatedVehicleProperty) *NullableViolatedVehicleProperty {
	return &NullableViolatedVehicleProperty{value: val, isSet: true}
}

func (v NullableViolatedVehicleProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolatedVehicleProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


