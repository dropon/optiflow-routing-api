/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
)

// checks if the Waypoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Waypoint{}

// Waypoint struct for Waypoint
type Waypoint struct {
	// An identifier to reference this waypoint in the response.
	Name *string `json:"name,omitempty"`
	OnRoad *OnRoadWaypoint `json:"onRoad,omitempty"`
	OffRoad *OffRoadWaypoint `json:"offRoad,omitempty"`
	Manipulate *ManipulateRouteWaypoint `json:"manipulate,omitempty"`
	CombinedTransport *CombinedTransport `json:"combinedTransport,omitempty"`
}

// NewWaypoint instantiates a new Waypoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaypoint() *Waypoint {
	this := Waypoint{}
	return &this
}

// NewWaypointWithDefaults instantiates a new Waypoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaypointWithDefaults() *Waypoint {
	this := Waypoint{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Waypoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Waypoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Waypoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Waypoint) SetName(v string) {
	o.Name = &v
}

// GetOnRoad returns the OnRoad field value if set, zero value otherwise.
func (o *Waypoint) GetOnRoad() OnRoadWaypoint {
	if o == nil || IsNil(o.OnRoad) {
		var ret OnRoadWaypoint
		return ret
	}
	return *o.OnRoad
}

// GetOnRoadOk returns a tuple with the OnRoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Waypoint) GetOnRoadOk() (*OnRoadWaypoint, bool) {
	if o == nil || IsNil(o.OnRoad) {
		return nil, false
	}
	return o.OnRoad, true
}

// HasOnRoad returns a boolean if a field has been set.
func (o *Waypoint) HasOnRoad() bool {
	if o != nil && !IsNil(o.OnRoad) {
		return true
	}

	return false
}

// SetOnRoad gets a reference to the given OnRoadWaypoint and assigns it to the OnRoad field.
func (o *Waypoint) SetOnRoad(v OnRoadWaypoint) {
	o.OnRoad = &v
}

// GetOffRoad returns the OffRoad field value if set, zero value otherwise.
func (o *Waypoint) GetOffRoad() OffRoadWaypoint {
	if o == nil || IsNil(o.OffRoad) {
		var ret OffRoadWaypoint
		return ret
	}
	return *o.OffRoad
}

// GetOffRoadOk returns a tuple with the OffRoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Waypoint) GetOffRoadOk() (*OffRoadWaypoint, bool) {
	if o == nil || IsNil(o.OffRoad) {
		return nil, false
	}
	return o.OffRoad, true
}

// HasOffRoad returns a boolean if a field has been set.
func (o *Waypoint) HasOffRoad() bool {
	if o != nil && !IsNil(o.OffRoad) {
		return true
	}

	return false
}

// SetOffRoad gets a reference to the given OffRoadWaypoint and assigns it to the OffRoad field.
func (o *Waypoint) SetOffRoad(v OffRoadWaypoint) {
	o.OffRoad = &v
}

// GetManipulate returns the Manipulate field value if set, zero value otherwise.
func (o *Waypoint) GetManipulate() ManipulateRouteWaypoint {
	if o == nil || IsNil(o.Manipulate) {
		var ret ManipulateRouteWaypoint
		return ret
	}
	return *o.Manipulate
}

// GetManipulateOk returns a tuple with the Manipulate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Waypoint) GetManipulateOk() (*ManipulateRouteWaypoint, bool) {
	if o == nil || IsNil(o.Manipulate) {
		return nil, false
	}
	return o.Manipulate, true
}

// HasManipulate returns a boolean if a field has been set.
func (o *Waypoint) HasManipulate() bool {
	if o != nil && !IsNil(o.Manipulate) {
		return true
	}

	return false
}

// SetManipulate gets a reference to the given ManipulateRouteWaypoint and assigns it to the Manipulate field.
func (o *Waypoint) SetManipulate(v ManipulateRouteWaypoint) {
	o.Manipulate = &v
}

// GetCombinedTransport returns the CombinedTransport field value if set, zero value otherwise.
func (o *Waypoint) GetCombinedTransport() CombinedTransport {
	if o == nil || IsNil(o.CombinedTransport) {
		var ret CombinedTransport
		return ret
	}
	return *o.CombinedTransport
}

// GetCombinedTransportOk returns a tuple with the CombinedTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Waypoint) GetCombinedTransportOk() (*CombinedTransport, bool) {
	if o == nil || IsNil(o.CombinedTransport) {
		return nil, false
	}
	return o.CombinedTransport, true
}

// HasCombinedTransport returns a boolean if a field has been set.
func (o *Waypoint) HasCombinedTransport() bool {
	if o != nil && !IsNil(o.CombinedTransport) {
		return true
	}

	return false
}

// SetCombinedTransport gets a reference to the given CombinedTransport and assigns it to the CombinedTransport field.
func (o *Waypoint) SetCombinedTransport(v CombinedTransport) {
	o.CombinedTransport = &v
}

func (o Waypoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Waypoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.OnRoad) {
		toSerialize["onRoad"] = o.OnRoad
	}
	if !IsNil(o.OffRoad) {
		toSerialize["offRoad"] = o.OffRoad
	}
	if !IsNil(o.Manipulate) {
		toSerialize["manipulate"] = o.Manipulate
	}
	if !IsNil(o.CombinedTransport) {
		toSerialize["combinedTransport"] = o.CombinedTransport
	}
	return toSerialize, nil
}

type NullableWaypoint struct {
	value *Waypoint
	isSet bool
}

func (v NullableWaypoint) Get() *Waypoint {
	return v.value
}

func (v *NullableWaypoint) Set(val *Waypoint) {
	v.value = val
	v.isSet = true
}

func (v NullableWaypoint) IsSet() bool {
	return v.isSet
}

func (v *NullableWaypoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaypoint(val *Waypoint) *NullableWaypoint {
	return &NullableWaypoint{value: val, isSet: true}
}

func (v NullableWaypoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaypoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


