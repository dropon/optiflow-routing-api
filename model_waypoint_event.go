/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WaypointEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WaypointEvent{}

// WaypointEvent Issued when a waypoint is reached by the route, but not for route-manipulation waypoints. When using drivers' working hours and the schedule requires a break or a waiting time before the service, the waypoint event is issued already with the break or the waiting time as the location is already reached. Requires _WAYPOINT_EVENTS_ to be requested.
type WaypointEvent struct {
	// The index of the waypoint in the request.
	Index int32 `json:"index"`
	// The name of the waypoint as given in the request. This field is only present if it is not empty.
	Name *string `json:"name,omitempty"`
}

type _WaypointEvent WaypointEvent

// NewWaypointEvent instantiates a new WaypointEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaypointEvent(index int32) *WaypointEvent {
	this := WaypointEvent{}
	this.Index = index
	return &this
}

// NewWaypointEventWithDefaults instantiates a new WaypointEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaypointEventWithDefaults() *WaypointEvent {
	this := WaypointEvent{}
	return &this
}

// GetIndex returns the Index field value
func (o *WaypointEvent) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *WaypointEvent) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *WaypointEvent) SetIndex(v int32) {
	o.Index = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WaypointEvent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaypointEvent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WaypointEvent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WaypointEvent) SetName(v string) {
	o.Name = &v
}

func (o WaypointEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WaypointEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

func (o *WaypointEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWaypointEvent := _WaypointEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWaypointEvent)

	if err != nil {
		return err
	}

	*o = WaypointEvent(varWaypointEvent)

	return err
}

type NullableWaypointEvent struct {
	value *WaypointEvent
	isSet bool
}

func (v NullableWaypointEvent) Get() *WaypointEvent {
	return v.value
}

func (v *NullableWaypointEvent) Set(val *WaypointEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableWaypointEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableWaypointEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaypointEvent(val *WaypointEvent) *NullableWaypointEvent {
	return &NullableWaypointEvent{value: val, isSet: true}
}

func (v NullableWaypointEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaypointEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


