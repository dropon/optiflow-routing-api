/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.33
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow_routing

import (
	"encoding/json"
)

// checks if the Weather type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Weather{}

// Weather The weather at a waypoint. It is relevant to the electricity consumption calculation of electric vehicles. The  weather is valid until the end of the route unless it is changed again at a subsequent waypoint. If no weather  is configured at any waypoint, the weather is automatically determined using the [OpenMeteo](https://open-meteo.com)  weather service. This is only available if the time of the route is no more than 14 days in the future. If the routing is outside of this time box and no weather is configured at any waypoint, a temperature of 23°C and no  wind is assumed for minimal impact on the consumption calculation. The parameter **windDirection** must not be null if **windSpeed** is set to anything but 0. 
type Weather struct {
	// The average temperature at a waypoint at 2 meters above ground[°C]. Used to estimate the state of health of the  battery and consumption due to air conditioning.
	Temperature *float64 `json:"temperature,omitempty"`
	// The average wind speed at a waypoint at 10 meters above ground [km/h].
	WindSpeed *int32 `json:"windSpeed,omitempty"`
	// The wind direction (clockwise) at 10 meters above ground. North represents 0 degrees.
	WindDirection *int32 `json:"windDirection,omitempty"`
}

// NewWeather instantiates a new Weather object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeather() *Weather {
	this := Weather{}
	return &this
}

// NewWeatherWithDefaults instantiates a new Weather object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeatherWithDefaults() *Weather {
	this := Weather{}
	return &this
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *Weather) GetTemperature() float64 {
	if o == nil || IsNil(o.Temperature) {
		var ret float64
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Weather) GetTemperatureOk() (*float64, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *Weather) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float64 and assigns it to the Temperature field.
func (o *Weather) SetTemperature(v float64) {
	o.Temperature = &v
}

// GetWindSpeed returns the WindSpeed field value if set, zero value otherwise.
func (o *Weather) GetWindSpeed() int32 {
	if o == nil || IsNil(o.WindSpeed) {
		var ret int32
		return ret
	}
	return *o.WindSpeed
}

// GetWindSpeedOk returns a tuple with the WindSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Weather) GetWindSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.WindSpeed) {
		return nil, false
	}
	return o.WindSpeed, true
}

// HasWindSpeed returns a boolean if a field has been set.
func (o *Weather) HasWindSpeed() bool {
	if o != nil && !IsNil(o.WindSpeed) {
		return true
	}

	return false
}

// SetWindSpeed gets a reference to the given int32 and assigns it to the WindSpeed field.
func (o *Weather) SetWindSpeed(v int32) {
	o.WindSpeed = &v
}

// GetWindDirection returns the WindDirection field value if set, zero value otherwise.
func (o *Weather) GetWindDirection() int32 {
	if o == nil || IsNil(o.WindDirection) {
		var ret int32
		return ret
	}
	return *o.WindDirection
}

// GetWindDirectionOk returns a tuple with the WindDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Weather) GetWindDirectionOk() (*int32, bool) {
	if o == nil || IsNil(o.WindDirection) {
		return nil, false
	}
	return o.WindDirection, true
}

// HasWindDirection returns a boolean if a field has been set.
func (o *Weather) HasWindDirection() bool {
	if o != nil && !IsNil(o.WindDirection) {
		return true
	}

	return false
}

// SetWindDirection gets a reference to the given int32 and assigns it to the WindDirection field.
func (o *Weather) SetWindDirection(v int32) {
	o.WindDirection = &v
}

func (o Weather) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Weather) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.WindSpeed) {
		toSerialize["windSpeed"] = o.WindSpeed
	}
	if !IsNil(o.WindDirection) {
		toSerialize["windDirection"] = o.WindDirection
	}
	return toSerialize, nil
}

type NullableWeather struct {
	value *Weather
	isSet bool
}

func (v NullableWeather) Get() *Weather {
	return v.value
}

func (v *NullableWeather) Set(val *Weather) {
	v.value = val
	v.isSet = true
}

func (v NullableWeather) IsSet() bool {
	return v.isSet
}

func (v *NullableWeather) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeather(val *Weather) *NullableWeather {
	return &NullableWeather{value: val, isSet: true}
}

func (v NullableWeather) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeather) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


