/*
Routing

With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.

API version: 1.36
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the WeatherResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeatherResponse{}

// WeatherResponse The weather used for the electricity consumption calculation. 
type WeatherResponse struct {
	// The average temperature at 2 meters above ground [Â°C]. Used to estimate the state of health of the  battery and consumption due to air conditioning.
	Temperature *float64 `json:"temperature,omitempty"`
	// The average wind speed at 10 meters above ground [km/h].
	WindSpeed *int32 `json:"windSpeed,omitempty"`
	// The wind direction (clockwise) at 10 meters above ground. North represents 0 degrees.
	WindDirection *int32 `json:"windDirection,omitempty"`
}

// NewWeatherResponse instantiates a new WeatherResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeatherResponse() *WeatherResponse {
	this := WeatherResponse{}
	return &this
}

// NewWeatherResponseWithDefaults instantiates a new WeatherResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeatherResponseWithDefaults() *WeatherResponse {
	this := WeatherResponse{}
	return &this
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *WeatherResponse) GetTemperature() float64 {
	if o == nil || IsNil(o.Temperature) {
		var ret float64
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeatherResponse) GetTemperatureOk() (*float64, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *WeatherResponse) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float64 and assigns it to the Temperature field.
func (o *WeatherResponse) SetTemperature(v float64) {
	o.Temperature = &v
}

// GetWindSpeed returns the WindSpeed field value if set, zero value otherwise.
func (o *WeatherResponse) GetWindSpeed() int32 {
	if o == nil || IsNil(o.WindSpeed) {
		var ret int32
		return ret
	}
	return *o.WindSpeed
}

// GetWindSpeedOk returns a tuple with the WindSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeatherResponse) GetWindSpeedOk() (*int32, bool) {
	if o == nil || IsNil(o.WindSpeed) {
		return nil, false
	}
	return o.WindSpeed, true
}

// HasWindSpeed returns a boolean if a field has been set.
func (o *WeatherResponse) HasWindSpeed() bool {
	if o != nil && !IsNil(o.WindSpeed) {
		return true
	}

	return false
}

// SetWindSpeed gets a reference to the given int32 and assigns it to the WindSpeed field.
func (o *WeatherResponse) SetWindSpeed(v int32) {
	o.WindSpeed = &v
}

// GetWindDirection returns the WindDirection field value if set, zero value otherwise.
func (o *WeatherResponse) GetWindDirection() int32 {
	if o == nil || IsNil(o.WindDirection) {
		var ret int32
		return ret
	}
	return *o.WindDirection
}

// GetWindDirectionOk returns a tuple with the WindDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WeatherResponse) GetWindDirectionOk() (*int32, bool) {
	if o == nil || IsNil(o.WindDirection) {
		return nil, false
	}
	return o.WindDirection, true
}

// HasWindDirection returns a boolean if a field has been set.
func (o *WeatherResponse) HasWindDirection() bool {
	if o != nil && !IsNil(o.WindDirection) {
		return true
	}

	return false
}

// SetWindDirection gets a reference to the given int32 and assigns it to the WindDirection field.
func (o *WeatherResponse) SetWindDirection(v int32) {
	o.WindDirection = &v
}

func (o WeatherResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeatherResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.WindSpeed) {
		toSerialize["windSpeed"] = o.WindSpeed
	}
	if !IsNil(o.WindDirection) {
		toSerialize["windDirection"] = o.WindDirection
	}
	return toSerialize, nil
}

type NullableWeatherResponse struct {
	value *WeatherResponse
	isSet bool
}

func (v NullableWeatherResponse) Get() *WeatherResponse {
	return v.value
}

func (v *NullableWeatherResponse) Set(val *WeatherResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWeatherResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWeatherResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeatherResponse(val *WeatherResponse) *NullableWeatherResponse {
	return &NullableWeatherResponse{value: val, isSet: true}
}

func (v NullableWeatherResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeatherResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


